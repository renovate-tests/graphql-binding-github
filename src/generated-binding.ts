import { Binding as BaseBinding, BindingOptions } from 'graphql-binding'
import { GraphQLResolveInfo } from 'graphql'

export const typeDefs = `
"""Autogenerated input type of AcceptTopicSuggestion"""
input AcceptTopicSuggestionInput {
  """The Node ID of the repository."""
  repositoryId: ID!

  """The name of the suggested topic."""
  name: String!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AcceptTopicSuggestion"""
type AcceptTopicSuggestionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The accepted topic."""
  topic: Topic!
}

"""
Represents an object which can take actions on GitHub. Typically a User or Bot.
"""
interface Actor {
  """A URL pointing to the actor's public avatar."""
  avatarUrl(
    """The size of the resulting square image."""
    size: Int
  ): URI!

  """The username of the actor."""
  login: String!

  """The HTTP path for this actor."""
  resourcePath: URI!

  """The HTTP URL for this actor."""
  url: URI!
}

"""Autogenerated input type of AddComment"""
input AddCommentInput {
  """The Node ID of the subject to modify."""
  subjectId: ID!

  """The contents of the comment."""
  body: String!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddComment"""
type AddCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The edge from the subject's comment connection."""
  commentEdge: IssueCommentEdge!

  """The subject"""
  subject: Node!

  """The edge from the subject's timeline connection."""
  timelineEdge: IssueTimelineItemEdge!
}

"""
Represents a 'added_to_project' event on a given issue or pull request.
"""
type AddedToProjectEvent implements Node {
  """Identifies the actor who performed the event."""
  actor: Actor

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Identifies the primary key from the database."""
  databaseId: Int @deprecated(reason: "Exposed database IDs will eventually be removed in favor of global Relay IDs. Use 'Node.id' instead. Removal on 2018-07-01 UTC.")
  id: ID!
}

"""Autogenerated input type of AddProjectCard"""
input AddProjectCardInput {
  """The Node ID of the ProjectColumn."""
  projectColumnId: ID!

  """
  The content of the card. Must be a member of the ProjectCardItem union
  """
  contentId: ID

  """The note on the card."""
  note: String

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddProjectCard"""
type AddProjectCardPayload {
  """The edge from the ProjectColumn's card connection."""
  cardEdge: ProjectCardEdge!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The ProjectColumn"""
  projectColumn: Project!
}

"""Autogenerated input type of AddProjectColumn"""
input AddProjectColumnInput {
  """The Node ID of the project."""
  projectId: ID!

  """The name of the column."""
  name: String!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddProjectColumn"""
type AddProjectColumnPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The edge from the project's column connection."""
  columnEdge: ProjectColumnEdge!

  """The project"""
  project: Project!
}

"""Autogenerated input type of AddPullRequestReviewComment"""
input AddPullRequestReviewCommentInput {
  """The Node ID of the review to modify."""
  pullRequestReviewId: ID!

  """The SHA of the commit to comment on."""
  commitOID: GitObjectID

  """The text of the comment."""
  body: String!

  """The relative path of the file to comment on."""
  path: String

  """The line index in the diff to comment on."""
  position: Int

  """The comment id to reply to."""
  inReplyTo: ID

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddPullRequestReviewComment"""
type AddPullRequestReviewCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The newly created comment."""
  comment: PullRequestReviewComment!

  """The edge from the review's comment connection."""
  commentEdge: PullRequestReviewCommentEdge!
}

"""Autogenerated input type of AddPullRequestReview"""
input AddPullRequestReviewInput {
  """The Node ID of the pull request to modify."""
  pullRequestId: ID!

  """The commit OID the review pertains to."""
  commitOID: GitObjectID

  """The contents of the review body comment."""
  body: String

  """The event to perform on the pull request review."""
  event: PullRequestReviewEvent

  """The review line comments."""
  comments: [DraftPullRequestReviewComment]

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddPullRequestReview"""
type AddPullRequestReviewPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The newly created pull request review."""
  pullRequestReview: PullRequestReview!

  """The edge from the pull request's review connection."""
  reviewEdge: PullRequestReviewEdge!
}

"""Autogenerated input type of AddReaction"""
input AddReactionInput {
  """The Node ID of the subject to modify."""
  subjectId: ID!

  """The name of the emoji to react with."""
  content: ReactionContent!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddReaction"""
type AddReactionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The reaction object."""
  reaction: Reaction!

  """The reactable subject."""
  subject: Reactable!
}

"""Autogenerated input type of AddStar"""
input AddStarInput {
  """The Starrable ID to star."""
  starrableId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of AddStar"""
type AddStarPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The starrable."""
  starrable: Starrable!
}

"""An object that can have users assigned to it."""
interface Assignable {
  """A list of Users assigned to this object."""
  assignees(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): UserConnection!
}

"""Represents an 'assigned' event on any assignable object."""
type AssignedEvent implements Node {
  """Identifies the actor who performed the event."""
  actor: Actor

  """Identifies the assignable associated with the event."""
  assignable: Assignable!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!

  """Identifies the user who was assigned."""
  user: User
}

"""
Represents a 'base_ref_changed' event on a given issue or pull request.
"""
type BaseRefChangedEvent implements Node {
  """Identifies the actor who performed the event."""
  actor: Actor

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Identifies the primary key from the database."""
  databaseId: Int @deprecated(reason: "Exposed database IDs will eventually be removed in favor of global Relay IDs. Use 'Node.id' instead. Removal on 2018-07-01 UTC.")
  id: ID!
}

"""Represents a 'base_ref_force_pushed' event on a given pull request."""
type BaseRefForcePushedEvent implements Node {
  """Identifies the actor who performed the event."""
  actor: Actor

  """
  Identifies the after commit SHA for the 'base_ref_force_pushed' event.
  """
  afterCommit: Commit

  """
  Identifies the before commit SHA for the 'base_ref_force_pushed' event.
  """
  beforeCommit: Commit

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!

  """PullRequest referenced by event."""
  pullRequest: PullRequest!

  """
  Identifies the fully qualified ref name for the 'base_ref_force_pushed' event.
  """
  ref: Ref
}

"""Represents a Git blame."""
type Blame {
  """The list of ranges from a Git blame."""
  ranges: [BlameRange!]!
}

"""Represents a range of information from a Git blame."""
type BlameRange {
  """
  Identifies the recency of the change, from 1 (new) to 10 (old). This is
  calculated as a 2-quantile and determines the length of distance between the
  median age of all the changes in the file and the recency of the current
  range's change.
  """
  age: Int!

  """Identifies the line author"""
  commit: Commit!

  """The ending line for the range"""
  endingLine: Int!

  """The starting line for the range"""
  startingLine: Int!
}

"""Represents a Git blob."""
type Blob implements Node & GitObject {
  """An abbreviated version of the Git object ID"""
  abbreviatedOid: String!

  """Byte size of Blob object"""
  byteSize: Int!

  """The HTTP path for this Git object"""
  commitResourcePath: URI!

  """The HTTP URL for this Git object"""
  commitUrl: URI!
  id: ID!

  """Indicates whether the Blob is binary or text"""
  isBinary: Boolean!

  """Indicates whether the contents is truncated"""
  isTruncated: Boolean!

  """The Git object ID"""
  oid: GitObjectID!

  """The Repository the Git object belongs to"""
  repository: Repository!

  """UTF8 text data or null if the Blob is binary"""
  text: String
}

"""A special type of user which takes actions on behalf of GitHub Apps."""
type Bot implements Node & Actor & UniformResourceLocatable {
  """A URL pointing to the GitHub App's public avatar."""
  avatarUrl(
    """The size of the resulting square image."""
    size: Int
  ): URI!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Identifies the primary key from the database."""
  databaseId: Int @deprecated(reason: "Exposed database IDs will eventually be removed in favor of global Relay IDs. Use 'Node.id' instead. Removal on 2018-07-01 UTC.")
  id: ID!

  """The username of the actor."""
  login: String!

  """The HTTP path for this bot"""
  resourcePath: URI!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime! @deprecated(reason: "General type updated timestamps will eventually be replaced by other field specific timestamps. Removal on 2018-07-01 UTC.")

  """The HTTP URL for this bot"""
  url: URI!
}

"""An object that can be closed"""
interface Closable {
  """
  'true' if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!

  """Identifies the date and time when the object was closed."""
  closedAt: DateTime
}

"""Represents a 'closed' event on any 'Closable'."""
type ClosedEvent implements Node {
  """Identifies the actor who performed the event."""
  actor: Actor

  """Object that was closed."""
  closable: Closable!

  """Object which triggered the creation of this event."""
  closer: Closer

  """Identifies the commit associated with the 'closed' event."""
  commit: Commit @deprecated(reason: "'ClosedEvent' may be associated with other objects than a commit. Use ClosedEvent.closer instead. Removal on 2018-07-01 UTC.")

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
}

"""The object which triggered a 'ClosedEvent'."""
union Closer = Commit | PullRequest

"""The Code of Conduct for a repository"""
type CodeOfConduct {
  """The body of the CoC"""
  body: String

  """The key for the CoC"""
  key: String!

  """The formal name of the CoC"""
  name: String!

  """The path to the CoC"""
  url: URI
}

"""Collaborators affiliation level with a subject."""
enum CollaboratorAffiliation {
  """All outside collaborators of an organization-owned subject."""
  OUTSIDE

  """
  All collaborators with permissions to an organization-owned subject, regardless of organization membership status.
  """
  DIRECT

  """All collaborators the authenticated user can see."""
  ALL
}

"""Types that can be inside Collection Items."""
union CollectionItemContent = Repository | Organization | User

"""Represents a comment."""
interface Comment {
  """The actor who authored the comment."""
  author: Actor

  """Author's association with the subject of the comment."""
  authorAssociation: CommentAuthorAssociation!

  """The body as Markdown."""
  body: String!

  """The body rendered to HTML."""
  bodyHTML: HTML!

  """The body rendered to text."""
  bodyText: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Check if this comment was created via an email reply."""
  createdViaEmail: Boolean!

  """The actor who edited the comment."""
  editor: Actor
  id: ID!

  """The moment the editor made the last edit"""
  lastEditedAt: DateTime

  """Identifies when the comment was published at."""
  publishedAt: DateTime

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime! @deprecated(reason: "General type updated timestamps will eventually be replaced by other field specific timestamps. Removal on 2018-07-01 UTC.")

  """A list of edits to this content."""
  userContentEdits(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): UserContentEditConnection

  """Did the viewer author this comment."""
  viewerDidAuthor: Boolean!
}

"""A comment author association with repository."""
enum CommentAuthorAssociation {
  """Author is a member of the organization that owns the repository."""
  MEMBER

  """Author is the owner of the repository."""
  OWNER

  """Author has been invited to collaborate on the repository."""
  COLLABORATOR

  """Author has previously committed to the repository."""
  CONTRIBUTOR

  """Author has not previously committed to the repository."""
  FIRST_TIME_CONTRIBUTOR

  """Author has not previously committed to GitHub."""
  FIRST_TIMER

  """Author has no association with the repository."""
  NONE
}

"""The possible errors that will prevent a user from updating a comment."""
enum CommentCannotUpdateReason {
  """
  You must be the author or have write access to this repository to update this comment.
  """
  INSUFFICIENT_ACCESS

  """Unable to create comment because issue is locked."""
  LOCKED

  """You must be logged in to update this comment."""
  LOGIN_REQUIRED

  """Repository is under maintenance."""
  MAINTENANCE

  """At least one email address must be verified to update this comment."""
  VERIFIED_EMAIL_REQUIRED
}

"""
Represents a 'comment_deleted' event on a given issue or pull request.
"""
type CommentDeletedEvent implements Node {
  """Identifies the actor who performed the event."""
  actor: Actor

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Identifies the primary key from the database."""
  databaseId: Int @deprecated(reason: "Exposed database IDs will eventually be removed in favor of global Relay IDs. Use 'Node.id' instead. Removal on 2018-07-01 UTC.")
  id: ID!
}

"""Represents a Git commit."""
type Commit implements Node & GitObject & Subscribable {
  """An abbreviated version of the Git object ID"""
  abbreviatedOid: String!

  """The number of additions in this commit."""
  additions: Int!

  """Authorship details of the commit."""
  author: GitActor

  """Check if the committer and the author match."""
  authoredByCommitter: Boolean!

  """The datetime when this commit was authored."""
  authoredDate: DateTime!

  """Fetches 'git blame' information."""
  blame(
    """The file whose Git blame information you want."""
    path: String!
  ): Blame!

  """The number of changed files in this commit."""
  changedFiles: Int!

  """Comments made on the commit."""
  comments(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): CommitCommentConnection!

  """The HTTP path for this Git object"""
  commitResourcePath: URI!

  """The HTTP URL for this Git object"""
  commitUrl: URI!

  """The datetime when this commit was committed."""
  committedDate: DateTime!

  """Check if commited via GitHub web UI."""
  committedViaWeb: Boolean!

  """Committership details of the commit."""
  committer: GitActor

  """The number of deletions in this commit."""
  deletions: Int!

  """
  The linear commit history starting from (and including) this commit, in the same order as 'git log'.
  """
  history(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """
    If non-null, filters history to only show commits touching files under this path.
    """
    path: String

    """
    If non-null, filters history to only show commits with matching authorship.
    """
    author: CommitAuthor

    """Allows specifying a beginning time or date for fetching commits."""
    since: GitTimestamp

    """Allows specifying an ending time or date for fetching commits."""
    until: GitTimestamp
  ): CommitHistoryConnection!
  id: ID!

  """The Git commit message"""
  message: String!

  """The Git commit message body"""
  messageBody: String!

  """The commit message body rendered to HTML."""
  messageBodyHTML: HTML!

  """The Git commit message headline"""
  messageHeadline: String!

  """The commit message headline rendered to HTML."""
  messageHeadlineHTML: HTML!

  """The Git object ID"""
  oid: GitObjectID!

  """The parents of a commit."""
  parents(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): CommitConnection!

  """The datetime when this commit was pushed."""
  pushedDate: DateTime

  """The Repository this commit belongs to"""
  repository: Repository!

  """The HTTP path for this commit"""
  resourcePath: URI!

  """Commit signing information, if present."""
  signature: GitSignature

  """Status information for this commit"""
  status: Status

  """
  Returns a URL to download a tarball archive for a repository.
  Note: For private repositories, these links are temporary and expire after five minutes.
  """
  tarballUrl: URI!

  """Commit's root Tree"""
  tree: Tree!

  """The HTTP path for the tree of this commit"""
  treeResourcePath: URI!

  """The HTTP URL for the tree of this commit"""
  treeUrl: URI!

  """The HTTP URL for this commit"""
  url: URI!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: SubscriptionState!

  """
  Returns a URL to download a zipball archive for a repository.
  Note: For private repositories, these links are temporary and expire after five minutes.
  """
  zipballUrl: URI!
}

"""Specifies an author for filtering Git commits."""
input CommitAuthor {
  """
  ID of a User to filter by. If non-null, only commits authored by this user
  will be returned. This field takes precedence over emails.
  """
  id: ID

  """
  Email addresses to filter by. Commits authored by any of the specified email addresses will be returned.
  """
  emails: [String!]
}

"""Represents a comment on a given Commit."""
type CommitComment implements Node & Comment & Deletable & Updatable & UpdatableComment & Reactable & RepositoryNode {
  """The actor who authored the comment."""
  author: Actor

  """Author's association with the subject of the comment."""
  authorAssociation: CommentAuthorAssociation!

  """Identifies the comment body."""
  body: String!

  """Identifies the comment body rendered to HTML."""
  bodyHTML: HTML!

  """The body rendered to text."""
  bodyText: String!

  """
  Identifies the commit associated with the comment, if the commit exists.
  """
  commit: Commit

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Check if this comment was created via an email reply."""
  createdViaEmail: Boolean!

  """Identifies the primary key from the database."""
  databaseId: Int @deprecated(reason: "Exposed database IDs will eventually be removed in favor of global Relay IDs. Use 'Node.id' instead. Removal on 2018-07-01 UTC.")

  """The actor who edited the comment."""
  editor: Actor
  id: ID!

  """The moment the editor made the last edit"""
  lastEditedAt: DateTime

  """Identifies the file path associated with the comment."""
  path: String

  """Identifies the line position associated with the comment."""
  position: Int

  """Identifies when the comment was published at."""
  publishedAt: DateTime

  """A list of reactions grouped by content left on the subject."""
  reactionGroups: [ReactionGroup!]

  """A list of Reactions left on the Issue."""
  reactions(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """Allows filtering Reactions by emoji."""
    content: ReactionContent

    """Allows specifying the order in which reactions are returned."""
    orderBy: ReactionOrder
  ): ReactionConnection!

  """The repository associated with this node."""
  repository: Repository!

  """The HTTP path permalink for this commit comment."""
  resourcePath: URI!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime! @deprecated(reason: "General type updated timestamps will eventually be replaced by other field specific timestamps. Removal on 2018-07-01 UTC.")

  """The HTTP URL permalink for this commit comment."""
  url: URI!

  """A list of edits to this content."""
  userContentEdits(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): UserContentEditConnection

  """Check if the current viewer can delete this object."""
  viewerCanDelete: Boolean!

  """Can user react to this subject"""
  viewerCanReact: Boolean!

  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!

  """Reasons why the current viewer can not update this comment."""
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

  """Did the viewer author this comment."""
  viewerDidAuthor: Boolean!
}

"""The connection type for CommitComment."""
type CommitCommentConnection {
  """A list of edges."""
  edges: [CommitCommentEdge]

  """A list of nodes."""
  nodes: [CommitComment]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type CommitCommentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: CommitComment
}

"""A thread of comments on a commit."""
type CommitCommentThread implements Node & RepositoryNode {
  """The comments that exist in this thread."""
  comments(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): CommitCommentConnection!

  """The commit the comments were made on."""
  commit: Commit!
  id: ID!

  """The file the comments were made on."""
  path: String

  """The position in the diff for the commit that the comment was made on."""
  position: Int

  """The repository associated with this node."""
  repository: Repository!
}

"""The connection type for Commit."""
type CommitConnection {
  """A list of edges."""
  edges: [CommitEdge]

  """A list of nodes."""
  nodes: [Commit]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type CommitEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Commit
}

"""The connection type for Commit."""
type CommitHistoryConnection {
  edges: [CommitEdge]

  """A list of nodes."""
  nodes: [Commit]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""
Represents a 'converted_note_to_issue' event on a given issue or pull request.
"""
type ConvertedNoteToIssueEvent implements Node {
  """Identifies the actor who performed the event."""
  actor: Actor

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Identifies the primary key from the database."""
  databaseId: Int @deprecated(reason: "Exposed database IDs will eventually be removed in favor of global Relay IDs. Use 'Node.id' instead. Removal on 2018-07-01 UTC.")
  id: ID!
}

"""Autogenerated input type of CreateProject"""
input CreateProjectInput {
  """The owner ID to create the project under."""
  ownerId: ID!

  """The name of project."""
  name: String!

  """The description of project."""
  body: String

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateProject"""
type CreateProjectPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The new project."""
  project: Project!
}

"""Represents a mention made by one issue or pull request to another."""
type CrossReferencedEvent implements Node & UniformResourceLocatable {
  """Identifies the actor who performed the event."""
  actor: Actor

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!

  """Reference originated in a different repository."""
  isCrossRepository: Boolean!

  """Identifies when the reference was made."""
  referencedAt: DateTime!

  """The HTTP path for this pull request."""
  resourcePath: URI!

  """Issue or pull request that made the reference."""
  source: ReferencedSubject!

  """Issue or pull request to which the reference was made."""
  target: ReferencedSubject!

  """The HTTP URL for this pull request."""
  url: URI!

  """Checks if the target will be closed when the source is merged."""
  willCloseTarget: Boolean!
}

"""An ISO-8601 encoded date string."""
scalar Date

"""An ISO-8601 encoded UTC date string."""
scalar DateTime

"""Autogenerated input type of DeclineTopicSuggestion"""
input DeclineTopicSuggestionInput {
  """The Node ID of the repository."""
  repositoryId: ID!

  """The name of the suggested topic."""
  name: String!

  """The reason why the suggested topic is declined."""
  reason: TopicSuggestionDeclineReason!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeclineTopicSuggestion"""
type DeclineTopicSuggestionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The declined topic."""
  topic: Topic!
}

"""The possible default permissions for repositories."""
enum DefaultRepositoryPermissionField {
  """No access"""
  NONE

  """Can read repos by default"""
  READ

  """Can read and write repos by default"""
  WRITE

  """Can read, write, and administrate repos by default"""
  ADMIN
}

"""Entities that can be deleted."""
interface Deletable {
  """Check if the current viewer can delete this object."""
  viewerCanDelete: Boolean!
}

"""Autogenerated input type of DeleteProjectCard"""
input DeleteProjectCardInput {
  """The id of the card to delete."""
  cardId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteProjectCard"""
type DeleteProjectCardPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The column the deleted card was in."""
  column: ProjectColumn!

  """The deleted card ID."""
  deletedCardId: ID!
}

"""Autogenerated input type of DeleteProjectColumn"""
input DeleteProjectColumnInput {
  """The id of the column to delete."""
  columnId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteProjectColumn"""
type DeleteProjectColumnPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The deleted column ID."""
  deletedColumnId: ID!

  """The project the deleted column was in."""
  project: Project!
}

"""Autogenerated input type of DeleteProject"""
input DeleteProjectInput {
  """The Project ID to update."""
  projectId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteProject"""
type DeleteProjectPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The repository or organization the project was removed from."""
  owner: ProjectOwner!
}

"""Autogenerated input type of DeletePullRequestReview"""
input DeletePullRequestReviewInput {
  """The Node ID of the pull request review to delete."""
  pullRequestReviewId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeletePullRequestReview"""
type DeletePullRequestReviewPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The deleted pull request review."""
  pullRequestReview: PullRequestReview!
}

"""Represents a 'demilestoned' event on a given issue or pull request."""
type DemilestonedEvent implements Node {
  """Identifies the actor who performed the event."""
  actor: Actor

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!

  """
  Identifies the milestone title associated with the 'demilestoned' event.
  """
  milestoneTitle: String!

  """Object referenced by event."""
  subject: MilestoneItem!
}

"""Represents a 'deployed' event on a given pull request."""
type DeployedEvent implements Node {
  """Identifies the actor who performed the event."""
  actor: Actor

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Identifies the primary key from the database."""
  databaseId: Int @deprecated(reason: "Exposed database IDs will eventually be removed in favor of global Relay IDs. Use 'Node.id' instead. Removal on 2018-07-01 UTC.")

  """The deployment associated with the 'deployed' event."""
  deployment: Deployment!
  id: ID!

  """PullRequest referenced by event."""
  pullRequest: PullRequest!

  """The ref associated with the 'deployed' event."""
  ref: Ref
}

"""A repository deploy key."""
type DeployKey implements Node {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!

  """The deploy key."""
  key: String!

  """Whether or not the deploy key is read only."""
  readOnly: Boolean!

  """The deploy key title."""
  title: String!

  """Whether or not the deploy key has been verified."""
  verified: Boolean!
}

"""The connection type for DeployKey."""
type DeployKeyConnection {
  """A list of edges."""
  edges: [DeployKeyEdge]

  """A list of nodes."""
  nodes: [DeployKey]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type DeployKeyEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: DeployKey
}

"""Represents triggered deployment instance."""
type Deployment implements Node {
  """Identifies the commit sha of the deployment."""
  commit: Commit

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Identifies the actor who triggered the deployment."""
  creator: Actor

  """Identifies the primary key from the database."""
  databaseId: Int @deprecated(reason: "Exposed database IDs will eventually be removed in favor of global Relay IDs. Use 'Node.id' instead. Removal on 2018-07-01 UTC.")

  """The environment to which this deployment was made."""
  environment: String
  id: ID!

  """The latest status of this deployment."""
  latestStatus: DeploymentStatus

  """Extra information that a deployment system might need."""
  payload: String

  """Identifies the repository associated with the deployment."""
  repository: Repository!

  """The current state of the deployment."""
  state: DeploymentState

  """A list of statuses associated with the deployment."""
  statuses(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): DeploymentStatusConnection
}

"""The connection type for Deployment."""
type DeploymentConnection {
  """A list of edges."""
  edges: [DeploymentEdge]

  """A list of nodes."""
  nodes: [Deployment]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type DeploymentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Deployment
}

"""The possible states in which a deployment can be."""
enum DeploymentState {
  """The pending deployment was not updated after 30 minutes."""
  ABANDONED

  """The deployment is currently active."""
  ACTIVE

  """An inactive transient deployment."""
  DESTROYED

  """The deployment experienced an error."""
  ERROR

  """The deployment has failed."""
  FAILURE

  """The deployment is inactive."""
  INACTIVE

  """The deployment is pending."""
  PENDING
}

"""Describes the status of a given deployment attempt."""
type DeploymentStatus implements Node {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Identifies the actor who triggered the deployment."""
  creator: Actor

  """Identifies the deployment associated with status."""
  deployment: Deployment!

  """Identifies the description of the deployment."""
  description: String

  """Identifies the environment URL of the deployment."""
  environmentUrl: URI
  id: ID!

  """Identifies the log URL of the deployment."""
  logUrl: URI

  """Identifies the current state of the deployment."""
  state: DeploymentStatusState!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime! @deprecated(reason: "General type updated timestamps will eventually be replaced by other field specific timestamps. Removal on 2018-07-01 UTC.")
}

"""The connection type for DeploymentStatus."""
type DeploymentStatusConnection {
  """A list of edges."""
  edges: [DeploymentStatusEdge]

  """A list of nodes."""
  nodes: [DeploymentStatus]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type DeploymentStatusEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: DeploymentStatus
}

"""The possible states for a deployment status."""
enum DeploymentStatusState {
  """The deployment is pending."""
  PENDING

  """The deployment was successful."""
  SUCCESS

  """The deployment has failed."""
  FAILURE

  """The deployment is inactive."""
  INACTIVE

  """The deployment experienced an error."""
  ERROR
}

"""Autogenerated input type of DismissPullRequestReview"""
input DismissPullRequestReviewInput {
  """The Node ID of the pull request review to modify."""
  pullRequestReviewId: ID!

  """The contents of the pull request review dismissal message."""
  message: String!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DismissPullRequestReview"""
type DismissPullRequestReviewPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The dismissed pull request review."""
  pullRequestReview: PullRequestReview!
}

"""Specifies a review comment to be left with a Pull Request Review."""
input DraftPullRequestReviewComment {
  """Path to the file being commented on."""
  path: String!

  """Position in the file to leave a comment on."""
  position: Int!

  """Body of the comment to leave."""
  body: String!
}

"""An external identity provisioned by SAML SSO or SCIM."""
type ExternalIdentity implements Node {
  """The GUID for this identity"""
  guid: String!
  id: ID!

  """Organization invitation for this SCIM-provisioned external identity"""
  organizationInvitation: OrganizationInvitation

  """SAML Identity attributes"""
  samlIdentity: ExternalIdentitySamlAttributes

  """SCIM Identity attributes"""
  scimIdentity: ExternalIdentityScimAttributes

  """User linked to this external identity"""
  user: User
}

"""The connection type for ExternalIdentity."""
type ExternalIdentityConnection {
  """A list of edges."""
  edges: [ExternalIdentityEdge]

  """A list of nodes."""
  nodes: [ExternalIdentity]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type ExternalIdentityEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ExternalIdentity
}

"""SAML attributes for the External Identity"""
type ExternalIdentitySamlAttributes {
  """The NameID of the SAML identity"""
  nameId: String
}

"""SCIM attributes for the External Identity"""
type ExternalIdentityScimAttributes {
  """The userName of the SCIM identity"""
  username: String
}

"""The connection type for User."""
type FollowerConnection {
  """A list of edges."""
  edges: [UserEdge]

  """A list of nodes."""
  nodes: [User]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""The connection type for User."""
type FollowingConnection {
  """A list of edges."""
  edges: [UserEdge]

  """A list of nodes."""
  nodes: [User]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""A Gist."""
type Gist implements Node & Starrable {
  """A list of comments associated with the gist"""
  comments(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): GistCommentConnection!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """The gist description."""
  description: String
  id: ID!

  """Whether the gist is public or not."""
  isPublic: Boolean!

  """The gist name."""
  name: String!

  """The gist owner."""
  owner: RepositoryOwner

  """Identifies when the gist was last pushed to."""
  pushedAt: DateTime

  """A list of users who have starred this starrable."""
  stargazers(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """Order for connection"""
    orderBy: StarOrder
  ): StargazerConnection!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime! @deprecated(reason: "General type updated timestamps will eventually be replaced by other field specific timestamps. Removal on 2018-07-01 UTC.")

  """
  Returns a boolean indicating whether the viewing user has starred this starrable.
  """
  viewerHasStarred: Boolean!
}

"""Represents a comment on an Gist."""
type GistComment implements Node & Comment & Deletable & Updatable & UpdatableComment {
  """The actor who authored the comment."""
  author: Actor

  """Author's association with the gist."""
  authorAssociation: CommentAuthorAssociation!

  """Identifies the comment body."""
  body: String!

  """The comment body rendered to HTML."""
  bodyHTML: HTML!

  """The body rendered to text."""
  bodyText: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Check if this comment was created via an email reply."""
  createdViaEmail: Boolean!

  """Identifies the primary key from the database."""
  databaseId: Int @deprecated(reason: "Exposed database IDs will eventually be removed in favor of global Relay IDs. Use 'Node.id' instead. Removal on 2018-07-01 UTC.")

  """The actor who edited the comment."""
  editor: Actor

  """The associated gist."""
  gist: Gist!
  id: ID!

  """The moment the editor made the last edit"""
  lastEditedAt: DateTime

  """Identifies when the comment was published at."""
  publishedAt: DateTime

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime! @deprecated(reason: "General type updated timestamps will eventually be replaced by other field specific timestamps. Removal on 2018-07-01 UTC.")

  """A list of edits to this content."""
  userContentEdits(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): UserContentEditConnection

  """Check if the current viewer can delete this object."""
  viewerCanDelete: Boolean!

  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!

  """Reasons why the current viewer can not update this comment."""
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

  """Did the viewer author this comment."""
  viewerDidAuthor: Boolean!
}

"""The connection type for GistComment."""
type GistCommentConnection {
  """A list of edges."""
  edges: [GistCommentEdge]

  """A list of nodes."""
  nodes: [GistComment]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type GistCommentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GistComment
}

"""The connection type for Gist."""
type GistConnection {
  """A list of edges."""
  edges: [GistEdge]

  """A list of nodes."""
  nodes: [Gist]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type GistEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Gist
}

"""Ordering options for gist connections"""
input GistOrder {
  """The field to order repositories by."""
  field: GistOrderField!

  """The ordering direction."""
  direction: OrderDirection!
}

"""Properties by which gist connections can be ordered."""
enum GistOrderField {
  """Order gists by creation time"""
  CREATED_AT

  """Order gists by update time"""
  UPDATED_AT

  """Order gists by push time"""
  PUSHED_AT
}

"""The privacy of a Gist"""
enum GistPrivacy {
  """Public"""
  PUBLIC

  """Secret"""
  SECRET

  """Gists that are public and secret"""
  ALL
}

"""Represents an actor in a Git commit (ie. an author or committer)."""
type GitActor {
  """A URL pointing to the author's public avatar."""
  avatarUrl(
    """The size of the resulting square image."""
    size: Int
  ): URI!

  """The timestamp of the Git action (authoring or committing)."""
  date: GitTimestamp

  """The email in the Git commit."""
  email: String

  """The name in the Git commit."""
  name: String

  """
  The GitHub user corresponding to the email field. Null if no such user exists.
  """
  user: User
}

"""Represents information about the GitHub instance."""
type GitHubMetadata {
  """Returns a String that's a SHA of 'github-services'"""
  gitHubServicesSha: String!

  """IP addresses that users connect to for git operations"""
  gitIpAddresses: [String!]

  """IP addresses that service hooks are sent from"""
  hookIpAddresses: [String!]

  """IP addresses that the importer connects from"""
  importerIpAddresses: [String!]

  """Whether or not users are verified"""
  isPasswordAuthenticationVerifiable: Boolean!

  """IP addresses for GitHub Pages' A records"""
  pagesIpAddresses: [String!]
}

"""Represents a Git object."""
interface GitObject {
  """An abbreviated version of the Git object ID"""
  abbreviatedOid: String!

  """The HTTP path for this Git object"""
  commitResourcePath: URI!

  """The HTTP URL for this Git object"""
  commitUrl: URI!
  id: ID!

  """The Git object ID"""
  oid: GitObjectID!

  """The Repository the Git object belongs to"""
  repository: Repository!
}

"""A Git object ID."""
scalar GitObjectID

"""Information about a signature (GPG or S/MIME) on a Commit or Tag."""
interface GitSignature {
  """Email used to sign this object."""
  email: String!

  """True if the signature is valid and verified by GitHub."""
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """ASCII-armored signature header from object."""
  signature: String!

  """GitHub user corresponding to the email signing this commit."""
  signer: User

  """
  The state of this signature. 'VALID' if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!
}

"""The state of a Git signature."""
enum GitSignatureState {
  """Valid signature and verified by GitHub."""
  VALID

  """Invalid signature."""
  INVALID

  """Malformed signature."""
  MALFORMED_SIG

  """Key used for signing not known to GitHub."""
  UNKNOWN_KEY

  """Invalid email used for signing."""
  BAD_EMAIL

  """Email used for signing unverified on GitHub."""
  UNVERIFIED_EMAIL

  """Email used for signing not known to GitHub."""
  NO_USER

  """Unknown signature type."""
  UNKNOWN_SIG_TYPE

  """Unsigned."""
  UNSIGNED

  """
  Internal error - the GPG verification service is unavailable at the moment.
  """
  GPGVERIFY_UNAVAILABLE

  """Internal error - the GPG verification service misbehaved."""
  GPGVERIFY_ERROR

  """The usage flags for the key that signed this don't allow signing."""
  NOT_SIGNING_KEY

  """Signing key expired."""
  EXPIRED_KEY

  """Valid signature, pending certificate revocation checking"""
  OCSP_PENDING

  """Valid siganture, though certificate revocation check failed"""
  OCSP_ERROR

  """One or more certificates in chain has been revoked"""
  OCSP_REVOKED
}

"""Git SSH string"""
scalar GitSSHRemote

"""
An ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC.
"""
scalar GitTimestamp

"""Represents a GPG signature on a Commit or Tag."""
type GpgSignature implements GitSignature {
  """Email used to sign this object."""
  email: String!

  """True if the signature is valid and verified by GitHub."""
  isValid: Boolean!

  """Hex-encoded ID of the key that signed this object."""
  keyId: String

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """ASCII-armored signature header from object."""
  signature: String!

  """GitHub user corresponding to the email signing this commit."""
  signer: User

  """
  The state of this signature. 'VALID' if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!
}

"""Represents a 'head_ref_deleted' event on a given pull request."""
type HeadRefDeletedEvent implements Node {
  """Identifies the actor who performed the event."""
  actor: Actor

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Identifies the Ref associated with the 'head_ref_deleted' event."""
  headRef: Ref

  """
  Identifies the name of the Ref associated with the 'head_ref_deleted' event.
  """
  headRefName: String!
  id: ID!

  """PullRequest referenced by event."""
  pullRequest: PullRequest!
}

"""Represents a 'head_ref_force_pushed' event on a given pull request."""
type HeadRefForcePushedEvent implements Node {
  """Identifies the actor who performed the event."""
  actor: Actor

  """
  Identifies the after commit SHA for the 'head_ref_force_pushed' event.
  """
  afterCommit: Commit

  """
  Identifies the before commit SHA for the 'head_ref_force_pushed' event.
  """
  beforeCommit: Commit

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!

  """PullRequest referenced by event."""
  pullRequest: PullRequest!

  """
  Identifies the fully qualified ref name for the 'head_ref_force_pushed' event.
  """
  ref: Ref
}

"""Represents a 'head_ref_restored' event on a given pull request."""
type HeadRefRestoredEvent implements Node {
  """Identifies the actor who performed the event."""
  actor: Actor

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!

  """PullRequest referenced by event."""
  pullRequest: PullRequest!
}

"""A string containing HTML code."""
scalar HTML

"""
An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
"""
type Issue implements Node & Assignable & Closable & Comment & Updatable & UpdatableComment & Labelable & Lockable & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable {
  """Reason that the conversation was locked."""
  activeLockReason: LockReason

  """A list of Users assigned to this object."""
  assignees(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): UserConnection!

  """The actor who authored the comment."""
  author: Actor

  """Author's association with the subject of the comment."""
  authorAssociation: CommentAuthorAssociation!

  """Identifies the body of the issue."""
  body: String!

  """Identifies the body of the issue rendered to HTML."""
  bodyHTML: HTML!

  """Identifies the body of the issue rendered to text."""
  bodyText: String!

  """
  'true' if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!

  """Identifies the date and time when the object was closed."""
  closedAt: DateTime

  """A list of comments associated with the Issue."""
  comments(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): IssueCommentConnection!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Check if this comment was created via an email reply."""
  createdViaEmail: Boolean!

  """Identifies the primary key from the database."""
  databaseId: Int @deprecated(reason: "Exposed database IDs will eventually be removed in favor of global Relay IDs. Use 'Node.id' instead. Removal on 2018-07-01 UTC.")

  """The actor who edited the comment."""
  editor: Actor
  id: ID!

  """A list of labels associated with the object."""
  labels(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): LabelConnection

  """The moment the editor made the last edit"""
  lastEditedAt: DateTime

  """'true' if the object is locked"""
  locked: Boolean!

  """Identifies the milestone associated with the issue."""
  milestone: Milestone

  """Identifies the issue number."""
  number: Int!

  """A list of Users that are participating in the Issue conversation."""
  participants(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): UserConnection!

  """List of project cards associated with this issue."""
  projectCards(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): ProjectCardConnection!

  """Identifies when the comment was published at."""
  publishedAt: DateTime

  """A list of reactions grouped by content left on the subject."""
  reactionGroups: [ReactionGroup!]

  """A list of Reactions left on the Issue."""
  reactions(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """Allows filtering Reactions by emoji."""
    content: ReactionContent

    """Allows specifying the order in which reactions are returned."""
    orderBy: ReactionOrder
  ): ReactionConnection!

  """The repository associated with this node."""
  repository: Repository!

  """The HTTP path for this issue"""
  resourcePath: URI!

  """Identifies the state of the issue."""
  state: IssueState!

  """A list of events, comments, commits, etc. associated with the issue."""
  timeline(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """Allows filtering timeline events by a 'since' timestamp."""
    since: DateTime
  ): IssueTimelineConnection!

  """Identifies the issue title."""
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime! @deprecated(reason: "General type updated timestamps will eventually be replaced by other field specific timestamps. Removal on 2018-07-01 UTC.")

  """The HTTP URL for this issue"""
  url: URI!

  """A list of edits to this content."""
  userContentEdits(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): UserContentEditConnection

  """Can user react to this subject"""
  viewerCanReact: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!

  """Reasons why the current viewer can not update this comment."""
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

  """Did the viewer author this comment."""
  viewerDidAuthor: Boolean!

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: SubscriptionState!
}

"""Represents a comment on an Issue."""
type IssueComment implements Node & Comment & Deletable & Updatable & UpdatableComment & Reactable & RepositoryNode {
  """The actor who authored the comment."""
  author: Actor

  """Author's association with the subject of the comment."""
  authorAssociation: CommentAuthorAssociation!

  """The body as Markdown."""
  body: String!

  """The body rendered to HTML."""
  bodyHTML: HTML!

  """The body rendered to text."""
  bodyText: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Check if this comment was created via an email reply."""
  createdViaEmail: Boolean!

  """Identifies the primary key from the database."""
  databaseId: Int @deprecated(reason: "Exposed database IDs will eventually be removed in favor of global Relay IDs. Use 'Node.id' instead. Removal on 2018-07-01 UTC.")

  """The actor who edited the comment."""
  editor: Actor
  id: ID!

  """Identifies the issue associated with the comment."""
  issue: Issue!

  """The moment the editor made the last edit"""
  lastEditedAt: DateTime

  """Identifies when the comment was published at."""
  publishedAt: DateTime

  """
  Returns the pull request associated with the comment, if this comment was made on a
  pull request.
  """
  pullRequest: PullRequest

  """A list of reactions grouped by content left on the subject."""
  reactionGroups: [ReactionGroup!]

  """A list of Reactions left on the Issue."""
  reactions(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """Allows filtering Reactions by emoji."""
    content: ReactionContent

    """Allows specifying the order in which reactions are returned."""
    orderBy: ReactionOrder
  ): ReactionConnection!

  """The repository associated with this node."""
  repository: Repository!

  """The HTTP path for this issue comment"""
  resourcePath: URI!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime! @deprecated(reason: "General type updated timestamps will eventually be replaced by other field specific timestamps. Removal on 2018-07-01 UTC.")

  """The HTTP URL for this issue comment"""
  url: URI!

  """A list of edits to this content."""
  userContentEdits(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): UserContentEditConnection

  """Check if the current viewer can delete this object."""
  viewerCanDelete: Boolean!

  """Can user react to this subject"""
  viewerCanReact: Boolean!

  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!

  """Reasons why the current viewer can not update this comment."""
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

  """Did the viewer author this comment."""
  viewerDidAuthor: Boolean!
}

"""The connection type for IssueComment."""
type IssueCommentConnection {
  """A list of edges."""
  edges: [IssueCommentEdge]

  """A list of nodes."""
  nodes: [IssueComment]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type IssueCommentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: IssueComment
}

"""The connection type for Issue."""
type IssueConnection {
  """A list of edges."""
  edges: [IssueEdge]

  """A list of nodes."""
  nodes: [Issue]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type IssueEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Issue
}

"""Ways in which lists of issues can be ordered upon return."""
input IssueOrder {
  """The field in which to order issues by."""
  field: IssueOrderField!

  """The direction in which to order issues by the specified field."""
  direction: OrderDirection!
}

"""Properties by which issue connections can be ordered."""
enum IssueOrderField {
  """Order issues by creation time"""
  CREATED_AT

  """Order issues by update time"""
  UPDATED_AT

  """Order issues by comment count"""
  COMMENTS
}

"""Used for return value of Repository.issueOrPullRequest."""
union IssueOrPullRequest = Issue | PullRequest

"""The possible PubSub channels for an issue."""
enum IssuePubSubTopic {
  """The channel ID for observing issue updates."""
  UPDATED

  """The channel ID for marking an issue as read."""
  MARKASREAD
}

"""The possible states of an issue."""
enum IssueState {
  """An issue that is still open"""
  OPEN

  """An issue that has been closed"""
  CLOSED
}

"""The connection type for IssueTimelineItem."""
type IssueTimelineConnection {
  """A list of edges."""
  edges: [IssueTimelineItemEdge]

  """A list of nodes."""
  nodes: [IssueTimelineItem]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An item in an issue timeline"""
union IssueTimelineItem = Commit | IssueComment | CrossReferencedEvent | ClosedEvent | ReopenedEvent | SubscribedEvent | UnsubscribedEvent | ReferencedEvent | AssignedEvent | UnassignedEvent | LabeledEvent | UnlabeledEvent | MilestonedEvent | DemilestonedEvent | RenamedTitleEvent | LockedEvent | UnlockedEvent

"""An edge in a connection."""
type IssueTimelineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: IssueTimelineItem
}

"""
A label for categorizing Issues or Milestones with a given Repository.
"""
type Label implements Node {
  """Identifies the label color."""
  color: String!

  """A brief description of this label."""
  description: String
  id: ID!

  """Indicates whether or not this is a default label."""
  isDefault: Boolean!

  """A list of issues associated with this label."""
  issues(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """A list of label names to filter the pull requests by."""
    labels: [String!]

    """Ordering options for issues returned from the connection."""
    orderBy: IssueOrder

    """A list of states to filter the issues by."""
    states: [IssueState!]
  ): IssueConnection!

  """Identifies the label name."""
  name: String!

  """A list of pull requests associated with this label."""
  pullRequests(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """A list of states to filter the pull requests by."""
    states: [PullRequestState!]

    """A list of label names to filter the pull requests by."""
    labels: [String!]

    """The head ref name to filter the pull requests by."""
    headRefName: String

    """The base ref name to filter the pull requests by."""
    baseRefName: String

    """Ordering options for pull requests returned from the connection."""
    orderBy: IssueOrder
  ): PullRequestConnection!

  """The repository associated with this label."""
  repository: Repository!
}

"""An object that can have labels assigned to it."""
interface Labelable {
  """A list of labels associated with the object."""
  labels(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): LabelConnection
}

"""The connection type for Label."""
type LabelConnection {
  """A list of edges."""
  edges: [LabelEdge]

  """A list of nodes."""
  nodes: [Label]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Represents a 'labeled' event on a given issue or pull request."""
type LabeledEvent implements Node {
  """Identifies the actor who performed the event."""
  actor: Actor

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!

  """Identifies the label associated with the 'labeled' event."""
  label: Label!

  """Identifies the 'Labelable' associated with the event."""
  labelable: Labelable!
}

"""An edge in a connection."""
type LabelEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Label
}

"""Represents a given language found in repositories."""
type Language implements Node {
  """The color defined for the current language."""
  color: String
  id: ID!

  """The name of the current language."""
  name: String!
}

"""A list of languages associated with the parent."""
type LanguageConnection {
  """A list of edges."""
  edges: [LanguageEdge]

  """A list of nodes."""
  nodes: [Language]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """The total size in bytes of files written in that language."""
  totalSize: Int!
}

"""Represents the language of a repository."""
type LanguageEdge {
  cursor: String!
  node: Language!

  """The number of bytes of code written in the language."""
  size: Int!
}

"""Ordering options for language connections."""
input LanguageOrder {
  """The field to order languages by."""
  field: LanguageOrderField!

  """The ordering direction."""
  direction: OrderDirection!
}

"""Properties by which language connections can be ordered."""
enum LanguageOrderField {
  """Order languages by the size of all files containing the language"""
  SIZE
}

"""A respository's open source license"""
type License {
  """The full text of the license"""
  body: String!

  """The conditions set by the license"""
  conditions: [LicenseRule]!

  """A human-readable description of the license"""
  description: String

  """Whether the license should be featured"""
  featured: Boolean!

  """Whether the license should be displayed in license pickers"""
  hidden: Boolean!
  id: ID!

  """Instructions on how to implement the license"""
  implementation: String

  """The lowercased SPDX ID of the license"""
  key: String!

  """The limitations set by the license"""
  limitations: [LicenseRule]!

  """The license full name specified by <https://spdx.org/licenses>"""
  name: String!

  """Customary short name if applicable (e.g, GPLv3)"""
  nickname: String

  """The permissions set by the license"""
  permissions: [LicenseRule]!

  """Short identifier specified by <https://spdx.org/licenses>"""
  spdxId: String

  """URL to the license on <https://choosealicense.com>"""
  url: URI
}

"""Describes a License's conditions, permissions, and limitations"""
type LicenseRule {
  """A description of the rule"""
  description: String!

  """The machine-readable rule key"""
  key: String!

  """The human-readable rule label"""
  label: String!
}

"""An object that can be locked."""
interface Lockable {
  """Reason that the conversation was locked."""
  activeLockReason: LockReason

  """'true' if the object is locked"""
  locked: Boolean!
}

"""Represents a 'locked' event on a given issue or pull request."""
type LockedEvent implements Node {
  """Identifies the actor who performed the event."""
  actor: Actor

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!

  """Object that was locked."""
  lockable: Lockable!
}

"""Autogenerated input type of LockLockable"""
input LockLockableInput {
  """ID of the issue or pull request to be locked."""
  lockableId: ID!

  """A reason for why the issue or pull request will be locked."""
  lockReason: LockReason

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of LockLockable"""
type LockLockablePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The item that was locked."""
  lockedRecord: Lockable
}

"""The possible reasons that an issue or pull request was locked."""
enum LockReason {
  """
  The issue or pull request was locked because the conversation was off-topic.
  """
  OFF_TOPIC

  """
  The issue or pull request was locked because the conversation was too heated.
  """
  TOO_HEATED

  """
  The issue or pull request was locked because the conversation was resolved.
  """
  RESOLVED

  """
  The issue or pull request was locked because the conversation was spam.
  """
  SPAM
}

"""A public description of a Marketplace category."""
type MarketplaceCategory {
  """The category's description."""
  description: String

  """
  The technical description of how apps listed in this category work with GitHub.
  """
  howItWorks: String

  """The category's name."""
  name: String!

  """How many Marketplace listings have this as their primary category."""
  primaryListingCount: Int!

  """The HTTP path for this Marketplace category."""
  resourcePath: URI!

  """How many Marketplace listings have this as their secondary category."""
  secondaryListingCount: Int!

  """The short name of the category used in its URL."""
  slug: String!

  """The HTTP URL for this Marketplace category."""
  url: URI!
}

"""A listing in the GitHub integration marketplace."""
type MarketplaceListing implements Node {
  """URL to the listing owner's company site."""
  companyUrl: URI

  """
  The HTTP path for configuring access to the listing's integration or OAuth app
  """
  configurationResourcePath: URI!

  """
  The HTTP URL for configuring access to the listing's integration or OAuth app
  """
  configurationUrl: URI!

  """URL to the listing's documentation."""
  documentationUrl: URI

  """The listing's detailed description."""
  extendedDescription: String

  """The listing's detailed description rendered to HTML."""
  extendedDescriptionHTML: HTML!

  """The listing's introductory description."""
  fullDescription: String!

  """The listing's introductory description rendered to HTML."""
  fullDescriptionHTML: HTML!

  """
  Whether this listing has been submitted for review from GitHub for approval to be displayed in the Marketplace.
  """
  hasApprovalBeenRequested: Boolean!

  """Does this listing have any plans with a free trial?"""
  hasPublishedFreeTrialPlans: Boolean!

  """Does this listing have a terms of service link?"""
  hasTermsOfService: Boolean!

  """A technical description of how this app works with GitHub."""
  howItWorks: String

  """The listing's technical description rendered to HTML."""
  howItWorksHTML: HTML!
  id: ID!

  """URL to install the product to the viewer's account or organization."""
  installationUrl: URI

  """Whether this listing's app has been installed for the current viewer"""
  installedForViewer: Boolean!

  """
  Whether this listing has been approved for display in the Marketplace.
  """
  isApproved: Boolean!

  """Whether this listing has been removed from the Marketplace."""
  isDelisted: Boolean!

  """
  Whether this listing is still an editable draft that has not been submitted
  for review and is not publicly visible in the Marketplace.
  """
  isDraft: Boolean!

  """
  Whether the product this listing represents is available as part of a paid plan.
  """
  isPaid: Boolean!

  """
  Whether this listing has been rejected by GitHub for display in the Marketplace.
  """
  isRejected: Boolean!

  """The hex color code, without the leading '#', for the logo background."""
  logoBackgroundColor: String!

  """URL for the listing's logo image."""
  logoUrl(
    """The size in pixels of the resulting square image."""
    size: Int = 400
  ): URI

  """The listing's full name."""
  name: String!

  """
  The listing's very short description without a trailing period or ampersands.
  """
  normalizedShortDescription: String!

  """URL to the listing's detailed pricing."""
  pricingUrl: URI

  """The category that best describes the listing."""
  primaryCategory: MarketplaceCategory!

  """URL to the listing's privacy policy."""
  privacyPolicyUrl: URI!

  """The HTTP path for the Marketplace listing."""
  resourcePath: URI!

  """The URLs for the listing's screenshots."""
  screenshotUrls: [String]!

  """An alternate category that describes the listing."""
  secondaryCategory: MarketplaceCategory

  """The listing's very short description."""
  shortDescription: String!

  """The short name of the listing used in its URL."""
  slug: String!

  """URL to the listing's status page."""
  statusUrl: URI

  """An email address for support for this listing's app."""
  supportEmail: String

  """Either a URL or an email address for support for this listing's app."""
  supportUrl: URI!

  """URL to the listing's terms of service."""
  termsOfServiceUrl: URI

  """The HTTP URL for the Marketplace listing."""
  url: URI!

  """Can the current viewer add plans for this Marketplace listing."""
  viewerCanAddPlans: Boolean!

  """Can the current viewer approve this Marketplace listing."""
  viewerCanApprove: Boolean!

  """Can the current viewer delist this Marketplace listing."""
  viewerCanDelist: Boolean!

  """Can the current viewer edit this Marketplace listing."""
  viewerCanEdit: Boolean!

  """
  Can the current viewer edit the primary and secondary category of this
  Marketplace listing.
  """
  viewerCanEditCategories: Boolean!

  """Can the current viewer edit the plans for this Marketplace listing."""
  viewerCanEditPlans: Boolean!

  """
  Can the current viewer return this Marketplace listing to draft state
  so it becomes editable again.
  """
  viewerCanRedraft: Boolean!

  """
  Can the current viewer reject this Marketplace listing by returning it to
  an editable draft state or rejecting it entirely.
  """
  viewerCanReject: Boolean!

  """
  Can the current viewer request this listing be reviewed for display in
  the Marketplace.
  """
  viewerCanRequestApproval: Boolean!

  """
  Indicates whether the current user has an active subscription to this Marketplace listing.
  """
  viewerHasPurchased: Boolean!

  """
  Indicates if the current user has purchased a subscription to this Marketplace listing
  for all of the organizations the user owns.
  """
  viewerHasPurchasedForAllOrganizations: Boolean!

  """
  Does the current viewer role allow them to administer this Marketplace listing.
  """
  viewerIsListingAdmin: Boolean!
}

"""Look up Marketplace Listings"""
type MarketplaceListingConnection {
  """A list of edges."""
  edges: [MarketplaceListingEdge]

  """A list of nodes."""
  nodes: [MarketplaceListing]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type MarketplaceListingEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: MarketplaceListing
}

"""Represents a 'mentioned' event on a given issue or pull request."""
type MentionedEvent implements Node {
  """Identifies the actor who performed the event."""
  actor: Actor

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Identifies the primary key from the database."""
  databaseId: Int @deprecated(reason: "Exposed database IDs will eventually be removed in favor of global Relay IDs. Use 'Node.id' instead. Removal on 2018-07-01 UTC.")
  id: ID!
}

"""Whether or not a PullRequest can be merged."""
enum MergeableState {
  """The pull request can be merged."""
  MERGEABLE

  """The pull request cannot be merged due to merge conflicts."""
  CONFLICTING

  """The mergeability of the pull request is still being calculated."""
  UNKNOWN
}

"""Represents a 'merged' event on a given pull request."""
type MergedEvent implements Node & UniformResourceLocatable {
  """Identifies the actor who performed the event."""
  actor: Actor

  """Identifies the commit associated with the 'merge' event."""
  commit: Commit

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!

  """Identifies the Ref associated with the 'merge' event."""
  mergeRef: Ref

  """Identifies the name of the Ref associated with the 'merge' event."""
  mergeRefName: String!

  """PullRequest referenced by event."""
  pullRequest: PullRequest!

  """The HTTP path for this merged event."""
  resourcePath: URI!

  """The HTTP URL for this merged event."""
  url: URI!
}

"""Represents a Milestone object on a given repository."""
type Milestone implements Node & Closable & UniformResourceLocatable {
  """
  'true' if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!

  """Identifies the date and time when the object was closed."""
  closedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Identifies the actor who created the milestone."""
  creator: Actor

  """Identifies the description of the milestone."""
  description: String

  """Identifies the due date of the milestone."""
  dueOn: DateTime
  id: ID!

  """A list of issues associated with the milestone."""
  issues(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """A list of label names to filter the pull requests by."""
    labels: [String!]

    """Ordering options for issues returned from the connection."""
    orderBy: IssueOrder

    """A list of states to filter the issues by."""
    states: [IssueState!]
  ): IssueConnection!

  """Identifies the number of the milestone."""
  number: Int!

  """A list of pull requests associated with the milestone."""
  pullRequests(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """A list of states to filter the pull requests by."""
    states: [PullRequestState!]

    """A list of label names to filter the pull requests by."""
    labels: [String!]

    """The head ref name to filter the pull requests by."""
    headRefName: String

    """The base ref name to filter the pull requests by."""
    baseRefName: String

    """Ordering options for pull requests returned from the connection."""
    orderBy: IssueOrder
  ): PullRequestConnection!

  """The repository associated with this milestone."""
  repository: Repository!

  """The HTTP path for this milestone"""
  resourcePath: URI!

  """Identifies the state of the milestone."""
  state: MilestoneState!

  """Identifies the title of the milestone."""
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime! @deprecated(reason: "General type updated timestamps will eventually be replaced by other field specific timestamps. Removal on 2018-07-01 UTC.")

  """The HTTP URL for this milestone"""
  url: URI!
}

"""The connection type for Milestone."""
type MilestoneConnection {
  """A list of edges."""
  edges: [MilestoneEdge]

  """A list of nodes."""
  nodes: [Milestone]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Represents a 'milestoned' event on a given issue or pull request."""
type MilestonedEvent implements Node {
  """Identifies the actor who performed the event."""
  actor: Actor

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!

  """
  Identifies the milestone title associated with the 'milestoned' event.
  """
  milestoneTitle: String!

  """Object referenced by event."""
  subject: MilestoneItem!
}

"""An edge in a connection."""
type MilestoneEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Milestone
}

"""Types that can be inside a Milestone."""
union MilestoneItem = Issue | PullRequest

"""Ordering options for milestone connections."""
input MilestoneOrder {
  """The field to order milestones by."""
  field: MilestoneOrderField!

  """The ordering direction."""
  direction: OrderDirection!
}

"""Properties by which milestone connections can be ordered."""
enum MilestoneOrderField {
  """Order milestones by when they are due."""
  DUE_DATE

  """Order milestones by when they were created."""
  CREATED_AT

  """Order milestones by when they were last updated."""
  UPDATED_AT

  """Order milestones by their number."""
  NUMBER
}

"""The possible states of a milestone."""
enum MilestoneState {
  """A milestone that is still open."""
  OPEN

  """A milestone that has been closed."""
  CLOSED
}

"""
Represents a 'moved_columns_in_project' event on a given issue or pull request.
"""
type MovedColumnsInProjectEvent implements Node {
  """Identifies the actor who performed the event."""
  actor: Actor

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Identifies the primary key from the database."""
  databaseId: Int @deprecated(reason: "Exposed database IDs will eventually be removed in favor of global Relay IDs. Use 'Node.id' instead. Removal on 2018-07-01 UTC.")
  id: ID!
}

"""Autogenerated input type of MoveProjectCard"""
input MoveProjectCardInput {
  """The id of the card to move."""
  cardId: ID!

  """The id of the column to move it into."""
  columnId: ID!

  """
  Place the new card after the card with this id. Pass null to place it at the top.
  """
  afterCardId: ID

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of MoveProjectCard"""
type MoveProjectCardPayload {
  """The new edge of the moved card."""
  cardEdge: ProjectCardEdge!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of MoveProjectColumn"""
input MoveProjectColumnInput {
  """The id of the column to move."""
  columnId: ID!

  """
  Place the new column after the column with this id. Pass null to place it at the front.
  """
  afterColumnId: ID

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of MoveProjectColumn"""
type MoveProjectColumnPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The new edge of the moved column."""
  columnEdge: ProjectColumnEdge!
}

"""The root query for implementing GraphQL mutations."""
type Mutation {
  """Applies a suggested topic to the repository."""
  acceptTopicSuggestion(input: AcceptTopicSuggestionInput!): AcceptTopicSuggestionPayload

  """Adds a comment to an Issue or Pull Request."""
  addComment(input: AddCommentInput!): AddCommentPayload

  """
  Adds a card to a ProjectColumn. Either 'contentId' or 'note' must be provided but **not** both.
  """
  addProjectCard(input: AddProjectCardInput!): AddProjectCardPayload

  """Adds a column to a Project."""
  addProjectColumn(input: AddProjectColumnInput!): AddProjectColumnPayload

  """Adds a review to a Pull Request."""
  addPullRequestReview(input: AddPullRequestReviewInput!): AddPullRequestReviewPayload

  """Adds a comment to a review."""
  addPullRequestReviewComment(input: AddPullRequestReviewCommentInput!): AddPullRequestReviewCommentPayload

  """Adds a reaction to a subject."""
  addReaction(input: AddReactionInput!): AddReactionPayload

  """Adds a star to a Starrable."""
  addStar(input: AddStarInput!): AddStarPayload

  """Creates a new project."""
  createProject(input: CreateProjectInput!): CreateProjectPayload

  """Rejects a suggested topic for the repository."""
  declineTopicSuggestion(input: DeclineTopicSuggestionInput!): DeclineTopicSuggestionPayload

  """Deletes a project."""
  deleteProject(input: DeleteProjectInput!): DeleteProjectPayload

  """Deletes a project card."""
  deleteProjectCard(input: DeleteProjectCardInput!): DeleteProjectCardPayload

  """Deletes a project column."""
  deleteProjectColumn(input: DeleteProjectColumnInput!): DeleteProjectColumnPayload

  """Deletes a pull request review."""
  deletePullRequestReview(input: DeletePullRequestReviewInput!): DeletePullRequestReviewPayload

  """Dismisses an approved or rejected pull request review."""
  dismissPullRequestReview(input: DismissPullRequestReviewInput!): DismissPullRequestReviewPayload

  """Lock a lockable object"""
  lockLockable(input: LockLockableInput!): LockLockablePayload

  """Moves a project card to another place."""
  moveProjectCard(input: MoveProjectCardInput!): MoveProjectCardPayload

  """Moves a project column to another place."""
  moveProjectColumn(input: MoveProjectColumnInput!): MoveProjectColumnPayload

  """
  Removes outside collaborator from all repositories in an organization.
  """
  removeOutsideCollaborator(input: RemoveOutsideCollaboratorInput!): RemoveOutsideCollaboratorPayload

  """Removes a reaction from a subject."""
  removeReaction(input: RemoveReactionInput!): RemoveReactionPayload

  """Removes a star from a Starrable."""
  removeStar(input: RemoveStarInput!): RemoveStarPayload

  """Set review requests on a pull request."""
  requestReviews(input: RequestReviewsInput!): RequestReviewsPayload

  """Submits a pending pull request review."""
  submitPullRequestReview(input: SubmitPullRequestReviewInput!): SubmitPullRequestReviewPayload

  """Updates an existing project."""
  updateProject(input: UpdateProjectInput!): UpdateProjectPayload

  """Updates an existing project card."""
  updateProjectCard(input: UpdateProjectCardInput!): UpdateProjectCardPayload

  """Updates an existing project column."""
  updateProjectColumn(input: UpdateProjectColumnInput!): UpdateProjectColumnPayload

  """Updates the body of a pull request review."""
  updatePullRequestReview(input: UpdatePullRequestReviewInput!): UpdatePullRequestReviewPayload

  """Updates a pull request review comment."""
  updatePullRequestReviewComment(input: UpdatePullRequestReviewCommentInput!): UpdatePullRequestReviewCommentPayload

  """Updates viewers repository subscription state."""
  updateSubscription(input: UpdateSubscriptionInput!): UpdateSubscriptionPayload

  """Replaces the repository's topics with the given topics."""
  updateTopics(input: UpdateTopicsInput!): UpdateTopicsPayload
}

"""An object with an ID."""
interface Node {
  """ID of the object."""
  id: ID!
}

"""
Possible directions in which to order a list of items when provided an 'orderBy' argument.
"""
enum OrderDirection {
  """Specifies an ascending order for a given 'orderBy' argument."""
  ASC

  """Specifies a descending order for a given 'orderBy' argument."""
  DESC
}

"""
An account on GitHub, with one or more owners, that has repositories, members and teams.
"""
type Organization implements Node & Actor & ProjectOwner & RepositoryOwner & UniformResourceLocatable {
  """A URL pointing to the organization's public avatar."""
  avatarUrl(
    """The size of the resulting square image."""
    size: Int
  ): URI!

  """Identifies the primary key from the database."""
  databaseId: Int @deprecated(reason: "Exposed database IDs will eventually be removed in favor of global Relay IDs. Use 'Node.id' instead. Removal on 2018-07-01 UTC.")

  """The organization's public profile description."""
  description: String

  """The organization's public email."""
  email: String
  id: ID!

  """The organization's public profile location."""
  location: String

  """The organization's login name."""
  login: String!

  """A list of users who are members of this organization."""
  members(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): UserConnection!

  """The organization's public profile name."""
  name: String

  """The HTTP path creating a new team"""
  newTeamResourcePath: URI!

  """The HTTP URL creating a new team"""
  newTeamUrl: URI!

  """The billing email for the organization."""
  organizationBillingEmail: String

  """A list of repositories this user has pinned to their profile"""
  pinnedRepositories(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """If non-null, filters repositories according to privacy"""
    privacy: RepositoryPrivacy

    """Ordering options for repositories returned from the connection"""
    orderBy: RepositoryOrder

    """Affiliation options for repositories returned from the connection"""
    affiliations: [RepositoryAffiliation]

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean
  ): RepositoryConnection!

  """Find project by number."""
  project(
    """The project number to find."""
    number: Int!
  ): Project

  """A list of projects under the owner."""
  projects(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """Ordering options for projects returned from the connection"""
    orderBy: ProjectOrder

    """Query to search projects by, currently only searching by name."""
    search: String

    """A list of states to filter the projects by."""
    states: [ProjectState!]
  ): ProjectConnection!

  """The HTTP path listing organization's projects"""
  projectsResourcePath: URI!

  """The HTTP URL listing organization's projects"""
  projectsUrl: URI!

  """A list of repositories that the user owns."""
  repositories(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """If non-null, filters repositories according to privacy"""
    privacy: RepositoryPrivacy

    """Ordering options for repositories returned from the connection"""
    orderBy: RepositoryOrder

    """Affiliation options for repositories returned from the connection"""
    affiliations: [RepositoryAffiliation]

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean
  ): RepositoryConnection!

  """Find Repository."""
  repository(
    """Name of Repository to find."""
    name: String!
  ): Repository

  """The HTTP path for this user"""
  resourcePath: URI!

  """The Organization's SAML Identity Providers"""
  samlIdentityProvider: OrganizationIdentityProvider

  """Find an organization's team by its slug."""
  team(
    """The name or slug of the team to find."""
    slug: String!
  ): Team

  """A list of teams in this organization."""
  teams(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """If non-null, filters teams according to privacy"""
    privacy: TeamPrivacy

    """
    If non-null, filters teams according to whether the viewer is an admin or member on team
    """
    role: TeamRole

    """If non-null, filters teams with query on team name and team slug"""
    query: String

    """User logins to filter by"""
    userLogins: [String!]

    """Ordering options for teams returned from the connection"""
    orderBy: TeamOrder

    """
    If true, filters teams that are mapped to an LDAP Group (Enterprise only)
    """
    ldapMapped: Boolean

    """If true, restrict to only root teams"""
    rootTeamsOnly: Boolean = false
  ): TeamConnection!

  """The HTTP path listing organization's teams"""
  teamsResourcePath: URI!

  """The HTTP URL listing organization's teams"""
  teamsUrl: URI!

  """The HTTP URL for this user"""
  url: URI!

  """Organization is adminable by the viewer."""
  viewerCanAdminister: Boolean!

  """Can the current viewer create new projects on this owner."""
  viewerCanCreateProjects: Boolean!

  """Viewer can create repositories on this organization"""
  viewerCanCreateRepositories: Boolean!

  """Viewer can create teams on this organization."""
  viewerCanCreateTeams: Boolean!

  """Viewer is an active member of this organization."""
  viewerIsAMember: Boolean!

  """The organization's public profile URL."""
  websiteUrl: URI
}

"""The connection type for Organization."""
type OrganizationConnection {
  """A list of edges."""
  edges: [OrganizationEdge]

  """A list of nodes."""
  nodes: [Organization]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type OrganizationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Organization
}

"""
An Identity Provider configured to provision SAML and SCIM identities for Organizations
"""
type OrganizationIdentityProvider implements Node {
  """
  The digest algorithm used to sign SAML requests for the Identity Provider.
  """
  digestMethod: URI

  """External Identities provisioned by this Identity Provider"""
  externalIdentities(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): ExternalIdentityConnection!
  id: ID!

  """
  The x509 certificate used by the Identity Provder to sign assertions and responses.
  """
  idpCertificate: X509Certificate

  """The Issuer Entity ID for the SAML Identity Provider"""
  issuer: String

  """Organization this Identity Provider belongs to"""
  organization: Organization

  """
  The signature algorithm used to sign SAML requests for the Identity Provider.
  """
  signatureMethod: URI

  """The URL endpoint for the Identity Provider's SAML SSO."""
  ssoUrl: URI
}

"""An Invitation for a user to an organization."""
type OrganizationInvitation implements Node {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """The email address of the user invited to the organization."""
  email: String
  id: ID!

  """The type of invitation that was sent (e.g. email, user)."""
  invitationType: OrganizationInvitationType!

  """The user who was invited to the organization."""
  invitee: User

  """The user who created the invitation."""
  inviter: User!

  """The organization the invite is for"""
  organization: Organization!

  """The user's pending role in the organization (e.g. member, owner)."""
  role: OrganizationInvitationRole!
}

"""The connection type for OrganizationInvitation."""
type OrganizationInvitationConnection {
  """A list of edges."""
  edges: [OrganizationInvitationEdge]

  """A list of nodes."""
  nodes: [OrganizationInvitation]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type OrganizationInvitationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: OrganizationInvitation
}

"""The possible organization invitation roles."""
enum OrganizationInvitationRole {
  """The user is invited to be a direct member of the organization."""
  DIRECT_MEMBER

  """The user is invited to be an admin of the organization."""
  ADMIN

  """The user is invited to be a billing manager of the organization."""
  BILLING_MANAGER

  """The user's previous role will be reinstated."""
  REINSTATE
}

"""The possible organization invitation types."""
enum OrganizationInvitationType {
  """The invitation was to an existing user."""
  USER

  """The invitation was to an email address."""
  EMAIL
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""
Projects manage issues, pull requests and notes within a project owner.
"""
type Project implements Node & Closable & Updatable {
  """The project's description body."""
  body: String

  """The projects description body rendered to HTML."""
  bodyHTML: HTML!

  """
  'true' if the object is closed (definition of closed may depend on type)
  """
  closed: Boolean!

  """Identifies the date and time when the object was closed."""
  closedAt: DateTime

  """List of columns in the project"""
  columns(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): ProjectColumnConnection!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """The actor who originally created the project."""
  creator: Actor

  """Identifies the primary key from the database."""
  databaseId: Int @deprecated(reason: "Exposed database IDs will eventually be removed in favor of global Relay IDs. Use 'Node.id' instead. Removal on 2018-07-01 UTC.")
  id: ID!

  """The project's name."""
  name: String!

  """The project's number."""
  number: Int!

  """
  The project's owner. Currently limited to repositories and organizations.
  """
  owner: ProjectOwner!

  """List of pending cards in this project"""
  pendingCards(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): ProjectCardConnection!

  """The HTTP path for this project"""
  resourcePath: URI!

  """Whether the project is open or closed."""
  state: ProjectState!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime! @deprecated(reason: "General type updated timestamps will eventually be replaced by other field specific timestamps. Removal on 2018-07-01 UTC.")

  """The HTTP URL for this project"""
  url: URI!

  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!
}

"""A card in a project."""
type ProjectCard implements Node {
  """
  The project column this card is associated under. A card may only belong to one
  project column at a time. The column field will be null if the card is created
  in a pending state and has yet to be associated with a column. Once cards are
  associated with a column, they will not become pending in the future.
  """
  column: ProjectColumn

  """The card content item"""
  content: ProjectCardItem

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """The actor who created this card"""
  creator: Actor

  """Identifies the primary key from the database."""
  databaseId: Int @deprecated(reason: "Exposed database IDs will eventually be removed in favor of global Relay IDs. Use 'Node.id' instead. Removal on 2018-07-01 UTC.")
  id: ID!

  """The card note"""
  note: String

  """The project that contains this card."""
  project: Project!

  """The column that contains this card."""
  projectColumn: ProjectColumn! @deprecated(reason: "The associated column may be null if the card is in a pending state. Use 'ProjectCard.column' instead. Removal on 2018-07-01 UTC.")

  """The HTTP path for this card"""
  resourcePath: URI!

  """The state of ProjectCard"""
  state: ProjectCardState

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime! @deprecated(reason: "General type updated timestamps will eventually be replaced by other field specific timestamps. Removal on 2018-07-01 UTC.")

  """The HTTP URL for this card"""
  url: URI!
}

"""The connection type for ProjectCard."""
type ProjectCardConnection {
  """A list of edges."""
  edges: [ProjectCardEdge]

  """A list of nodes."""
  nodes: [ProjectCard]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type ProjectCardEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ProjectCard
}

"""Types that can be inside Project Cards."""
union ProjectCardItem = Issue | PullRequest

"""Various content states of a ProjectCard"""
enum ProjectCardState {
  """The card has content only."""
  CONTENT_ONLY

  """The card has a note only."""
  NOTE_ONLY

  """The card is redacted."""
  REDACTED
}

"""A column inside a project."""
type ProjectColumn implements Node {
  """List of cards in the column"""
  cards(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): ProjectCardConnection!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Identifies the primary key from the database."""
  databaseId: Int @deprecated(reason: "Exposed database IDs will eventually be removed in favor of global Relay IDs. Use 'Node.id' instead. Removal on 2018-07-01 UTC.")
  id: ID!

  """The project column's name."""
  name: String!

  """The project that contains this column."""
  project: Project!

  """The HTTP path for this project column"""
  resourcePath: URI!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime! @deprecated(reason: "General type updated timestamps will eventually be replaced by other field specific timestamps. Removal on 2018-07-01 UTC.")

  """The HTTP URL for this project column"""
  url: URI!
}

"""The connection type for ProjectColumn."""
type ProjectColumnConnection {
  """A list of edges."""
  edges: [ProjectColumnEdge]

  """A list of nodes."""
  nodes: [ProjectColumn]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type ProjectColumnEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ProjectColumn
}

"""A list of projects associated with the owner."""
type ProjectConnection {
  """A list of edges."""
  edges: [ProjectEdge]

  """A list of nodes."""
  nodes: [Project]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type ProjectEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Project
}

"""Ways in which lists of projects can be ordered upon return."""
input ProjectOrder {
  """The field in which to order projects by."""
  field: ProjectOrderField!

  """The direction in which to order projects by the specified field."""
  direction: OrderDirection!
}

"""Properties by which project connections can be ordered."""
enum ProjectOrderField {
  """Order projects by creation time"""
  CREATED_AT

  """Order projects by update time"""
  UPDATED_AT

  """Order projects by name"""
  NAME
}

"""Represents an owner of a Project."""
interface ProjectOwner {
  id: ID!

  """Find project by number."""
  project(
    """The project number to find."""
    number: Int!
  ): Project

  """A list of projects under the owner."""
  projects(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """Ordering options for projects returned from the connection"""
    orderBy: ProjectOrder

    """Query to search projects by, currently only searching by name."""
    search: String

    """A list of states to filter the projects by."""
    states: [ProjectState!]
  ): ProjectConnection!

  """The HTTP path listing owners projects"""
  projectsResourcePath: URI!

  """The HTTP URL listing owners projects"""
  projectsUrl: URI!

  """Can the current viewer create new projects on this owner."""
  viewerCanCreateProjects: Boolean!
}

"""State of the project; either 'open' or 'closed'"""
enum ProjectState {
  """The project is open."""
  OPEN

  """The project is closed."""
  CLOSED
}

"""A repository protected branch."""
type ProtectedBranch implements Node {
  """The actor who created this protected branch."""
  creator: Actor

  """
  Will new commits pushed to this branch dismiss pull request review approvals.
  """
  hasDismissableStaleReviews: Boolean!

  """Are reviews required to update this branch."""
  hasRequiredReviews: Boolean!

  """Are status checks required to update this branch."""
  hasRequiredStatusChecks: Boolean!

  """Is pushing to this branch restricted."""
  hasRestrictedPushes: Boolean!

  """Is dismissal of pull request reviews restricted."""
  hasRestrictedReviewDismissals: Boolean!

  """Are branches required to be up to date before merging."""
  hasStrictRequiredStatusChecks: Boolean!
  id: ID!

  """Can admins overwrite branch protection."""
  isAdminEnforced: Boolean!

  """Identifies the name of the protected branch."""
  name: String!

  """A list push allowances for this protected branch."""
  pushAllowances(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): PushAllowanceConnection!

  """The repository associated with this protected branch."""
  repository: Repository!

  """
  List of required status check contexts that must pass for commits to be accepted to this branch.
  """
  requiredStatusCheckContexts: [String]

  """A list review dismissal allowances for this protected branch."""
  reviewDismissalAllowances(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): ReviewDismissalAllowanceConnection!
}

"""The connection type for ProtectedBranch."""
type ProtectedBranchConnection {
  """A list of edges."""
  edges: [ProtectedBranchEdge]

  """A list of nodes."""
  nodes: [ProtectedBranch]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type ProtectedBranchEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ProtectedBranch
}

"""A user's public key."""
type PublicKey implements Node {
  id: ID!

  """The public key string"""
  key: String!
}

"""The connection type for PublicKey."""
type PublicKeyConnection {
  """A list of edges."""
  edges: [PublicKeyEdge]

  """A list of nodes."""
  nodes: [PublicKey]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type PublicKeyEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: PublicKey
}

"""A repository pull request."""
type PullRequest implements Node & Assignable & Closable & Comment & Updatable & UpdatableComment & Labelable & Lockable & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable {
  """Reason that the conversation was locked."""
  activeLockReason: LockReason

  """The number of additions in this pull request."""
  additions: Int!

  """A list of Users assigned to this object."""
  assignees(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): UserConnection!

  """The actor who authored the comment."""
  author: Actor

  """Author's association with the subject of the comment."""
  authorAssociation: CommentAuthorAssociation!

  """Identifies the base Ref associated with the pull request."""
  baseRef: Ref

  """
  Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefName: String!

  """
  Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  """
  baseRefOid: GitObjectID!

  """The body as Markdown."""
  body: String!

  """The body rendered to HTML."""
  bodyHTML: HTML!

  """The body rendered to text."""
  bodyText: String!

  """The number of changed files in this pull request."""
  changedFiles: Int!

  """'true' if the pull request is closed"""
  closed: Boolean!

  """Identifies the date and time when the object was closed."""
  closedAt: DateTime

  """A list of comments associated with the pull request."""
  comments(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): IssueCommentConnection!

  """
  A list of commits present in this pull request's head branch not present in the base branch.
  """
  commits(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): PullRequestCommitConnection!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Check if this comment was created via an email reply."""
  createdViaEmail: Boolean!

  """Identifies the primary key from the database."""
  databaseId: Int @deprecated(reason: "Exposed database IDs will eventually be removed in favor of global Relay IDs. Use 'Node.id' instead. Removal on 2018-07-01 UTC.")

  """The number of deletions in this pull request."""
  deletions: Int!

  """The actor who edited this pull request's body."""
  editor: Actor

  """Identifies the head Ref associated with the pull request."""
  headRef: Ref

  """
  Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  """
  headRefName: String!

  """
  Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  """
  headRefOid: GitObjectID!

  """The repository associated with this pull request's head Ref."""
  headRepository: Repository

  """
  The owner of the repository associated with this pull request's head Ref.
  """
  headRepositoryOwner: RepositoryOwner
  id: ID!

  """The head and base repositories are different."""
  isCrossRepository: Boolean!

  """A list of labels associated with the object."""
  labels(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): LabelConnection

  """The moment the editor made the last edit"""
  lastEditedAt: DateTime

  """'true' if the pull request is locked"""
  locked: Boolean!

  """The commit that was created when this pull request was merged."""
  mergeCommit: Commit

  """
  Whether or not the pull request can be merged based on the existence of merge conflicts.
  """
  mergeable: MergeableState!

  """Whether or not the pull request was merged."""
  merged: Boolean!

  """The date and time that the pull request was merged."""
  mergedAt: DateTime

  """Identifies the milestone associated with the pull request."""
  milestone: Milestone

  """Identifies the pull request number."""
  number: Int!

  """
  A list of Users that are participating in the Pull Request conversation.
  """
  participants(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): UserConnection!

  """
  The commit that GitHub automatically generated to test if this pull request
  could be merged. This field will not return a value if the pull request is
  merged, or if the test merge commit is still being generated. See the
  'mergeable' field for more details on the mergeability of the pull request.
  """
  potentialMergeCommit: Commit

  """List of project cards associated with this pull request."""
  projectCards(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): ProjectCardConnection!

  """Identifies when the comment was published at."""
  publishedAt: DateTime

  """A list of reactions grouped by content left on the subject."""
  reactionGroups: [ReactionGroup!]

  """A list of Reactions left on the Issue."""
  reactions(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """Allows filtering Reactions by emoji."""
    content: ReactionContent

    """Allows specifying the order in which reactions are returned."""
    orderBy: ReactionOrder
  ): ReactionConnection!

  """The repository associated with this node."""
  repository: Repository!

  """The HTTP path for this pull request."""
  resourcePath: URI!

  """The HTTP path for reverting this pull request."""
  revertResourcePath: URI!

  """The HTTP URL for reverting this pull request."""
  revertUrl: URI!

  """A list of review requests associated with the pull request."""
  reviewRequests(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): ReviewRequestConnection

  """A list of reviews associated with the pull request."""
  reviews(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """A list of states to filter the reviews."""
    states: [PullRequestReviewState!]

    """Filter by author of the review."""
    author: String
  ): PullRequestReviewConnection

  """Identifies the state of the pull request."""
  state: PullRequestState!

  """
  A list of reviewer suggestions based on commit history and past review comments.
  """
  suggestedReviewers: [SuggestedReviewer]!

  """
  A list of events, comments, commits, etc. associated with the pull request.
  """
  timeline(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """Allows filtering timeline events by a 'since' timestamp."""
    since: DateTime
  ): PullRequestTimelineConnection!

  """Identifies the pull request title."""
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime! @deprecated(reason: "General type updated timestamps will eventually be replaced by other field specific timestamps. Removal on 2018-07-01 UTC.")

  """The HTTP URL for this pull request."""
  url: URI!

  """A list of edits to this content."""
  userContentEdits(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): UserContentEditConnection

  """Can user react to this subject"""
  viewerCanReact: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!

  """Reasons why the current viewer can not update this comment."""
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

  """Did the viewer author this comment."""
  viewerDidAuthor: Boolean!

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: SubscriptionState!
}

"""Represents a Git commit part of a pull request."""
type PullRequestCommit implements Node & UniformResourceLocatable {
  """The Git commit object"""
  commit: Commit!
  id: ID!

  """The pull request this commit belongs to"""
  pullRequest: PullRequest!

  """The HTTP path for this pull request commit"""
  resourcePath: URI!

  """The HTTP URL for this pull request commit"""
  url: URI!
}

"""The connection type for PullRequestCommit."""
type PullRequestCommitConnection {
  """A list of edges."""
  edges: [PullRequestCommitEdge]

  """A list of nodes."""
  nodes: [PullRequestCommit]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type PullRequestCommitEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: PullRequestCommit
}

"""The connection type for PullRequest."""
type PullRequestConnection {
  """A list of edges."""
  edges: [PullRequestEdge]

  """A list of nodes."""
  nodes: [PullRequest]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type PullRequestEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: PullRequest
}

"""The possible PubSub channels for a pull request."""
enum PullRequestPubSubTopic {
  """The channel ID for observing pull request updates."""
  UPDATED

  """The channel ID for marking an pull request as read."""
  MARKASREAD

  """The channel ID for observing head ref updates."""
  HEAD_REF
}

"""A review object for a given pull request."""
type PullRequestReview implements Node & Comment & Deletable & Updatable & UpdatableComment & RepositoryNode {
  """The actor who authored the comment."""
  author: Actor

  """Author's association with the subject of the comment."""
  authorAssociation: CommentAuthorAssociation!

  """Identifies the pull request review body."""
  body: String!

  """The body of this review rendered to HTML."""
  bodyHTML: HTML!

  """The body of this review rendered as plain text."""
  bodyText: String!

  """A list of review comments for the current pull request review."""
  comments(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): PullRequestReviewCommentConnection!

  """Identifies the commit associated with this pull request review."""
  commit: Commit

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Check if this comment was created via an email reply."""
  createdViaEmail: Boolean!

  """Identifies the primary key from the database."""
  databaseId: Int @deprecated(reason: "Exposed database IDs will eventually be removed in favor of global Relay IDs. Use 'Node.id' instead. Removal on 2018-07-01 UTC.")

  """The actor who edited the comment."""
  editor: Actor
  id: ID!

  """The moment the editor made the last edit"""
  lastEditedAt: DateTime

  """Identifies when the comment was published at."""
  publishedAt: DateTime

  """Identifies the pull request associated with this pull request review."""
  pullRequest: PullRequest!

  """The repository associated with this node."""
  repository: Repository!

  """The HTTP path permalink for this PullRequestReview."""
  resourcePath: URI!

  """Identifies the current state of the pull request review."""
  state: PullRequestReviewState!

  """Identifies when the Pull Request Review was submitted"""
  submittedAt: DateTime

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime! @deprecated(reason: "General type updated timestamps will eventually be replaced by other field specific timestamps. Removal on 2018-07-01 UTC.")

  """The HTTP URL permalink for this PullRequestReview."""
  url: URI!

  """A list of edits to this content."""
  userContentEdits(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): UserContentEditConnection

  """Check if the current viewer can delete this object."""
  viewerCanDelete: Boolean!

  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!

  """Reasons why the current viewer can not update this comment."""
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

  """Did the viewer author this comment."""
  viewerDidAuthor: Boolean!
}

"""A review comment associated with a given repository pull request."""
type PullRequestReviewComment implements Node & Comment & Deletable & Updatable & UpdatableComment & Reactable & RepositoryNode {
  """The actor who authored the comment."""
  author: Actor

  """Author's association with the subject of the comment."""
  authorAssociation: CommentAuthorAssociation!

  """The comment body of this review comment."""
  body: String!

  """The comment body of this review comment rendered to HTML."""
  bodyHTML: HTML!

  """The comment body of this review comment rendered as plain text."""
  bodyText: String!

  """Identifies the commit associated with the comment."""
  commit: Commit!

  """Identifies when the comment was created."""
  createdAt: DateTime!

  """Check if this comment was created via an email reply."""
  createdViaEmail: Boolean!

  """Identifies the primary key from the database."""
  databaseId: Int @deprecated(reason: "Exposed database IDs will eventually be removed in favor of global Relay IDs. Use 'Node.id' instead. Removal on 2018-07-01 UTC.")

  """The diff hunk to which the comment applies."""
  diffHunk: String!

  """Identifies when the comment was created in a draft state."""
  draftedAt: DateTime!

  """The actor who edited the comment."""
  editor: Actor
  id: ID!

  """The moment the editor made the last edit"""
  lastEditedAt: DateTime

  """Identifies the original commit associated with the comment."""
  originalCommit: Commit

  """The original line index in the diff to which the comment applies."""
  originalPosition: Int!

  """The path to which the comment applies."""
  path: String!

  """The line index in the diff to which the comment applies."""
  position: Int

  """Identifies when the comment was published at."""
  publishedAt: DateTime

  """The pull request associated with this review comment."""
  pullRequest: PullRequest!

  """The pull request review associated with this review comment."""
  pullRequestReview: PullRequestReview

  """A list of reactions grouped by content left on the subject."""
  reactionGroups: [ReactionGroup!]

  """A list of Reactions left on the Issue."""
  reactions(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """Allows filtering Reactions by emoji."""
    content: ReactionContent

    """Allows specifying the order in which reactions are returned."""
    orderBy: ReactionOrder
  ): ReactionConnection!

  """The comment this is a reply to."""
  replyTo: PullRequestReviewComment

  """The repository associated with this node."""
  repository: Repository!

  """The HTTP path permalink for this review comment."""
  resourcePath: URI!

  """Identifies when the comment was last updated."""
  updatedAt: DateTime!

  """The HTTP URL permalink for this review comment."""
  url: URI!

  """A list of edits to this content."""
  userContentEdits(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): UserContentEditConnection

  """Check if the current viewer can delete this object."""
  viewerCanDelete: Boolean!

  """Can user react to this subject"""
  viewerCanReact: Boolean!

  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!

  """Reasons why the current viewer can not update this comment."""
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!

  """Did the viewer author this comment."""
  viewerDidAuthor: Boolean!
}

"""The connection type for PullRequestReviewComment."""
type PullRequestReviewCommentConnection {
  """A list of edges."""
  edges: [PullRequestReviewCommentEdge]

  """A list of nodes."""
  nodes: [PullRequestReviewComment]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type PullRequestReviewCommentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: PullRequestReviewComment
}

"""The connection type for PullRequestReview."""
type PullRequestReviewConnection {
  """A list of edges."""
  edges: [PullRequestReviewEdge]

  """A list of nodes."""
  nodes: [PullRequestReview]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type PullRequestReviewEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: PullRequestReview
}

"""The possible events to perform on a pull request review."""
enum PullRequestReviewEvent {
  """Submit general feedback without explicit approval."""
  COMMENT

  """Submit feedback and approve merging these changes."""
  APPROVE

  """Submit feedback that must be addressed before merging."""
  REQUEST_CHANGES

  """Dismiss review so it now longer effects merging."""
  DISMISS
}

"""The possible states of a pull request review."""
enum PullRequestReviewState {
  """A review that has not yet been submitted."""
  PENDING

  """An informational review."""
  COMMENTED

  """A review allowing the pull request to merge."""
  APPROVED

  """A review blocking the pull request from merging."""
  CHANGES_REQUESTED

  """A review that has been dismissed."""
  DISMISSED
}

"""A threaded list of comments for a given pull request."""
type PullRequestReviewThread implements Node {
  """A list of pull request comments associated with the thread."""
  comments(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): PullRequestReviewCommentConnection!
  id: ID!

  """Identifies the pull request associated with this thread."""
  pullRequest: PullRequest!

  """Identifies the repository associated with this thread."""
  repository: Repository!
}

"""The possible states of a pull request."""
enum PullRequestState {
  """A pull request that is still open."""
  OPEN

  """A pull request that has been closed without being merged."""
  CLOSED

  """A pull request that has been closed by being merged."""
  MERGED
}

"""The connection type for PullRequestTimelineItem."""
type PullRequestTimelineConnection {
  """A list of edges."""
  edges: [PullRequestTimelineItemEdge]

  """A list of nodes."""
  nodes: [PullRequestTimelineItem]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An item in an pull request timeline"""
union PullRequestTimelineItem = Commit | CommitCommentThread | PullRequestReview | PullRequestReviewThread | PullRequestReviewComment | IssueComment | ClosedEvent | ReopenedEvent | SubscribedEvent | UnsubscribedEvent | MergedEvent | ReferencedEvent | CrossReferencedEvent | AssignedEvent | UnassignedEvent | LabeledEvent | UnlabeledEvent | MilestonedEvent | DemilestonedEvent | RenamedTitleEvent | LockedEvent | UnlockedEvent | DeployedEvent | HeadRefDeletedEvent | HeadRefRestoredEvent | HeadRefForcePushedEvent | BaseRefForcePushedEvent | ReviewRequestedEvent | ReviewRequestRemovedEvent | ReviewDismissedEvent

"""An edge in a connection."""
type PullRequestTimelineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: PullRequestTimelineItem
}

"""A team or user who has the ability to push to a protected branch."""
type PushAllowance implements Node {
  """The actor that can push."""
  actor: PushAllowanceActor
  id: ID!

  """
  Identifies the protected branch associated with the allowed user or team.
  """
  protectedBranch: ProtectedBranch!
}

"""Types that can be an actor."""
union PushAllowanceActor = User | Team

"""The connection type for PushAllowance."""
type PushAllowanceConnection {
  """A list of edges."""
  edges: [PushAllowanceEdge]

  """A list of nodes."""
  nodes: [PushAllowance]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type PushAllowanceEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: PushAllowance
}

"""The query root of GitHub's GraphQL interface."""
type Query {
  """Look up a code of conduct by its key"""
  codeOfConduct(
    """The code of conduct's key"""
    key: String!
  ): CodeOfConduct

  """Look up a code of conduct by its key"""
  codesOfConduct: [CodeOfConduct]

  """Look up an open source license by its key"""
  license(
    """The license's downcased SPDX ID"""
    key: String!
  ): License

  """Return a list of known open source licenses"""
  licenses: [License]!

  """Get alphabetically sorted list of Marketplace categories"""
  marketplaceCategories(
    """Exclude categories with no listings."""
    excludeEmpty: Boolean
  ): [MarketplaceCategory!]!

  """Look up a Marketplace category by its slug."""
  marketplaceCategory(
    """The URL slug of the category."""
    slug: String!
  ): MarketplaceCategory

  """Look up a single Marketplace listing"""
  marketplaceListing(
    """
    Select the listing that matches this slug. It's the short name of the listing used in its URL.
    """
    slug: String!
  ): MarketplaceListing

  """Look up Marketplace listings"""
  marketplaceListings(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """Select only listings with the given category."""
    categorySlug: String

    """
    Select listings to which user has admin access. If omitted, listings visible to the
    viewer are returned.
    """
    viewerCanAdmin: Boolean

    """Select listings that can be administered by the specified user."""
    adminId: ID

    """Select listings for products owned by the specified organization."""
    organizationId: ID

    """
    Select listings visible to the viewer even if they are not approved. If omitted or
    false, only approved listings will be returned.
    """
    allStates: Boolean

    """
    Select the listings with these slugs, if they are visible to the viewer.
    """
    slugs: [String]

    """
    Select only listings where the primary category matches the given category slug.
    """
    primaryCategoryOnly: Boolean = false

    """Select only listings that offer a free trial."""
    withFreeTrialsOnly: Boolean = false
  ): MarketplaceListingConnection!

  """Return information about the GitHub instance"""
  meta: GitHubMetadata!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!

  """Lookup a organization by login."""
  organization(
    """The organization's login."""
    login: String!
  ): Organization

  """The client's rate limit information."""
  rateLimit(
    """If true, calculate the cost for the query without evaluating it"""
    dryRun: Boolean = false
  ): RateLimit

  """
  Hack to workaround https://github.com/facebook/relay/issues/112 re-exposing the root query object
  """
  relay: Query!

  """Lookup a given repository by the owner and repository name."""
  repository(
    """The login field of a user or organization"""
    owner: String!

    """The name of the repository"""
    name: String!
  ): Repository

  """
  Lookup a repository owner (ie. either a User or an Organization) by login.
  """
  repositoryOwner(
    """The username to lookup the owner by."""
    login: String!
  ): RepositoryOwner

  """Lookup resource by a URL."""
  resource(
    """The URL."""
    url: URI!
  ): UniformResourceLocatable

  """Perform a search across resources."""
  search(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """The search string to look for."""
    query: String!

    """The types of search items to search within."""
    type: SearchType!
  ): SearchResultItemConnection!

  """Look up a topic by name."""
  topic(
    """The topic's name."""
    name: String!
  ): Topic

  """Lookup a user by login."""
  user(
    """The user's login."""
    login: String!
  ): User

  """The currently authenticated user."""
  viewer: User!
}

"""Represents the client's rate limit."""
type RateLimit {
  """The point cost for the current query counting against the rate limit."""
  cost: Int!

  """
  The maximum number of points the client is permitted to consume in a 60 minute window.
  """
  limit: Int!

  """The maximum number of nodes this query may return"""
  nodeCount: Int!

  """The number of points remaining in the current rate limit window."""
  remaining: Int!

  """
  The time at which the current rate limit window resets in UTC epoch seconds.
  """
  resetAt: DateTime!
}

"""Represents a subject that can be reacted on."""
interface Reactable {
  """Identifies the primary key from the database."""
  databaseId: Int @deprecated(reason: "Exposed database IDs will eventually be removed in favor of global Relay IDs. Use 'Node.id' instead. Removal on 2018-07-01 UTC.")
  id: ID!

  """A list of reactions grouped by content left on the subject."""
  reactionGroups: [ReactionGroup!]

  """A list of Reactions left on the Issue."""
  reactions(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """Allows filtering Reactions by emoji."""
    content: ReactionContent

    """Allows specifying the order in which reactions are returned."""
    orderBy: ReactionOrder
  ): ReactionConnection!

  """Can user react to this subject"""
  viewerCanReact: Boolean!
}

"""The connection type for User."""
type ReactingUserConnection {
  """A list of edges."""
  edges: [ReactingUserEdge]

  """A list of nodes."""
  nodes: [User]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Represents a user that's made a reaction."""
type ReactingUserEdge {
  cursor: String!
  node: User!

  """The moment when the user made the reaction."""
  reactedAt: DateTime!
}

"""An emoji reaction to a particular piece of content."""
type Reaction implements Node {
  """Identifies the emoji reaction."""
  content: ReactionContent!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Identifies the primary key from the database."""
  databaseId: Int @deprecated(reason: "Exposed database IDs will eventually be removed in favor of global Relay IDs. Use 'Node.id' instead. Removal on 2018-07-01 UTC.")
  id: ID!

  """The reactable piece of content"""
  reactable: Reactable!

  """Identifies the user who created this reaction."""
  user: User
}

"""A list of reactions that have been left on the subject."""
type ReactionConnection {
  """A list of edges."""
  edges: [ReactionEdge]

  """A list of nodes."""
  nodes: [Reaction]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """
  Whether or not the authenticated user has left a reaction on the subject.
  """
  viewerHasReacted: Boolean!
}

"""Emojis that can be attached to Issues, Pull Requests and Comments."""
enum ReactionContent {
  """Represents the 👍 emoji."""
  THUMBS_UP

  """Represents the 👎 emoji."""
  THUMBS_DOWN

  """Represents the 😄 emoji."""
  LAUGH

  """Represents the 🎉 emoji."""
  HOORAY

  """Represents the 😕 emoji."""
  CONFUSED

  """Represents the ❤️ emoji."""
  HEART
}

"""An edge in a connection."""
type ReactionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Reaction
}

"""A group of emoji reactions to a particular piece of content."""
type ReactionGroup {
  """Identifies the emoji reaction."""
  content: ReactionContent!

  """Identifies when the reaction was created."""
  createdAt: DateTime

  """The subject that was reacted to."""
  subject: Reactable!

  """
  Users who have reacted to the reaction subject with the emotion represented by this reaction group
  """
  users(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): ReactingUserConnection!

  """
  Whether or not the authenticated user has left a reaction on the subject.
  """
  viewerHasReacted: Boolean!
}

"""Ways in which lists of reactions can be ordered upon return."""
input ReactionOrder {
  """The field in which to order reactions by."""
  field: ReactionOrderField!

  """The direction in which to order reactions by the specified field."""
  direction: OrderDirection!
}

"""A list of fields that reactions can be ordered by."""
enum ReactionOrderField {
  """Allows ordering a list of reactions by when they were created."""
  CREATED_AT
}

"""Represents a Git reference."""
type Ref implements Node {
  """A list of pull requests with this ref as the head ref."""
  associatedPullRequests(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """A list of states to filter the pull requests by."""
    states: [PullRequestState!]

    """A list of label names to filter the pull requests by."""
    labels: [String!]

    """The head ref name to filter the pull requests by."""
    headRefName: String

    """The base ref name to filter the pull requests by."""
    baseRefName: String

    """Ordering options for pull requests returned from the connection."""
    orderBy: IssueOrder
  ): PullRequestConnection!
  id: ID!

  """The ref name."""
  name: String!

  """The ref's prefix, such as 'refs/heads/' or 'refs/tags/'."""
  prefix: String!

  """The repository the ref belongs to."""
  repository: Repository!

  """The object the ref points to."""
  target: GitObject!
}

"""The connection type for Ref."""
type RefConnection {
  """A list of edges."""
  edges: [RefEdge]

  """A list of nodes."""
  nodes: [Ref]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type RefEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Ref
}

"""Represents a 'referenced' event on a given 'ReferencedSubject'."""
type ReferencedEvent implements Node {
  """Identifies the actor who performed the event."""
  actor: Actor

  """Identifies the commit associated with the 'referenced' event."""
  commit: Commit

  """Identifies the repository associated with the 'referenced' event."""
  commitRepository: Repository!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!

  """Reference originated in a different repository."""
  isCrossReference: Boolean! @deprecated(reason: "'isCrossReference' will be renamed. Use 'ReferencedEvent.isCrossRepository' instead. Removal on 2018-07-01 UTC.")

  """Reference originated in a different repository."""
  isCrossRepository: Boolean!

  """
  Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference.
  """
  isDirectReference: Boolean!

  """Object referenced by event."""
  subject: ReferencedSubject!
}

"""Any referencable object"""
union ReferencedSubject = Issue | PullRequest

"""Ways in which lists of git refs can be ordered upon return."""
input RefOrder {
  """The field in which to order refs by."""
  field: RefOrderField!

  """The direction in which to order refs by the specified field."""
  direction: OrderDirection!
}

"""Properties by which ref connections can be ordered."""
enum RefOrderField {
  """Order refs by underlying commit date if the ref prefix is refs/tags/"""
  TAG_COMMIT_DATE

  """Order refs by their alphanumeric name"""
  ALPHABETICAL
}

"""A release contains the content for a release."""
type Release implements Node & UniformResourceLocatable {
  """The author of the release"""
  author: User

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Identifies the description of the release."""
  description: String
  id: ID!

  """Whether or not the release is a draft"""
  isDraft: Boolean!

  """Whether or not the release is a prerelease"""
  isPrerelease: Boolean!

  """Identifies the title of the release."""
  name: String

  """Identifies the date and time when the release was created."""
  publishedAt: DateTime

  """List of releases assets which are dependent on this release."""
  releaseAssets(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """A list of names to filter the assets by."""
    name: String
  ): ReleaseAssetConnection!

  """The HTTP path for this issue"""
  resourcePath: URI!

  """The Git tag the release points to"""
  tag: Ref

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime! @deprecated(reason: "General type updated timestamps will eventually be replaced by other field specific timestamps. Removal on 2018-07-01 UTC.")

  """The HTTP URL for this issue"""
  url: URI!
}

"""A release asset contains the content for a release asset."""
type ReleaseAsset implements Node {
  """The asset's content-type"""
  contentType: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """The number of times this asset was downloaded"""
  downloadCount: Int!

  """
  Identifies the URL where you can download the release asset via the browser.
  """
  downloadUrl: URI!
  id: ID!

  """Identifies the title of the release asset."""
  name: String!

  """Release that the asset is associated with"""
  release: Release

  """The size (in bytes) of the asset"""
  size: Int!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime! @deprecated(reason: "General type updated timestamps will eventually be replaced by other field specific timestamps. Removal on 2018-07-01 UTC.")

  """The user that performed the upload"""
  uploadedBy: User!

  """Identifies the URL of the release asset."""
  url: URI!
}

"""The connection type for ReleaseAsset."""
type ReleaseAssetConnection {
  """A list of edges."""
  edges: [ReleaseAssetEdge]

  """A list of nodes."""
  nodes: [ReleaseAsset]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type ReleaseAssetEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ReleaseAsset
}

"""The connection type for Release."""
type ReleaseConnection {
  """A list of edges."""
  edges: [ReleaseEdge]

  """A list of nodes."""
  nodes: [Release]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type ReleaseEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Release
}

"""Ways in which lists of releases can be ordered upon return."""
input ReleaseOrder {
  """The field in which to order releases by."""
  field: ReleaseOrderField!

  """The direction in which to order releases by the specified field."""
  direction: OrderDirection!
}

"""Properties by which release connections can be ordered."""
enum ReleaseOrderField {
  """Order releases by creation time"""
  CREATED_AT

  """Order releases alphabetically by name"""
  NAME
}

"""
Represents a 'removed_from_project' event on a given issue or pull request.
"""
type RemovedFromProjectEvent implements Node {
  """Identifies the actor who performed the event."""
  actor: Actor

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Identifies the primary key from the database."""
  databaseId: Int @deprecated(reason: "Exposed database IDs will eventually be removed in favor of global Relay IDs. Use 'Node.id' instead. Removal on 2018-07-01 UTC.")
  id: ID!
}

"""Autogenerated input type of RemoveOutsideCollaborator"""
input RemoveOutsideCollaboratorInput {
  """The ID of the outside collaborator to remove."""
  userId: ID!

  """The ID of the organization to remove the outside collaborator from."""
  organizationId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveOutsideCollaborator"""
type RemoveOutsideCollaboratorPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The user that was removed as an outside collaborator."""
  removedUser: User!
}

"""Autogenerated input type of RemoveReaction"""
input RemoveReactionInput {
  """The Node ID of the subject to modify."""
  subjectId: ID!

  """The name of the emoji to react with."""
  content: ReactionContent!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveReaction"""
type RemoveReactionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The reaction object."""
  reaction: Reaction!

  """The reactable subject."""
  subject: Reactable!
}

"""Autogenerated input type of RemoveStar"""
input RemoveStarInput {
  """The Starrable ID to unstar."""
  starrableId: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RemoveStar"""
type RemoveStarPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The starrable."""
  starrable: Starrable!
}

"""Represents a 'renamed' event on a given issue or pull request"""
type RenamedTitleEvent implements Node {
  """Identifies the actor who performed the event."""
  actor: Actor

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Identifies the current title of the issue or pull request."""
  currentTitle: String!
  id: ID!

  """Identifies the previous title of the issue or pull request."""
  previousTitle: String!

  """Subject that was renamed."""
  subject: RenamedTitleSubject!
}

"""An object which has a renamable title"""
union RenamedTitleSubject = Issue | PullRequest

"""Represents a 'reopened' event on any 'Closable'."""
type ReopenedEvent implements Node {
  """Identifies the actor who performed the event."""
  actor: Actor

  """Object that was reopened."""
  closable: Closable!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
}

"""A repository contains the content for a project."""
type Repository implements Node & ProjectOwner & Subscribable & Starrable & UniformResourceLocatable & RepositoryInfo {
  """A list of users that can be assigned to issues in this repository."""
  assignableUsers(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): UserConnection!

  """Returns the code of conduct for this repository"""
  codeOfConduct: CodeOfConduct

  """A list of collaborators associated with the repository."""
  collaborators(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """Collaborators affiliation level with a repository."""
    affiliation: CollaboratorAffiliation
  ): RepositoryCollaboratorConnection

  """A list of commit comments associated with the repository."""
  commitComments(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): CommitCommentConnection!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Identifies the primary key from the database."""
  databaseId: Int @deprecated(reason: "Exposed database IDs will eventually be removed in favor of global Relay IDs. Use 'Node.id' instead. Removal on 2018-07-01 UTC.")

  """The Ref associated with the repository's default branch."""
  defaultBranchRef: Ref

  """A list of deploy keys that are on this repository."""
  deployKeys(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): DeployKeyConnection!

  """Deployments associated with the repository"""
  deployments(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """Environments to list deployments for"""
    environments: [String!]
  ): DeploymentConnection!

  """The description of the repository."""
  description: String

  """The description of the repository rendered to HTML."""
  descriptionHTML: HTML!

  """The number of kilobytes this repository occupies on disk."""
  diskUsage: Int

  """
  Returns how many forks there are of this repository in the whole network.
  """
  forkCount: Int!

  """A list of direct forked repositories."""
  forks(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """If non-null, filters repositories according to privacy"""
    privacy: RepositoryPrivacy

    """Ordering options for repositories returned from the connection"""
    orderBy: RepositoryOrder

    """Affiliation options for repositories returned from the connection"""
    affiliations: [RepositoryAffiliation]

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean
  ): RepositoryConnection!

  """Indicates if the repository has issues feature enabled."""
  hasIssuesEnabled: Boolean!

  """Indicates if the repository has wiki feature enabled."""
  hasWikiEnabled: Boolean!

  """The repository's URL."""
  homepageUrl: URI
  id: ID!

  """Indicates if the repository is unmaintained."""
  isArchived: Boolean!

  """Identifies if the repository is a fork."""
  isFork: Boolean!

  """Indicates if the repository has been locked or not."""
  isLocked: Boolean!

  """Identifies if the repository is a mirror."""
  isMirror: Boolean!

  """Identifies if the repository is private."""
  isPrivate: Boolean!

  """Returns a single issue from the current repository by number."""
  issue(
    """The number for the issue to be returned."""
    number: Int!
  ): Issue

  """
  Returns a single issue-like object from the current repository by number.
  """
  issueOrPullRequest(
    """The number for the issue to be returned."""
    number: Int!
  ): IssueOrPullRequest

  """A list of issues that have been opened in the repository."""
  issues(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """A list of label names to filter the pull requests by."""
    labels: [String!]

    """Ordering options for issues returned from the connection."""
    orderBy: IssueOrder

    """A list of states to filter the issues by."""
    states: [IssueState!]
  ): IssueConnection!

  """Returns a single label by name"""
  label(
    """Label name"""
    name: String!
  ): Label

  """A list of labels associated with the repository."""
  labels(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """If provided, searches labels by name and description."""
    query: String
  ): LabelConnection

  """
  A list containing a breakdown of the language composition of the repository.
  """
  languages(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """Order for connection"""
    orderBy: LanguageOrder
  ): LanguageConnection

  """The license associated with the repository"""
  license: String @deprecated(reason: "Field 'license' will be replaced by a more detailed license object. Use 'Repository.licenseInfo' instead. Removal on 2018-07-01 UTC.")

  """The license associated with the repository"""
  licenseInfo: License

  """The reason the repository has been locked."""
  lockReason: RepositoryLockReason

  """
  A list of Users that can be mentioned in the context of the repository.
  """
  mentionableUsers(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): UserConnection!

  """Whether or not PRs are merged with a merge commit on this repository."""
  mergeCommitAllowed: Boolean!

  """Returns a single milestone from the current repository by number."""
  milestone(
    """The number for the milestone to be returned."""
    number: Int!
  ): Milestone

  """A list of milestones associated with the repository."""
  milestones(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """Filter by the state of the milestones."""
    states: [MilestoneState!]

    """Ordering options for milestones."""
    orderBy: MilestoneOrder
  ): MilestoneConnection

  """The repository's original mirror URL."""
  mirrorUrl: URI

  """The name of the repository."""
  name: String!

  """The repository's name with owner."""
  nameWithOwner: String!

  """A Git object in the repository"""
  object(
    """The Git object ID"""
    oid: GitObjectID

    """A Git revision expression suitable for rev-parse"""
    expression: String
  ): GitObject

  """The User owner of the repository."""
  owner: RepositoryOwner!

  """The repository parent, if this is a fork."""
  parent: Repository

  """The primary language of the repository's code."""
  primaryLanguage: Language

  """Find project by number."""
  project(
    """The project number to find."""
    number: Int!
  ): Project

  """A list of projects under the owner."""
  projects(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """Ordering options for projects returned from the connection"""
    orderBy: ProjectOrder

    """Query to search projects by, currently only searching by name."""
    search: String

    """A list of states to filter the projects by."""
    states: [ProjectState!]
  ): ProjectConnection!

  """The HTTP path listing repository's projects"""
  projectsResourcePath: URI!

  """The HTTP URL listing repository's projects"""
  projectsUrl: URI!

  """A list of protected branches that are on this repository."""
  protectedBranches(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): ProtectedBranchConnection!

  """Returns a single pull request from the current repository by number."""
  pullRequest(
    """The number for the pull request to be returned."""
    number: Int!
  ): PullRequest

  """A list of pull requests that have been opened in the repository."""
  pullRequests(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """A list of states to filter the pull requests by."""
    states: [PullRequestState!]

    """A list of label names to filter the pull requests by."""
    labels: [String!]

    """The head ref name to filter the pull requests by."""
    headRefName: String

    """The base ref name to filter the pull requests by."""
    baseRefName: String

    """Ordering options for pull requests returned from the connection."""
    orderBy: IssueOrder
  ): PullRequestConnection!

  """Identifies when the repository was last pushed to."""
  pushedAt: DateTime

  """Whether or not rebase-merging is enabled on this repository."""
  rebaseMergeAllowed: Boolean!

  """Fetch a given ref from the repository"""
  ref(
    """
    The ref to retrieve. Fully qualified matches are checked in order
    ('refs/heads/master') before falling back onto checks for short name matches ('master').
    """
    qualifiedName: String!
  ): Ref

  """Fetch a list of refs from the repository"""
  refs(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """A ref name prefix like 'refs/heads/', 'refs/tags/', etc."""
    refPrefix: String!

    """DEPRECATED: use orderBy. The ordering direction."""
    direction: OrderDirection

    """Ordering options for refs returned from the connection."""
    orderBy: RefOrder
  ): RefConnection

  """Lookup a single release given various criteria."""
  release(
    """The name of the Tag the Release was created from"""
    tagName: String!
  ): Release

  """List of releases which are dependent on this repository."""
  releases(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """Order for connection"""
    orderBy: ReleaseOrder
  ): ReleaseConnection!

  """A list of applied repository-topic associations for this repository."""
  repositoryTopics(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): RepositoryTopicConnection!

  """The HTTP path for this repository"""
  resourcePath: URI!

  """
  A description of the repository, rendered to HTML without any links in it.
  """
  shortDescriptionHTML(
    """How many characters to return."""
    limit: Int = 200
  ): HTML!

  """Whether or not squash-merging is enabled on this repository."""
  squashMergeAllowed: Boolean!

  """The SSH URL to clone this repository"""
  sshUrl: GitSSHRemote!

  """A list of users who have starred this starrable."""
  stargazers(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """Order for connection"""
    orderBy: StarOrder
  ): StargazerConnection!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime! @deprecated(reason: "General type updated timestamps will eventually be replaced by other field specific timestamps. Removal on 2018-07-01 UTC.")

  """The HTTP URL for this repository"""
  url: URI!

  """
  Indicates whether the viewer has admin permissions on this repository.
  """
  viewerCanAdminister: Boolean!

  """Can the current viewer create new projects on this owner."""
  viewerCanCreateProjects: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """
  Indicates whether the viewer can update the topics of this repository.
  """
  viewerCanUpdateTopics: Boolean!

  """
  Returns a boolean indicating whether the viewing user has starred this starrable.
  """
  viewerHasStarred: Boolean!

  """
  The users permission level on the repository. Will return null if authenticated as an GitHub App.
  """
  viewerPermission: RepositoryPermission

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: SubscriptionState!

  """A list of users watching the repository."""
  watchers(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): UserConnection!
}

"""The affiliation of a user to a repository"""
enum RepositoryAffiliation {
  """Repositories that are owned by the authenticated user."""
  OWNER

  """Repositories that the user has been added to as a collaborator."""
  COLLABORATOR

  """
  Repositories that the user has access to through being a member of an
  organization. This includes every repository on every team that the user is on.
  """
  ORGANIZATION_MEMBER
}

"""The affiliation type between collaborator and repository."""
enum RepositoryCollaboratorAffiliation {
  """All collaborators of the repository."""
  ALL

  """All outside collaborators of an organization-owned repository."""
  OUTSIDE
}

"""The connection type for User."""
type RepositoryCollaboratorConnection {
  """A list of edges."""
  edges: [RepositoryCollaboratorEdge]

  """A list of nodes."""
  nodes: [User]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Represents a user who is a collaborator of a repository."""
type RepositoryCollaboratorEdge {
  cursor: String!
  node: User!

  """The permission the user has on the repository."""
  permission: RepositoryPermission!
}

"""A list of repositories owned by the subject."""
type RepositoryConnection {
  """A list of edges."""
  edges: [RepositoryEdge]

  """A list of nodes."""
  nodes: [Repository]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """The total size in kilobytes of all repositories in the connection."""
  totalDiskUsage: Int!
}

"""The reason a repository is listed as 'contributed'."""
enum RepositoryContributionType {
  """Created a commit"""
  COMMIT

  """Created an issue"""
  ISSUE

  """Created a pull request"""
  PULL_REQUEST

  """Created the repository"""
  REPOSITORY

  """Reviewed a pull request"""
  PULL_REQUEST_REVIEW
}

"""An edge in a connection."""
type RepositoryEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Repository
}

"""A subset of repository info."""
interface RepositoryInfo {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """The description of the repository."""
  description: String

  """The description of the repository rendered to HTML."""
  descriptionHTML: HTML!

  """
  Returns how many forks there are of this repository in the whole network.
  """
  forkCount: Int!

  """Indicates if the repository has issues feature enabled."""
  hasIssuesEnabled: Boolean!

  """Indicates if the repository has wiki feature enabled."""
  hasWikiEnabled: Boolean!

  """The repository's URL."""
  homepageUrl: URI

  """Indicates if the repository is unmaintained."""
  isArchived: Boolean!

  """Identifies if the repository is a fork."""
  isFork: Boolean!

  """Indicates if the repository has been locked or not."""
  isLocked: Boolean!

  """Identifies if the repository is a mirror."""
  isMirror: Boolean!

  """Identifies if the repository is private."""
  isPrivate: Boolean!

  """The license associated with the repository"""
  license: String @deprecated(reason: "Field 'license' will be replaced by a more detailed license object. Use 'Repository.licenseInfo' instead. Removal on 2018-07-01 UTC.")

  """The license associated with the repository"""
  licenseInfo: License

  """The reason the repository has been locked."""
  lockReason: RepositoryLockReason

  """The repository's original mirror URL."""
  mirrorUrl: URI

  """The name of the repository."""
  name: String!

  """The repository's name with owner."""
  nameWithOwner: String!

  """The User owner of the repository."""
  owner: RepositoryOwner!

  """Identifies when the repository was last pushed to."""
  pushedAt: DateTime

  """The HTTP path for this repository"""
  resourcePath: URI!

  """
  A description of the repository, rendered to HTML without any links in it.
  """
  shortDescriptionHTML(
    """How many characters to return."""
    limit: Int = 200
  ): HTML!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime! @deprecated(reason: "General type updated timestamps will eventually be replaced by other field specific timestamps. Removal on 2018-07-01 UTC.")

  """The HTTP URL for this repository"""
  url: URI!
}

"""An invitation for a user to be added to a repository."""
type RepositoryInvitation implements Node {
  id: ID!

  """The user who received the invitation."""
  invitee: User!

  """The user who created the invitation."""
  inviter: User!

  """The permission granted on this repository by this invitation."""
  permission: RepositoryPermission!

  """The Repository the user is invited to."""
  repository: RepositoryInfo
}

"""The possible reasons a given repository could be in a locked state."""
enum RepositoryLockReason {
  """The repository is locked due to a move."""
  MOVING

  """The repository is locked due to a billing related reason."""
  BILLING

  """The repository is locked due to a rename."""
  RENAME

  """The repository is locked due to a migration."""
  MIGRATING
}

"""Represents a object that belongs to a repository."""
interface RepositoryNode {
  """The repository associated with this node."""
  repository: Repository!
}

"""Ordering options for repository connections"""
input RepositoryOrder {
  """The field to order repositories by."""
  field: RepositoryOrderField!

  """The ordering direction."""
  direction: OrderDirection!
}

"""Properties by which repository connections can be ordered."""
enum RepositoryOrderField {
  """Order repositories by creation time"""
  CREATED_AT

  """Order repositories by update time"""
  UPDATED_AT

  """Order repositories by push time"""
  PUSHED_AT

  """Order repositories by name"""
  NAME

  """Order repositories by number of stargazers"""
  STARGAZERS
}

"""Represents an owner of a Repository."""
interface RepositoryOwner {
  """A URL pointing to the owner's public avatar."""
  avatarUrl(
    """The size of the resulting square image."""
    size: Int
  ): URI!
  id: ID!

  """The username used to login."""
  login: String!

  """A list of repositories this user has pinned to their profile"""
  pinnedRepositories(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """If non-null, filters repositories according to privacy"""
    privacy: RepositoryPrivacy

    """Ordering options for repositories returned from the connection"""
    orderBy: RepositoryOrder

    """Affiliation options for repositories returned from the connection"""
    affiliations: [RepositoryAffiliation]

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean
  ): RepositoryConnection!

  """A list of repositories that the user owns."""
  repositories(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """If non-null, filters repositories according to privacy"""
    privacy: RepositoryPrivacy

    """Ordering options for repositories returned from the connection"""
    orderBy: RepositoryOrder

    """Affiliation options for repositories returned from the connection"""
    affiliations: [RepositoryAffiliation]

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean
  ): RepositoryConnection!

  """Find Repository."""
  repository(
    """Name of Repository to find."""
    name: String!
  ): Repository

  """The HTTP URL for the owner."""
  resourcePath: URI!

  """The HTTP URL for the owner."""
  url: URI!
}

"""The access level to a repository"""
enum RepositoryPermission {
  """Can read, clone, push, and add collaborators"""
  ADMIN

  """Can read, clone and push"""
  WRITE

  """Can read and clone"""
  READ
}

"""The privacy of a repository"""
enum RepositoryPrivacy {
  """Public"""
  PUBLIC

  """Private"""
  PRIVATE
}

"""A repository-topic connects a repository to a topic."""
type RepositoryTopic implements Node & UniformResourceLocatable {
  id: ID!

  """The HTTP path for this repository-topic."""
  resourcePath: URI!

  """The topic."""
  topic: Topic!

  """The HTTP URL for this repository-topic."""
  url: URI!
}

"""The connection type for RepositoryTopic."""
type RepositoryTopicConnection {
  """A list of edges."""
  edges: [RepositoryTopicEdge]

  """A list of nodes."""
  nodes: [RepositoryTopic]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type RepositoryTopicEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: RepositoryTopic
}

"""Types that can be requested reviewers."""
union RequestedReviewer = User | Team

"""Autogenerated input type of RequestReviews"""
input RequestReviewsInput {
  """The Node ID of the pull request to modify."""
  pullRequestId: ID!

  """The Node IDs of the user to request."""
  userIds: [ID!]

  """The Node IDs of the team to request."""
  teamIds: [ID!]

  """Add users to the set rather than replace."""
  union: Boolean

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RequestReviews"""
type RequestReviewsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The pull request that is getting requests."""
  pullRequest: PullRequest!

  """The edge from the pull request to the requested reviewers."""
  requestedReviewersEdge: UserEdge!
}

"""
A team or user who has the ability to dismiss a review on a protected branch.
"""
type ReviewDismissalAllowance implements Node {
  """The actor that can dismiss."""
  actor: ReviewDismissalAllowanceActor
  id: ID!

  """
  Identifies the protected branch associated with the allowed user or team.
  """
  protectedBranch: ProtectedBranch!
}

"""Types that can be an actor."""
union ReviewDismissalAllowanceActor = User | Team

"""The connection type for ReviewDismissalAllowance."""
type ReviewDismissalAllowanceConnection {
  """A list of edges."""
  edges: [ReviewDismissalAllowanceEdge]

  """A list of nodes."""
  nodes: [ReviewDismissalAllowance]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type ReviewDismissalAllowanceEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ReviewDismissalAllowance
}

"""
Represents a 'review_dismissed' event on a given issue or pull request.
"""
type ReviewDismissedEvent implements Node & UniformResourceLocatable {
  """Identifies the actor who performed the event."""
  actor: Actor

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Identifies the primary key from the database."""
  databaseId: Int @deprecated(reason: "Exposed database IDs will eventually be removed in favor of global Relay IDs. Use 'Node.id' instead. Removal on 2018-07-01 UTC.")
  id: ID!

  """Identifies the message associated with the 'review_dismissed' event."""
  message: String!

  """The message associated with the event, rendered to HTML."""
  messageHtml: HTML!

  """
  Identifies the previous state of the review with the 'review_dismissed' event.
  """
  previousReviewState: PullRequestReviewState!

  """PullRequest referenced by event."""
  pullRequest: PullRequest!

  """Identifies the commit which caused the review to become stale."""
  pullRequestCommit: PullRequestCommit

  """The HTTP path for this review dismissed event."""
  resourcePath: URI!

  """Identifies the review associated with the 'review_dismissed' event."""
  review: PullRequestReview

  """The HTTP URL for this review dismissed event."""
  url: URI!
}

"""A request for a user to review a pull request."""
type ReviewRequest implements Node {
  """Identifies the primary key from the database."""
  databaseId: Int @deprecated(reason: "Exposed database IDs will eventually be removed in favor of global Relay IDs. Use 'Node.id' instead. Removal on 2018-07-01 UTC.")
  id: ID!

  """Identifies the pull request associated with this review request."""
  pullRequest: PullRequest!

  """The reviewer that is requested."""
  requestedReviewer: RequestedReviewer

  """Identifies the author associated with this review request."""
  reviewer: User @deprecated(reason: "Field 'reviewer' will be changed in favor of returning a union type. Use 'ReviewRequest.requestedReviewer' instead. Removal on 2018-07-01 UTC.")
}

"""The connection type for ReviewRequest."""
type ReviewRequestConnection {
  """A list of edges."""
  edges: [ReviewRequestEdge]

  """A list of nodes."""
  nodes: [ReviewRequest]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Represents an 'review_requested' event on a given pull request."""
type ReviewRequestedEvent implements Node {
  """Identifies the actor who performed the event."""
  actor: Actor

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!

  """PullRequest referenced by event."""
  pullRequest: PullRequest!

  """Identifies the reviewer whose review was requested."""
  requestedReviewer: RequestedReviewer

  """Identifies the user whose review was requested."""
  subject: User @deprecated(reason: "'subject' will be renamed. Use 'ReviewRequestedEvent.requestedReviewer' instead. Removal on 2018-07-01 UTC.")
}

"""An edge in a connection."""
type ReviewRequestEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ReviewRequest
}

"""Represents an 'review_request_removed' event on a given pull request."""
type ReviewRequestRemovedEvent implements Node {
  """Identifies the actor who performed the event."""
  actor: Actor

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!

  """PullRequest referenced by event."""
  pullRequest: PullRequest!

  """Identifies the reviewer whose review request was removed."""
  requestedReviewer: RequestedReviewer

  """Identifies the user whose review request was removed."""
  subject: User @deprecated(reason: "'subject' will be renamed. Use 'ReviewRequestRemovedEvent.requestedReviewer' instead. Removal on 2018-07-01 UTC.")
}

"""The results of a search."""
union SearchResultItem = Issue | PullRequest | Repository | User | Organization | MarketplaceListing

"""A list of results that matched against a search query."""
type SearchResultItemConnection {
  """The number of pieces of code that matched the search query."""
  codeCount: Int!

  """A list of edges."""
  edges: [SearchResultItemEdge]

  """The number of issues that matched the search query."""
  issueCount: Int!

  """A list of nodes."""
  nodes: [SearchResultItem]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The number of repositories that matched the search query."""
  repositoryCount: Int!

  """The number of users that matched the search query."""
  userCount: Int!

  """The number of wiki pages that matched the search query."""
  wikiCount: Int!
}

"""An edge in a connection."""
type SearchResultItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: SearchResultItem

  """Text matches on the result found."""
  textMatches: [TextMatch]
}

"""Represents the individual results of a search."""
enum SearchType {
  """Returns results matching issues in repositories."""
  ISSUE

  """Returns results matching repositories."""
  REPOSITORY

  """Returns results matching users and organizations on GitHub."""
  USER
}

"""Represents an S/MIME signature on a Commit or Tag."""
type SmimeSignature implements GitSignature {
  """Email used to sign this object."""
  email: String!

  """True if the signature is valid and verified by GitHub."""
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """ASCII-armored signature header from object."""
  signature: String!

  """GitHub user corresponding to the email signing this commit."""
  signer: User

  """
  The state of this signature. 'VALID' if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!
}

"""The connection type for User."""
type StargazerConnection {
  """A list of edges."""
  edges: [StargazerEdge]

  """A list of nodes."""
  nodes: [User]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Represents a user that's starred a repository."""
type StargazerEdge {
  cursor: String!
  node: User!

  """Identifies when the item was starred."""
  starredAt: DateTime!
}

"""Ways in which star connections can be ordered."""
input StarOrder {
  """The field in which to order nodes by."""
  field: StarOrderField!

  """The direction in which to order nodes."""
  direction: OrderDirection!
}

"""Properties by which star connections can be ordered."""
enum StarOrderField {
  """Allows ordering a list of stars by when they were created."""
  STARRED_AT
}

"""Things that can be starred."""
interface Starrable {
  id: ID!

  """A list of users who have starred this starrable."""
  stargazers(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """Order for connection"""
    orderBy: StarOrder
  ): StargazerConnection!

  """
  Returns a boolean indicating whether the viewing user has starred this starrable.
  """
  viewerHasStarred: Boolean!
}

"""The connection type for Repository."""
type StarredRepositoryConnection {
  """A list of edges."""
  edges: [StarredRepositoryEdge]

  """A list of nodes."""
  nodes: [Repository]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Represents a starred repository."""
type StarredRepositoryEdge {
  cursor: String!
  node: Repository!

  """Identifies when the item was starred."""
  starredAt: DateTime!
}

"""Represents a commit status."""
type Status implements Node {
  """The commit this status is attached to."""
  commit: Commit

  """Looks up an individual status context by context name."""
  context(
    """The context name."""
    name: String!
  ): StatusContext

  """The individual status contexts for this commit."""
  contexts: [StatusContext!]!
  id: ID!

  """The combined commit status."""
  state: StatusState!
}

"""Represents an individual commit status context"""
type StatusContext implements Node {
  """This commit this status context is attached to."""
  commit: Commit

  """The name of this status context."""
  context: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """The actor who created this status context."""
  creator: Actor

  """The description for this status context."""
  description: String
  id: ID!

  """The state of this status context."""
  state: StatusState!

  """The URL for this status context."""
  targetUrl: URI
}

"""The possible commit status states."""
enum StatusState {
  """Status is expected."""
  EXPECTED

  """Status is errored."""
  ERROR

  """Status is failing."""
  FAILURE

  """Status is pending."""
  PENDING

  """Status is successful."""
  SUCCESS
}

"""Autogenerated input type of SubmitPullRequestReview"""
input SubmitPullRequestReviewInput {
  """The Pull Request Review ID to submit."""
  pullRequestReviewId: ID!

  """The event to send to the Pull Request Review."""
  event: PullRequestReviewEvent!

  """The text field to set on the Pull Request Review."""
  body: String

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of SubmitPullRequestReview"""
type SubmitPullRequestReviewPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The submitted pull request review."""
  pullRequestReview: PullRequestReview!
}

"""Entities that can be subscribed to for web and email notifications."""
interface Subscribable {
  id: ID!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: SubscriptionState!
}

"""Represents a 'subscribed' event on a given 'Subscribable'."""
type SubscribedEvent implements Node {
  """Identifies the actor who performed the event."""
  actor: Actor

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!

  """Object referenced by event."""
  subscribable: Subscribable!
}

"""The possible states of a subscription."""
enum SubscriptionState {
  """The User is only notified when particpating or @mentioned."""
  UNSUBSCRIBED

  """The User is notified of all conversations."""
  SUBSCRIBED

  """The User is never notified."""
  IGNORED

  """Subscriptions are currently unavailable"""
  UNAVAILABLE
}

"""
A suggestion to review a pull request based on a user's commit history and review comments.
"""
type SuggestedReviewer {
  """Is this suggestion based on past commits?"""
  isAuthor: Boolean!

  """Is this suggestion based on past review comments?"""
  isCommenter: Boolean!

  """Identifies the user suggested to review the pull request."""
  reviewer: User!
}

"""Represents a Git tag."""
type Tag implements Node & GitObject {
  """An abbreviated version of the Git object ID"""
  abbreviatedOid: String!

  """The HTTP path for this Git object"""
  commitResourcePath: URI!

  """The HTTP URL for this Git object"""
  commitUrl: URI!
  id: ID!

  """The Git tag message."""
  message: String

  """The Git tag name."""
  name: String!

  """The Git object ID"""
  oid: GitObjectID!

  """The Repository the Git object belongs to"""
  repository: Repository!

  """Details about the tag author."""
  tagger: GitActor

  """The Git object the tag points to."""
  target: GitObject!
}

"""A team of users in an organization."""
type Team implements Node & Subscribable {
  """A list of teams that are ancestors of this team."""
  ancestors(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): TeamConnection!

  """A URL pointing to the team's avatar."""
  avatarUrl(
    """The size in pixels of the resulting square image."""
    size: Int = 400
  ): URI

  """List of child teams belonging to this team"""
  childTeams(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """Order for connection"""
    orderBy: TeamOrder

    """User logins to filter by"""
    userLogins: [String!]

    """Whether to list immediate child teams or all descendant child teams."""
    immediateOnly: Boolean = true
  ): TeamConnection!

  """The slug corresponding to the organization and team."""
  combinedSlug: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """The description of the team."""
  description: String

  """The HTTP path for editing this team"""
  editTeamResourcePath: URI!

  """The HTTP URL for editing this team"""
  editTeamUrl: URI!
  id: ID!

  """A list of pending invitations for users to this team"""
  invitations(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): OrganizationInvitationConnection

  """A list of users who are members of this team."""
  members(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """The search string to look for."""
    query: String

    """Filter by membership type"""
    membership: TeamMembershipType = ALL

    """Filter by team member role"""
    role: TeamMemberRole

    """Order for the connection."""
    orderBy: TeamMemberOrder
  ): TeamMemberConnection!

  """The HTTP path for the team' members"""
  membersResourcePath: URI!

  """The HTTP URL for the team' members"""
  membersUrl: URI!

  """The name of the team."""
  name: String!

  """The HTTP path creating a new team"""
  newTeamResourcePath: URI!

  """The HTTP URL creating a new team"""
  newTeamUrl: URI!

  """The organization that owns this team."""
  organization: Organization!

  """The parent team of the team."""
  parentTeam: Team

  """The level of privacy the team has."""
  privacy: TeamPrivacy!

  """A list of repositories this team has access to."""
  repositories(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """The search string to look for."""
    query: String

    """Order for the connection."""
    orderBy: TeamRepositoryOrder
  ): TeamRepositoryConnection!

  """The HTTP path for this team's repositories"""
  repositoriesResourcePath: URI!

  """The HTTP URL for this team's repositories"""
  repositoriesUrl: URI!

  """The HTTP path for this team"""
  resourcePath: URI!

  """The slug corresponding to the team."""
  slug: String!

  """The HTTP path for this team's teams"""
  teamsResourcePath: URI!

  """The HTTP URL for this team's teams"""
  teamsUrl: URI!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime! @deprecated(reason: "General type updated timestamps will eventually be replaced by other field specific timestamps. Removal on 2018-07-01 UTC.")

  """The HTTP URL for this team"""
  url: URI!

  """Team is adminable by the viewer."""
  viewerCanAdminister: Boolean!

  """
  Check if the viewer is able to change their subscription status for the repository.
  """
  viewerCanSubscribe: Boolean!

  """
  Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  """
  viewerSubscription: SubscriptionState!
}

"""The connection type for Team."""
type TeamConnection {
  """A list of edges."""
  edges: [TeamEdge]

  """A list of nodes."""
  nodes: [Team]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type TeamEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Team
}

"""The connection type for User."""
type TeamMemberConnection {
  """A list of edges."""
  edges: [TeamMemberEdge]

  """A list of nodes."""
  nodes: [User]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Represents a user who is a member of a team."""
type TeamMemberEdge {
  cursor: String!

  """The HTTP path to the organization's member access page."""
  memberAccessResourcePath: URI!

  """The HTTP URL to the organization's member access page."""
  memberAccessUrl: URI!
  node: User!

  """The role the member has on the team."""
  role: TeamMemberRole!
}

"""Ordering options for team member connections"""
input TeamMemberOrder {
  """The field to order team members by."""
  field: TeamMemberOrderField!

  """The ordering direction."""
  direction: OrderDirection!
}

"""Properties by which team member connections can be ordered."""
enum TeamMemberOrderField {
  """Order team members by login"""
  LOGIN

  """Order team members by creation time"""
  CREATED_AT
}

"""The possible team member roles; either 'maintainer' or 'member'."""
enum TeamMemberRole {
  """A team maintainer has permission to add and remove team members."""
  MAINTAINER

  """A team member has no administrative permissions on the team."""
  MEMBER
}

"""
Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL.
"""
enum TeamMembershipType {
  """Includes only immediate members of the team."""
  IMMEDIATE

  """Includes only child team members for the team."""
  CHILD_TEAM

  """Includes immediate and child team members for the team."""
  ALL
}

"""Ways in which team connections can be ordered."""
input TeamOrder {
  """The field in which to order nodes by."""
  field: TeamOrderField!

  """The direction in which to order nodes."""
  direction: OrderDirection!
}

"""Properties by which team connections can be ordered."""
enum TeamOrderField {
  """Allows ordering a list of teams by name."""
  NAME
}

"""The possible team privacy values."""
enum TeamPrivacy {
  """A secret team can only be seen by its members."""
  SECRET

  """
  A visible team can be seen and @mentioned by every member of the organization.
  """
  VISIBLE
}

"""The connection type for Repository."""
type TeamRepositoryConnection {
  """A list of edges."""
  edges: [TeamRepositoryEdge]

  """A list of nodes."""
  nodes: [Repository]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Represents a team repository."""
type TeamRepositoryEdge {
  cursor: String!
  node: Repository!

  """The permission level the team has on the repository"""
  permission: RepositoryPermission!
}

"""Ordering options for team repository connections"""
input TeamRepositoryOrder {
  """The field to order repositories by."""
  field: TeamRepositoryOrderField!

  """The ordering direction."""
  direction: OrderDirection!
}

"""Properties by which team repository connections can be ordered."""
enum TeamRepositoryOrderField {
  """Order repositories by creation time"""
  CREATED_AT

  """Order repositories by update time"""
  UPDATED_AT

  """Order repositories by push time"""
  PUSHED_AT

  """Order repositories by name"""
  NAME

  """Order repositories by permission"""
  PERMISSION

  """Order repositories by number of stargazers"""
  STARGAZERS
}

"""The role of a user on a team."""
enum TeamRole {
  """User has admin rights on the team."""
  ADMIN

  """User is a member of the team."""
  MEMBER
}

"""A text match within a search result."""
type TextMatch {
  """The specific text fragment within the property matched on."""
  fragment: String!

  """Highlights within the matched fragment."""
  highlights: [TextMatchHighlight]!

  """The property matched on."""
  property: String!
}

"""Represents a single highlight in a search result match."""
type TextMatchHighlight {
  """The indice in the fragment where the matched text begins."""
  beginIndice: Int!

  """The indice in the fragment where the matched text ends."""
  endIndice: Int!

  """The text matched."""
  text: String!
}

"""A topic aggregates entities that are related to a subject."""
type Topic implements Node {
  id: ID!

  """The topic's name."""
  name: String!

  """
  A list of related topics, including aliases of this topic, sorted with the most relevant
  first.
  """
  relatedTopics: [Topic!]!
}

"""The connection type for Topic."""
type TopicConnection {
  """A list of edges."""
  edges: [TopicEdge]

  """A list of nodes."""
  nodes: [Topic]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type TopicEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Topic
}

"""Reason that the suggested topic is declined."""
enum TopicSuggestionDeclineReason {
  """The suggested topic is not relevant to the repository."""
  NOT_RELEVANT

  """
  The suggested topic is too specific for the repository (e.g. #ruby-on-rails-version-4-2-1).
  """
  TOO_SPECIFIC

  """The viewer does not like the suggested topic."""
  PERSONAL_PREFERENCE

  """The suggested topic is too general for the repository."""
  TOO_GENERAL
}

"""Represents a Git tree."""
type Tree implements Node & GitObject {
  """An abbreviated version of the Git object ID"""
  abbreviatedOid: String!

  """The HTTP path for this Git object"""
  commitResourcePath: URI!

  """The HTTP URL for this Git object"""
  commitUrl: URI!

  """A list of tree entries."""
  entries: [TreeEntry!]
  id: ID!

  """The Git object ID"""
  oid: GitObjectID!

  """The Repository the Git object belongs to"""
  repository: Repository!
}

"""Represents a Git tree entry."""
type TreeEntry {
  """Entry file mode."""
  mode: Int!

  """Entry file name."""
  name: String!

  """Entry file object."""
  object: GitObject

  """Entry file Git object ID."""
  oid: GitObjectID!

  """The Repository the tree entry belongs to"""
  repository: Repository!

  """Entry file type."""
  type: String!
}

"""Represents an 'unassigned' event on any assignable object."""
type UnassignedEvent implements Node {
  """Identifies the actor who performed the event."""
  actor: Actor

  """Identifies the assignable associated with the event."""
  assignable: Assignable!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!

  """Identifies the subject (user) who was unassigned."""
  user: User
}

"""Represents a type that can be retrieved by a URL."""
interface UniformResourceLocatable {
  """The HTML path to this resource."""
  resourcePath: URI!

  """The URL to this resource."""
  url: URI!
}

"""Represents an unknown signature on a Commit or Tag."""
type UnknownSignature implements GitSignature {
  """Email used to sign this object."""
  email: String!

  """True if the signature is valid and verified by GitHub."""
  isValid: Boolean!

  """
  Payload for GPG signing object. Raw ODB object without the signature header.
  """
  payload: String!

  """ASCII-armored signature header from object."""
  signature: String!

  """GitHub user corresponding to the email signing this commit."""
  signer: User

  """
  The state of this signature. 'VALID' if signature is valid and verified by
  GitHub, otherwise represents reason why signature is considered invalid.
  """
  state: GitSignatureState!
}

"""Represents an 'unlabeled' event on a given issue or pull request."""
type UnlabeledEvent implements Node {
  """Identifies the actor who performed the event."""
  actor: Actor

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!

  """Identifies the label associated with the 'unlabeled' event."""
  label: Label!

  """Identifies the 'Labelable' associated with the event."""
  labelable: Labelable!
}

"""Represents an 'unlocked' event on a given issue or pull request."""
type UnlockedEvent implements Node {
  """Identifies the actor who performed the event."""
  actor: Actor

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!

  """Object that was unlocked."""
  lockable: Lockable!
}

"""Represents an 'unsubscribed' event on a given 'Subscribable'."""
type UnsubscribedEvent implements Node {
  """Identifies the actor who performed the event."""
  actor: Actor

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!

  """Object referenced by event."""
  subscribable: Subscribable!
}

"""Entities that can be updated."""
interface Updatable {
  """Check if the current viewer can update this object."""
  viewerCanUpdate: Boolean!
}

"""Comments that can be updated."""
interface UpdatableComment {
  """Reasons why the current viewer can not update this comment."""
  viewerCannotUpdateReasons: [CommentCannotUpdateReason!]!
}

"""Autogenerated input type of UpdateProjectCard"""
input UpdateProjectCardInput {
  """The ProjectCard ID to update."""
  projectCardId: ID!

  """The note of ProjectCard."""
  note: String!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateProjectCard"""
type UpdateProjectCardPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The updated ProjectCard."""
  projectCard: ProjectCard!
}

"""Autogenerated input type of UpdateProjectColumn"""
input UpdateProjectColumnInput {
  """The ProjectColumn ID to update."""
  projectColumnId: ID!

  """The name of project column."""
  name: String!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateProjectColumn"""
type UpdateProjectColumnPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The updated project column."""
  projectColumn: ProjectColumn!
}

"""Autogenerated input type of UpdateProject"""
input UpdateProjectInput {
  """The Project ID to update."""
  projectId: ID!

  """The name of project."""
  name: String

  """The description of project."""
  body: String

  """Whether the project is open or closed."""
  state: ProjectState

  """Whether the project is public or not."""
  public: Boolean

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateProject"""
type UpdateProjectPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The updated project."""
  project: Project!
}

"""Autogenerated input type of UpdatePullRequestReviewComment"""
input UpdatePullRequestReviewCommentInput {
  """The Node ID of the comment to modify."""
  pullRequestReviewCommentId: ID!

  """The text of the comment."""
  body: String!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdatePullRequestReviewComment"""
type UpdatePullRequestReviewCommentPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The updated comment."""
  pullRequestReviewComment: PullRequestReviewComment!
}

"""Autogenerated input type of UpdatePullRequestReview"""
input UpdatePullRequestReviewInput {
  """The Node ID of the pull request review to modify."""
  pullRequestReviewId: ID!

  """The contents of the pull request review body."""
  body: String!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdatePullRequestReview"""
type UpdatePullRequestReviewPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The updated pull request review."""
  pullRequestReview: PullRequestReview!
}

"""Autogenerated input type of UpdateSubscription"""
input UpdateSubscriptionInput {
  """The Node ID of the subscribable object to modify."""
  subscribableId: ID!

  """The new state of the subscription."""
  state: SubscriptionState!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateSubscription"""
type UpdateSubscriptionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The input subscribable entity."""
  subscribable: Subscribable!
}

"""Autogenerated input type of UpdateTopics"""
input UpdateTopicsInput {
  """The Node ID of the repository."""
  repositoryId: ID!

  """An array of topic names."""
  topicNames: [String!]!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateTopics"""
type UpdateTopicsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """Names of the provided topics that are not valid."""
  invalidTopicNames: [String!]

  """The updated repository."""
  repository: Repository!
}

"""An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string."""
scalar URI

"""
A user is an individual's account on GitHub that owns repositories and can make new content.
"""
type User implements Node & Actor & RepositoryOwner & UniformResourceLocatable {
  """A URL pointing to the user's public avatar."""
  avatarUrl(
    """The size of the resulting square image."""
    size: Int
  ): URI!

  """The user's public profile bio."""
  bio: String

  """The user's public profile bio as HTML."""
  bioHTML: HTML!

  """A list of commit comments made by this user."""
  commitComments(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): CommitCommentConnection!

  """The user's public profile company."""
  company: String

  """The user's public profile company as HTML."""
  companyHTML: HTML!

  """A list of repositories that the user recently contributed to."""
  contributedRepositories(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """If non-null, filters repositories according to privacy"""
    privacy: RepositoryPrivacy

    """Ordering options for repositories returned from the connection"""
    orderBy: RepositoryOrder

    """Affiliation options for repositories returned from the connection"""
    affiliations: [RepositoryAffiliation]

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean
  ): RepositoryConnection! @deprecated(reason: "Arguments for connection 'contributedRepositories' are getting redesigned. Use 'User.repositoriesContributedTo' instead. Removal on 2018-07-01 UTC.")

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Identifies the primary key from the database."""
  databaseId: Int @deprecated(reason: "Exposed database IDs will eventually be removed in favor of global Relay IDs. Use 'Node.id' instead. Removal on 2018-07-01 UTC.")

  """The user's publicly visible profile email."""
  email: String!

  """A list of users the given user is followed by."""
  followers(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): FollowerConnection!

  """A list of users the given user is following."""
  following(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): FollowingConnection!

  """Find gist by repo name."""
  gist(
    """The gist name to find."""
    name: String!
  ): Gist

  """A list of gist comments made by this user."""
  gistComments(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): GistCommentConnection!

  """A list of the Gists the user has created."""
  gists(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """Filters Gists according to privacy."""
    privacy: GistPrivacy

    """Ordering options for gists returned from the connection"""
    orderBy: GistOrder
  ): GistConnection!
  id: ID!

  """
  Whether or not this user is a participant in the GitHub Security Bug Bounty.
  """
  isBountyHunter: Boolean!

  """
  Whether or not this user is a participant in the GitHub Campus Experts Program.
  """
  isCampusExpert: Boolean!

  """Whether or not this user is a GitHub Developer Program member."""
  isDeveloperProgramMember: Boolean!

  """Whether or not this user is a GitHub employee."""
  isEmployee: Boolean!

  """Whether or not the user has marked themselves as for hire."""
  isHireable: Boolean!

  """Whether or not this user is a site administrator."""
  isSiteAdmin: Boolean!

  """Whether or not this user is the viewing user."""
  isViewer: Boolean!

  """A list of issue comments made by this user."""
  issueComments(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): IssueCommentConnection!

  """A list of issues assocated with this user."""
  issues(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """A list of label names to filter the pull requests by."""
    labels: [String!]

    """Ordering options for issues returned from the connection."""
    orderBy: IssueOrder

    """A list of states to filter the issues by."""
    states: [IssueState!]
  ): IssueConnection!

  """The user's public profile location."""
  location: String

  """The username used to login."""
  login: String!

  """The user's public profile name."""
  name: String

  """Find an organization by its login that the user belongs to."""
  organization(
    """The login of the organization to find."""
    login: String!
  ): Organization

  """A list of organizations the user belongs to."""
  organizations(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): OrganizationConnection!

  """A list of repositories this user has pinned to their profile"""
  pinnedRepositories(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """If non-null, filters repositories according to privacy"""
    privacy: RepositoryPrivacy

    """Ordering options for repositories returned from the connection"""
    orderBy: RepositoryOrder

    """Affiliation options for repositories returned from the connection"""
    affiliations: [RepositoryAffiliation]

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean
  ): RepositoryConnection!

  """A list of public keys associated with this user."""
  publicKeys(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String
  ): PublicKeyConnection!

  """A list of pull requests assocated with this user."""
  pullRequests(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """A list of states to filter the pull requests by."""
    states: [PullRequestState!]

    """A list of label names to filter the pull requests by."""
    labels: [String!]

    """The head ref name to filter the pull requests by."""
    headRefName: String

    """The base ref name to filter the pull requests by."""
    baseRefName: String

    """Ordering options for pull requests returned from the connection."""
    orderBy: IssueOrder
  ): PullRequestConnection!

  """A list of repositories that the user owns."""
  repositories(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """If non-null, filters repositories according to privacy"""
    privacy: RepositoryPrivacy

    """Ordering options for repositories returned from the connection"""
    orderBy: RepositoryOrder

    """Affiliation options for repositories returned from the connection"""
    affiliations: [RepositoryAffiliation]

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """
    If non-null, filters repositories according to whether they are forks of another repository
    """
    isFork: Boolean
  ): RepositoryConnection!

  """A list of repositories that the user recently contributed to."""
  repositoriesContributedTo(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """If non-null, filters repositories according to privacy"""
    privacy: RepositoryPrivacy

    """Ordering options for repositories returned from the connection"""
    orderBy: RepositoryOrder

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean

    """If true, include user repositories"""
    includeUserRepositories: Boolean

    """
    If non-null, include only the specified types of contributions. The
    GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]
    """
    contributionTypes: [RepositoryContributionType]
  ): RepositoryConnection!

  """Find Repository."""
  repository(
    """Name of Repository to find."""
    name: String!
  ): Repository

  """The HTTP path for this user"""
  resourcePath: URI!

  """Repositories the user has starred."""
  starredRepositories(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """
    Filters starred repositories to only return repositories owned by the viewer.
    """
    ownedByViewer: Boolean

    """Order for connection"""
    orderBy: StarOrder
  ): StarredRepositoryConnection!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime! @deprecated(reason: "General type updated timestamps will eventually be replaced by other field specific timestamps. Removal on 2018-07-01 UTC.")

  """The HTTP URL for this user"""
  url: URI!

  """Whether or not the viewer is able to follow the user."""
  viewerCanFollow: Boolean!

  """Whether or not this user is followed by the viewer."""
  viewerIsFollowing: Boolean!

  """A list of repositories the given user is watching."""
  watching(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified global ID.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified global ID.
    """
    before: String

    """If non-null, filters repositories according to privacy"""
    privacy: RepositoryPrivacy

    """Ordering options for repositories returned from the connection"""
    orderBy: RepositoryOrder

    """Affiliation options for repositories returned from the connection"""
    affiliations: [RepositoryAffiliation]

    """
    If non-null, filters repositories according to whether they have been locked
    """
    isLocked: Boolean
  ): RepositoryConnection!

  """A URL pointing to the user's public website/blog."""
  websiteUrl: URI
}

"""The connection type for User."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]

  """A list of nodes."""
  nodes: [User]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edit on user content"""
type UserContentEdit implements Node {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Identifies the date and time when the object was deleted."""
  deletedAt: DateTime

  """The actor who deleted this content"""
  deletedBy: Actor

  """A summary of the changes for this edit"""
  diff: String

  """The actor who edited this content"""
  editor: Actor
  id: ID!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime! @deprecated(reason: "General type updated timestamps will eventually be replaced by other field specific timestamps. Removal on 2018-07-01 UTC.")
}

"""A list of edits to content."""
type UserContentEditConnection {
  """A list of edges."""
  edges: [UserContentEditEdge]

  """A list of nodes."""
  nodes: [UserContentEdit]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type UserContentEditEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: UserContentEdit
}

"""An edge in a connection."""
type UserEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: User
}

"""A valid x509 certificate string"""
scalar X509Certificate
`

/*
*  END TYPEDEFS
*/



/*
 * State of the project; either 'open' or 'closed'

 */
export type ProjectState = 
  'OPEN' |
  'CLOSED'

/*
 * The possible reasons a given repository could be in a locked state.

 */
export type RepositoryLockReason = 
  'MOVING' |
  'BILLING' |
  'RENAME' |
  'MIGRATING'

/*
 * Properties by which ref connections can be ordered.

 */
export type RefOrderField = 
  'TAG_COMMIT_DATE' |
  'ALPHABETICAL'

/*
 * Whether or not a PullRequest can be merged.

 */
export type MergeableState = 
  'MERGEABLE' |
  'CONFLICTING' |
  'UNKNOWN'

/*
 * Properties by which release connections can be ordered.

 */
export type ReleaseOrderField = 
  'CREATED_AT' |
  'NAME'

/*
 * The possible PubSub channels for an issue.

 */
export type IssuePubSubTopic = 
  'UPDATED' |
  'MARKASREAD'

/*
 * The privacy of a Gist

 */
export type GistPrivacy = 
  'PUBLIC' |
  'SECRET' |
  'ALL'

/*
 * The possible states of a milestone.

 */
export type MilestoneState = 
  'OPEN' |
  'CLOSED'

/*
 * A list of fields that reactions can be ordered by.

 */
export type ReactionOrderField = 
  'CREATED_AT'

/*
 * Properties by which team connections can be ordered.

 */
export type TeamOrderField = 
  'NAME'

/*
 * Reason that the suggested topic is declined.

 */
export type TopicSuggestionDeclineReason = 
  'NOT_RELEVANT' |
  'TOO_SPECIFIC' |
  'PERSONAL_PREFERENCE' |
  'TOO_GENERAL'

/*
 * The possible states of an issue.

 */
export type IssueState = 
  'OPEN' |
  'CLOSED'

/*
 * Properties by which gist connections can be ordered.

 */
export type GistOrderField = 
  'CREATED_AT' |
  'UPDATED_AT' |
  'PUSHED_AT'

/*
 * Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL.

 */
export type TeamMembershipType = 
  'IMMEDIATE' |
  'CHILD_TEAM' |
  'ALL'

/*
 * Emojis that can be attached to Issues, Pull Requests and Comments.

 */
export type ReactionContent = 
  'THUMBS_UP' |
  'THUMBS_DOWN' |
  'LAUGH' |
  'HOORAY' |
  'CONFUSED' |
  'HEART'

/*
 * Properties by which team member connections can be ordered.

 */
export type TeamMemberOrderField = 
  'LOGIN' |
  'CREATED_AT'

/*
 * The reason a repository is listed as 'contributed'.

 */
export type RepositoryContributionType = 
  'COMMIT' |
  'ISSUE' |
  'PULL_REQUEST' |
  'REPOSITORY' |
  'PULL_REQUEST_REVIEW'

/*
 * Properties by which issue connections can be ordered.

 */
export type IssueOrderField = 
  'CREATED_AT' |
  'UPDATED_AT' |
  'COMMENTS'

/*
 * The privacy of a repository

 */
export type RepositoryPrivacy = 
  'PUBLIC' |
  'PRIVATE'

/*
 * Properties by which team repository connections can be ordered.

 */
export type TeamRepositoryOrderField = 
  'CREATED_AT' |
  'UPDATED_AT' |
  'PUSHED_AT' |
  'NAME' |
  'PERMISSION' |
  'STARGAZERS'

/*
 * The possible errors that will prevent a user from updating a comment.

 */
export type CommentCannotUpdateReason = 
  'INSUFFICIENT_ACCESS' |
  'LOCKED' |
  'LOGIN_REQUIRED' |
  'MAINTENANCE' |
  'VERIFIED_EMAIL_REQUIRED'

/*
 * The possible commit status states.

 */
export type StatusState = 
  'EXPECTED' |
  'ERROR' |
  'FAILURE' |
  'PENDING' |
  'SUCCESS'

/*
 * Properties by which repository connections can be ordered.

 */
export type RepositoryOrderField = 
  'CREATED_AT' |
  'UPDATED_AT' |
  'PUSHED_AT' |
  'NAME' |
  'STARGAZERS'

/*
 * The possible states in which a deployment can be.

 */
export type DeploymentState = 
  'ABANDONED' |
  'ACTIVE' |
  'DESTROYED' |
  'ERROR' |
  'FAILURE' |
  'INACTIVE' |
  'PENDING'

/*
 * Possible directions in which to order a list of items when provided an 'orderBy' argument.

 */
export type OrderDirection = 
  'ASC' |
  'DESC'

/*
 * Properties by which language connections can be ordered.

 */
export type LanguageOrderField = 
  'SIZE'

/*
 * The affiliation of a user to a repository

 */
export type RepositoryAffiliation = 
  'OWNER' |
  'COLLABORATOR' |
  'ORGANIZATION_MEMBER'

/*
 * Properties by which project connections can be ordered.

 */
export type ProjectOrderField = 
  'CREATED_AT' |
  'UPDATED_AT' |
  'NAME'

/*
 * Various content states of a ProjectCard

 */
export type ProjectCardState = 
  'CONTENT_ONLY' |
  'NOTE_ONLY' |
  'REDACTED'

/*
 * The possible default permissions for repositories.

 */
export type DefaultRepositoryPermissionField = 
  'NONE' |
  'READ' |
  'WRITE' |
  'ADMIN'

/*
 * The role of a user on a team.

 */
export type TeamRole = 
  'ADMIN' |
  'MEMBER'

/*
 * The possible organization invitation types.

 */
export type OrganizationInvitationType = 
  'USER' |
  'EMAIL'

/*
 * Represents the individual results of a search.

 */
export type SearchType = 
  'ISSUE' |
  'REPOSITORY' |
  'USER'

/*
 * The possible team member roles; either 'maintainer' or 'member'.

 */
export type TeamMemberRole = 
  'MAINTAINER' |
  'MEMBER'

/*
 * A comment author association with repository.

 */
export type CommentAuthorAssociation = 
  'MEMBER' |
  'OWNER' |
  'COLLABORATOR' |
  'CONTRIBUTOR' |
  'FIRST_TIME_CONTRIBUTOR' |
  'FIRST_TIMER' |
  'NONE'

/*
 * The possible states of a pull request.

 */
export type PullRequestState = 
  'OPEN' |
  'CLOSED' |
  'MERGED'

/*
 * The possible states of a subscription.

 */
export type SubscriptionState = 
  'UNSUBSCRIBED' |
  'SUBSCRIBED' |
  'IGNORED' |
  'UNAVAILABLE'

/*
 * The possible states for a deployment status.

 */
export type DeploymentStatusState = 
  'PENDING' |
  'SUCCESS' |
  'FAILURE' |
  'INACTIVE' |
  'ERROR'

/*
 * The affiliation type between collaborator and repository.

 */
export type RepositoryCollaboratorAffiliation = 
  'ALL' |
  'OUTSIDE'

/*
 * Properties by which milestone connections can be ordered.

 */
export type MilestoneOrderField = 
  'DUE_DATE' |
  'CREATED_AT' |
  'UPDATED_AT' |
  'NUMBER'

/*
 * The possible reasons that an issue or pull request was locked.

 */
export type LockReason = 
  'OFF_TOPIC' |
  'TOO_HEATED' |
  'RESOLVED' |
  'SPAM'

/*
 * The possible events to perform on a pull request review.

 */
export type PullRequestReviewEvent = 
  'COMMENT' |
  'APPROVE' |
  'REQUEST_CHANGES' |
  'DISMISS'

/*
 * Collaborators affiliation level with a subject.

 */
export type CollaboratorAffiliation = 
  'OUTSIDE' |
  'DIRECT' |
  'ALL'

/*
 * Properties by which star connections can be ordered.

 */
export type StarOrderField = 
  'STARRED_AT'

/*
 * The access level to a repository

 */
export type RepositoryPermission = 
  'ADMIN' |
  'WRITE' |
  'READ'

/*
 * The possible organization invitation roles.

 */
export type OrganizationInvitationRole = 
  'DIRECT_MEMBER' |
  'ADMIN' |
  'BILLING_MANAGER' |
  'REINSTATE'

/*
 * The possible PubSub channels for a pull request.

 */
export type PullRequestPubSubTopic = 
  'UPDATED' |
  'MARKASREAD' |
  'HEAD_REF'

/*
 * The state of a Git signature.

 */
export type GitSignatureState = 
  'VALID' |
  'INVALID' |
  'MALFORMED_SIG' |
  'UNKNOWN_KEY' |
  'BAD_EMAIL' |
  'UNVERIFIED_EMAIL' |
  'NO_USER' |
  'UNKNOWN_SIG_TYPE' |
  'UNSIGNED' |
  'GPGVERIFY_UNAVAILABLE' |
  'GPGVERIFY_ERROR' |
  'NOT_SIGNING_KEY' |
  'EXPIRED_KEY' |
  'OCSP_PENDING' |
  'OCSP_ERROR' |
  'OCSP_REVOKED'

/*
 * The possible states of a pull request review.

 */
export type PullRequestReviewState = 
  'PENDING' |
  'COMMENTED' |
  'APPROVED' |
  'CHANGES_REQUESTED' |
  'DISMISSED'

/*
 * The possible team privacy values.

 */
export type TeamPrivacy = 
  'SECRET' |
  'VISIBLE'

/*
 * Autogenerated input type of AddComment

 */
export interface AddCommentInput {
  subjectId: ID_Input
  body: String
  clientMutationId?: String
}

/*
 * Autogenerated input type of UpdateProject

 */
export interface UpdateProjectInput {
  projectId: ID_Input
  name?: String
  body?: String
  state?: ProjectState
  public?: Boolean
  clientMutationId?: String
}

/*
 * Autogenerated input type of RemoveReaction

 */
export interface RemoveReactionInput {
  subjectId: ID_Input
  content: ReactionContent
  clientMutationId?: String
}

/*
 * Autogenerated input type of DeleteProject

 */
export interface DeleteProjectInput {
  projectId: ID_Input
  clientMutationId?: String
}

/*
 * Autogenerated input type of DismissPullRequestReview

 */
export interface DismissPullRequestReviewInput {
  pullRequestReviewId: ID_Input
  message: String
  clientMutationId?: String
}

/*
 * Autogenerated input type of DeleteProjectCard

 */
export interface DeleteProjectCardInput {
  cardId: ID_Input
  clientMutationId?: String
}

/*
 * Autogenerated input type of AddPullRequestReview

 */
export interface AddPullRequestReviewInput {
  pullRequestId: ID_Input
  commitOID?: GitObjectID
  body?: String
  event?: PullRequestReviewEvent
  comments?: DraftPullRequestReviewComment[] | DraftPullRequestReviewComment
  clientMutationId?: String
}

/*
 * Ways in which lists of releases can be ordered upon return.

 */
export interface ReleaseOrder {
  field: ReleaseOrderField
  direction: OrderDirection
}

/*
 * Ways in which star connections can be ordered.

 */
export interface StarOrder {
  field: StarOrderField
  direction: OrderDirection
}

/*
 * Ordering options for team member connections

 */
export interface TeamMemberOrder {
  field: TeamMemberOrderField
  direction: OrderDirection
}

/*
 * Autogenerated input type of UpdateTopics

 */
export interface UpdateTopicsInput {
  repositoryId: ID_Input
  topicNames: String[] | String
  clientMutationId?: String
}

/*
 * Autogenerated input type of DeleteProjectColumn

 */
export interface DeleteProjectColumnInput {
  columnId: ID_Input
  clientMutationId?: String
}

/*
 * Ways in which team connections can be ordered.

 */
export interface TeamOrder {
  field: TeamOrderField
  direction: OrderDirection
}

/*
 * Autogenerated input type of SubmitPullRequestReview

 */
export interface SubmitPullRequestReviewInput {
  pullRequestReviewId: ID_Input
  event: PullRequestReviewEvent
  body?: String
  clientMutationId?: String
}

/*
 * Autogenerated input type of AddPullRequestReviewComment

 */
export interface AddPullRequestReviewCommentInput {
  pullRequestReviewId: ID_Input
  commitOID?: GitObjectID
  body: String
  path?: String
  position?: Int
  inReplyTo?: ID_Input
  clientMutationId?: String
}

/*
 * Ways in which lists of git refs can be ordered upon return.

 */
export interface RefOrder {
  field: RefOrderField
  direction: OrderDirection
}

/*
 * Autogenerated input type of AddStar

 */
export interface AddStarInput {
  starrableId: ID_Input
  clientMutationId?: String
}

/*
 * Autogenerated input type of DeletePullRequestReview

 */
export interface DeletePullRequestReviewInput {
  pullRequestReviewId: ID_Input
  clientMutationId?: String
}

/*
 * Autogenerated input type of UpdatePullRequestReview

 */
export interface UpdatePullRequestReviewInput {
  pullRequestReviewId: ID_Input
  body: String
  clientMutationId?: String
}

/*
 * Autogenerated input type of RequestReviews

 */
export interface RequestReviewsInput {
  pullRequestId: ID_Input
  userIds?: ID_Input[] | ID_Input
  teamIds?: ID_Input[] | ID_Input
  union?: Boolean
  clientMutationId?: String
}

/*
 * Autogenerated input type of UpdateProjectColumn

 */
export interface UpdateProjectColumnInput {
  projectColumnId: ID_Input
  name: String
  clientMutationId?: String
}

/*
 * Ways in which lists of projects can be ordered upon return.

 */
export interface ProjectOrder {
  field: ProjectOrderField
  direction: OrderDirection
}

/*
 * Autogenerated input type of CreateProject

 */
export interface CreateProjectInput {
  ownerId: ID_Input
  name: String
  body?: String
  clientMutationId?: String
}

/*
 * Autogenerated input type of LockLockable

 */
export interface LockLockableInput {
  lockableId: ID_Input
  lockReason?: LockReason
  clientMutationId?: String
}

/*
 * Ordering options for gist connections

 */
export interface GistOrder {
  field: GistOrderField
  direction: OrderDirection
}

/*
 * Specifies an author for filtering Git commits.

 */
export interface CommitAuthor {
  id?: ID_Input
  emails?: String[] | String
}

/*
 * Specifies a review comment to be left with a Pull Request Review.

 */
export interface DraftPullRequestReviewComment {
  path: String
  position: Int
  body: String
}

/*
 * Ordering options for milestone connections.

 */
export interface MilestoneOrder {
  field: MilestoneOrderField
  direction: OrderDirection
}

/*
 * Autogenerated input type of AddProjectCard

 */
export interface AddProjectCardInput {
  projectColumnId: ID_Input
  contentId?: ID_Input
  note?: String
  clientMutationId?: String
}

/*
 * Autogenerated input type of MoveProjectCard

 */
export interface MoveProjectCardInput {
  cardId: ID_Input
  columnId: ID_Input
  afterCardId?: ID_Input
  clientMutationId?: String
}

/*
 * Autogenerated input type of UpdateSubscription

 */
export interface UpdateSubscriptionInput {
  subscribableId: ID_Input
  state: SubscriptionState
  clientMutationId?: String
}

/*
 * Ordering options for language connections.

 */
export interface LanguageOrder {
  field: LanguageOrderField
  direction: OrderDirection
}

/*
 * Autogenerated input type of UpdatePullRequestReviewComment

 */
export interface UpdatePullRequestReviewCommentInput {
  pullRequestReviewCommentId: ID_Input
  body: String
  clientMutationId?: String
}

/*
 * Autogenerated input type of RemoveStar

 */
export interface RemoveStarInput {
  starrableId: ID_Input
  clientMutationId?: String
}

/*
 * Autogenerated input type of UpdateProjectCard

 */
export interface UpdateProjectCardInput {
  projectCardId: ID_Input
  note: String
  clientMutationId?: String
}

/*
 * Ways in which lists of reactions can be ordered upon return.

 */
export interface ReactionOrder {
  field: ReactionOrderField
  direction: OrderDirection
}

/*
 * Ordering options for team repository connections

 */
export interface TeamRepositoryOrder {
  field: TeamRepositoryOrderField
  direction: OrderDirection
}

/*
 * Autogenerated input type of RemoveOutsideCollaborator

 */
export interface RemoveOutsideCollaboratorInput {
  userId: ID_Input
  organizationId: ID_Input
  clientMutationId?: String
}

/*
 * Ways in which lists of issues can be ordered upon return.

 */
export interface IssueOrder {
  field: IssueOrderField
  direction: OrderDirection
}

/*
 * Autogenerated input type of MoveProjectColumn

 */
export interface MoveProjectColumnInput {
  columnId: ID_Input
  afterColumnId?: ID_Input
  clientMutationId?: String
}

/*
 * Autogenerated input type of AddProjectColumn

 */
export interface AddProjectColumnInput {
  projectId: ID_Input
  name: String
  clientMutationId?: String
}

/*
 * Autogenerated input type of DeclineTopicSuggestion

 */
export interface DeclineTopicSuggestionInput {
  repositoryId: ID_Input
  name: String
  reason: TopicSuggestionDeclineReason
  clientMutationId?: String
}

/*
 * Ordering options for repository connections

 */
export interface RepositoryOrder {
  field: RepositoryOrderField
  direction: OrderDirection
}

/*
 * Autogenerated input type of AddReaction

 */
export interface AddReactionInput {
  subjectId: ID_Input
  content: ReactionContent
  clientMutationId?: String
}

/*
 * Autogenerated input type of AcceptTopicSuggestion

 */
export interface AcceptTopicSuggestionInput {
  repositoryId: ID_Input
  name: String
  clientMutationId?: String
}

/*
 * A subset of repository info.

 */
export interface RepositoryInfo {
  createdAt: DateTime
  description?: String
  descriptionHTML: HTML
  forkCount: Int
  hasIssuesEnabled: Boolean
  hasWikiEnabled: Boolean
  homepageUrl?: URI
  isArchived: Boolean
  isFork: Boolean
  isLocked: Boolean
  isMirror: Boolean
  isPrivate: Boolean
  license?: String
  licenseInfo?: License
  lockReason?: RepositoryLockReason
  mirrorUrl?: URI
  name: String
  nameWithOwner: String
  owner: RepositoryOwner
  pushedAt?: DateTime
  resourcePath: URI
  shortDescriptionHTML: HTML
  updatedAt: DateTime
  url: URI
}

/*
 * Represents an owner of a Repository.

 */
export interface RepositoryOwner {
  avatarUrl: URI
  id: ID_Output
  login: String
  pinnedRepositories: RepositoryConnection
  repositories: RepositoryConnection
  repository?: Repository
  resourcePath: URI
  url: URI
}

/*
 * Represents an owner of a Project.

 */
export interface ProjectOwner {
  id: ID_Output
  project?: Project
  projects: ProjectConnection
  projectsResourcePath: URI
  projectsUrl: URI
  viewerCanCreateProjects: Boolean
}

/*
 * Represents a subject that can be reacted on.

 */
export interface Reactable {
  databaseId?: Int
  id: ID_Output
  reactionGroups?: ReactionGroup[]
  reactions: ReactionConnection
  viewerCanReact: Boolean
}

/*
 * Represents an object which can take actions on GitHub. Typically a User or Bot.

 */
export interface Actor {
  avatarUrl: URI
  login: String
  resourcePath: URI
  url: URI
}

/*
 * An object with an ID.

 */
export interface Node {
  id: ID_Output
}

/*
 * Information about a signature (GPG or S/MIME) on a Commit or Tag.

 */
export interface GitSignature {
  email: String
  isValid: Boolean
  payload: String
  signature: String
  signer?: User
  state: GitSignatureState
}

/*
 * Comments that can be updated.

 */
export interface UpdatableComment {
  viewerCannotUpdateReasons: CommentCannotUpdateReason[]
}

/*
 * Represents a Git object.

 */
export interface GitObject {
  abbreviatedOid: String
  commitResourcePath: URI
  commitUrl: URI
  id: ID_Output
  oid: GitObjectID
  repository: Repository
}

/*
 * Entities that can be deleted.

 */
export interface Deletable {
  viewerCanDelete: Boolean
}

/*
 * An object that can have labels assigned to it.

 */
export interface Labelable {
  labels?: LabelConnection
}

/*
 * Things that can be starred.

 */
export interface Starrable {
  id: ID_Output
  stargazers: StargazerConnection
  viewerHasStarred: Boolean
}

/*
 * Represents a comment.

 */
export interface Comment {
  author?: Actor
  authorAssociation: CommentAuthorAssociation
  body: String
  bodyHTML: HTML
  bodyText: String
  createdAt: DateTime
  createdViaEmail: Boolean
  editor?: Actor
  id: ID_Output
  lastEditedAt?: DateTime
  publishedAt?: DateTime
  updatedAt: DateTime
  userContentEdits?: UserContentEditConnection
  viewerDidAuthor: Boolean
}

/*
 * Entities that can be subscribed to for web and email notifications.

 */
export interface Subscribable {
  id: ID_Output
  viewerCanSubscribe: Boolean
  viewerSubscription: SubscriptionState
}

/*
 * An object that can be locked.

 */
export interface Lockable {
  activeLockReason?: LockReason
  locked: Boolean
}

/*
 * An object that can have users assigned to it.

 */
export interface Assignable {
  assignees: UserConnection
}

/*
 * Represents a object that belongs to a repository.

 */
export interface RepositoryNode {
  repository: Repository
}

/*
 * Represents a type that can be retrieved by a URL.

 */
export interface UniformResourceLocatable {
  resourcePath: URI
  url: URI
}

/*
 * Entities that can be updated.

 */
export interface Updatable {
  viewerCanUpdate: Boolean
}

/*
 * An object that can be closed

 */
export interface Closable {
  closed: Boolean
  closedAt?: DateTime
}

/*
 * Describes the status of a given deployment attempt.

 */
export interface DeploymentStatus extends Node {
  createdAt: DateTime
  creator?: Actor
  deployment: Deployment
  description?: String
  environmentUrl?: URI
  id: ID_Output
  logUrl?: URI
  state: DeploymentStatusState
  updatedAt: DateTime
}

/*
 * Represents an unknown signature on a Commit or Tag.

 */
export interface UnknownSignature extends GitSignature {
  email: String
  isValid: Boolean
  payload: String
  signature: String
  signer?: User
  state: GitSignatureState
}

/*
 * A topic aggregates entities that are related to a subject.

 */
export interface Topic extends Node {
  id: ID_Output
  name: String
  relatedTopics: Topic[]
}

/*
 * The connection type for PullRequestCommit.

 */
export interface PullRequestCommitConnection {
  edges?: PullRequestCommitEdge[]
  nodes?: PullRequestCommit[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * The connection type for ReleaseAsset.

 */
export interface ReleaseAssetConnection {
  edges?: ReleaseAssetEdge[]
  nodes?: ReleaseAsset[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * Autogenerated return type of UpdateSubscription

 */
export interface UpdateSubscriptionPayload {
  clientMutationId?: String
  subscribable: Subscribable
}

/*
 * An edge in a connection.

 */
export interface ReleaseAssetEdge {
  cursor: String
  node?: ReleaseAsset
}

/*
 * Represents a Git commit part of a pull request.

 */
export interface PullRequestCommit extends Node, UniformResourceLocatable {
  commit: Commit
  id: ID_Output
  pullRequest: PullRequest
  resourcePath: URI
  url: URI
}

/*
 * A release asset contains the content for a release asset.

 */
export interface ReleaseAsset extends Node {
  contentType: String
  createdAt: DateTime
  downloadCount: Int
  downloadUrl: URI
  id: ID_Output
  name: String
  release?: Release
  size: Int
  updatedAt: DateTime
  uploadedBy: User
  url: URI
}

/*
 * An edge in a connection.

 */
export interface IssueCommentEdge {
  cursor: String
  node?: IssueComment
}

/*
 * An emoji reaction to a particular piece of content.

 */
export interface Reaction extends Node {
  content: ReactionContent
  createdAt: DateTime
  databaseId?: Int
  id: ID_Output
  reactable: Reactable
  user?: User
}

/*
 * An edge in a connection.

 */
export interface ReviewRequestEdge {
  cursor: String
  node?: ReviewRequest
}

/*
 * An edge in a connection.

 */
export interface ReactionEdge {
  cursor: String
  node?: Reaction
}

/*
 * An edge in a connection.

 */
export interface TopicEdge {
  cursor: String
  node?: Topic
}

/*
 * The connection type for Release.

 */
export interface ReleaseConnection {
  edges?: ReleaseEdge[]
  nodes?: Release[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * The connection type for Team.

 */
export interface TeamConnection {
  edges?: TeamEdge[]
  nodes?: Team[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * An edge in a connection.

 */
export interface ReleaseEdge {
  cursor: String
  node?: Release
}

/*
 * The connection type for IssueComment.

 */
export interface IssueCommentConnection {
  edges?: IssueCommentEdge[]
  nodes?: IssueComment[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * The connection type for RepositoryTopic.

 */
export interface RepositoryTopicConnection {
  edges?: RepositoryTopicEdge[]
  nodes?: RepositoryTopic[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * The connection type for OrganizationInvitation.

 */
export interface OrganizationInvitationConnection {
  edges?: OrganizationInvitationEdge[]
  nodes?: OrganizationInvitation[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * An edge in a connection.

 */
export interface RepositoryTopicEdge {
  cursor: String
  node?: RepositoryTopic
}

/*
 * An Invitation for a user to an organization.

 */
export interface OrganizationInvitation extends Node {
  createdAt: DateTime
  email?: String
  id: ID_Output
  invitationType: OrganizationInvitationType
  invitee?: User
  inviter: User
  organization: Organization
  role: OrganizationInvitationRole
}

/*
 * A repository-topic connects a repository to a topic.

 */
export interface RepositoryTopic extends Node, UniformResourceLocatable {
  id: ID_Output
  resourcePath: URI
  topic: Topic
  url: URI
}

/*
 * A label for categorizing Issues or Milestones with a given Repository.

 */
export interface Label extends Node {
  color: String
  description?: String
  id: ID_Output
  isDefault: Boolean
  issues: IssueConnection
  name: String
  pullRequests: PullRequestConnection
  repository: Repository
}

/*
 * An edge in a connection.

 */
export interface PullRequestCommitEdge {
  cursor: String
  node?: PullRequestCommit
}

/*
 * The connection type for Label.

 */
export interface LabelConnection {
  edges?: LabelEdge[]
  nodes?: Label[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * Represents a comment on an Issue.

 */
export interface IssueComment extends Node, Comment, Deletable, Updatable, UpdatableComment, Reactable, RepositoryNode {
  author?: Actor
  authorAssociation: CommentAuthorAssociation
  body: String
  bodyHTML: HTML
  bodyText: String
  createdAt: DateTime
  createdViaEmail: Boolean
  databaseId?: Int
  editor?: Actor
  id: ID_Output
  issue: Issue
  lastEditedAt?: DateTime
  publishedAt?: DateTime
  pullRequest?: PullRequest
  reactionGroups?: ReactionGroup[]
  reactions: ReactionConnection
  repository: Repository
  resourcePath: URI
  updatedAt: DateTime
  url: URI
  userContentEdits?: UserContentEditConnection
  viewerCanDelete: Boolean
  viewerCanReact: Boolean
  viewerCanUpdate: Boolean
  viewerCannotUpdateReasons: CommentCannotUpdateReason[]
  viewerDidAuthor: Boolean
}

/*
 * An edge in a connection.

 */
export interface PullRequestEdge {
  cursor: String
  node?: PullRequest
}

/*
 * The connection type for User.

 */
export interface FollowerConnection {
  edges?: UserEdge[]
  nodes?: User[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * Represents a user who is a member of a team.

 */
export interface TeamMemberEdge {
  cursor: String
  memberAccessResourcePath: URI
  memberAccessUrl: URI
  node: User
  role: TeamMemberRole
}

/*
 * The connection type for User.

 */
export interface FollowingConnection {
  edges?: UserEdge[]
  nodes?: User[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * Represents a Git reference.

 */
export interface Ref extends Node {
  associatedPullRequests: PullRequestConnection
  id: ID_Output
  name: String
  prefix: String
  repository: Repository
  target: GitObject
}

/*
 * A Gist.

 */
export interface Gist extends Node, Starrable {
  comments: GistCommentConnection
  createdAt: DateTime
  description?: String
  id: ID_Output
  isPublic: Boolean
  name: String
  owner?: RepositoryOwner
  pushedAt?: DateTime
  stargazers: StargazerConnection
  updatedAt: DateTime
  viewerHasStarred: Boolean
}

/*
 * The connection type for Repository.

 */
export interface TeamRepositoryConnection {
  edges?: TeamRepositoryEdge[]
  nodes?: Repository[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * The connection type for GistComment.

 */
export interface GistCommentConnection {
  edges?: GistCommentEdge[]
  nodes?: GistComment[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * Represents a Git tree.

 */
export interface Tree extends Node, GitObject {
  abbreviatedOid: String
  commitResourcePath: URI
  commitUrl: URI
  entries?: TreeEntry[]
  id: ID_Output
  oid: GitObjectID
  repository: Repository
}

/*
 * An edge in a connection.

 */
export interface GistCommentEdge {
  cursor: String
  node?: GistComment
}

/*
 * An edge in a connection.

 */
export interface PullRequestReviewEdge {
  cursor: String
  node?: PullRequestReview
}

/*
 * Represents a comment on an Gist.

 */
export interface GistComment extends Node, Comment, Deletable, Updatable, UpdatableComment {
  author?: Actor
  authorAssociation: CommentAuthorAssociation
  body: String
  bodyHTML: HTML
  bodyText: String
  createdAt: DateTime
  createdViaEmail: Boolean
  databaseId?: Int
  editor?: Actor
  gist: Gist
  id: ID_Output
  lastEditedAt?: DateTime
  publishedAt?: DateTime
  updatedAt: DateTime
  userContentEdits?: UserContentEditConnection
  viewerCanDelete: Boolean
  viewerCanUpdate: Boolean
  viewerCannotUpdateReasons: CommentCannotUpdateReason[]
  viewerDidAuthor: Boolean
}

/*
 * The connection type for PullRequestReviewComment.

 */
export interface PullRequestReviewCommentConnection {
  edges?: PullRequestReviewCommentEdge[]
  nodes?: PullRequestReviewComment[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * A list of reactions that have been left on the subject.

 */
export interface ReactionConnection {
  edges?: ReactionEdge[]
  nodes?: Reaction[]
  pageInfo: PageInfo
  totalCount: Int
  viewerHasReacted: Boolean
}

/*
 * A review comment associated with a given repository pull request.

 */
export interface PullRequestReviewComment extends Node, Comment, Deletable, Updatable, UpdatableComment, Reactable, RepositoryNode {
  author?: Actor
  authorAssociation: CommentAuthorAssociation
  body: String
  bodyHTML: HTML
  bodyText: String
  commit: Commit
  createdAt: DateTime
  createdViaEmail: Boolean
  databaseId?: Int
  diffHunk: String
  draftedAt: DateTime
  editor?: Actor
  id: ID_Output
  lastEditedAt?: DateTime
  originalCommit?: Commit
  originalPosition: Int
  path: String
  position?: Int
  publishedAt?: DateTime
  pullRequest: PullRequest
  pullRequestReview?: PullRequestReview
  reactionGroups?: ReactionGroup[]
  reactions: ReactionConnection
  replyTo?: PullRequestReviewComment
  repository: Repository
  resourcePath: URI
  updatedAt: DateTime
  url: URI
  userContentEdits?: UserContentEditConnection
  viewerCanDelete: Boolean
  viewerCanReact: Boolean
  viewerCanUpdate: Boolean
  viewerCannotUpdateReasons: CommentCannotUpdateReason[]
  viewerDidAuthor: Boolean
}

/*
 * Represents a user that's made a reaction.

 */
export interface ReactingUserEdge {
  cursor: String
  node: User
  reactedAt: DateTime
}

/*
 * The connection type for PullRequestTimelineItem.

 */
export interface PullRequestTimelineConnection {
  edges?: PullRequestTimelineItemEdge[]
  nodes?: PullRequestTimelineItem[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * The connection type for User.

 */
export interface ReactingUserConnection {
  edges?: ReactingUserEdge[]
  nodes?: User[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * The connection type for Topic.

 */
export interface TopicConnection {
  edges?: TopicEdge[]
  nodes?: Topic[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * The connection type for Gist.

 */
export interface GistConnection {
  edges?: GistEdge[]
  nodes?: Gist[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * A threaded list of comments for a given pull request.

 */
export interface PullRequestReviewThread extends Node {
  comments: PullRequestReviewCommentConnection
  id: ID_Output
  pullRequest: PullRequest
  repository: Repository
}

/*
 * An edge in a connection.

 */
export interface GistEdge {
  cursor: String
  node?: Gist
}

/*
 * Represents a Git tag.

 */
export interface Tag extends Node, GitObject {
  abbreviatedOid: String
  commitResourcePath: URI
  commitUrl: URI
  id: ID_Output
  message?: String
  name: String
  oid: GitObjectID
  repository: Repository
  tagger?: GitActor
  target: GitObject
}

/*
 * The connection type for Organization.

 */
export interface OrganizationConnection {
  edges?: OrganizationEdge[]
  nodes?: Organization[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * Represents a 'subscribed' event on a given 'Subscribable'.

 */
export interface SubscribedEvent extends Node {
  actor?: Actor
  createdAt: DateTime
  id: ID_Output
  subscribable: Subscribable
}

/*
 * An edge in a connection.

 */
export interface OrganizationEdge {
  cursor: String
  node?: Organization
}

/*
 * Represents a 'merged' event on a given pull request.

 */
export interface MergedEvent extends Node, UniformResourceLocatable {
  actor?: Actor
  commit?: Commit
  createdAt: DateTime
  id: ID_Output
  mergeRef?: Ref
  mergeRefName: String
  pullRequest: PullRequest
  resourcePath: URI
  url: URI
}

/*
 * The connection type for PublicKey.

 */
export interface PublicKeyConnection {
  edges?: PublicKeyEdge[]
  nodes?: PublicKey[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * Represents an S/MIME signature on a Commit or Tag.

 */
export interface SmimeSignature extends GitSignature {
  email: String
  isValid: Boolean
  payload: String
  signature: String
  signer?: User
  state: GitSignatureState
}

/*
 * An edge in a connection.

 */
export interface PublicKeyEdge {
  cursor: String
  node?: PublicKey
}

/*
 * Represents an 'assigned' event on any assignable object.

 */
export interface AssignedEvent extends Node {
  actor?: Actor
  assignable: Assignable
  createdAt: DateTime
  id: ID_Output
  user?: User
}

/*
 * A user's public key.

 */
export interface PublicKey extends Node {
  id: ID_Output
  key: String
}

/*
 * Represents a 'labeled' event on a given issue or pull request.

 */
export interface LabeledEvent extends Node {
  actor?: Actor
  createdAt: DateTime
  id: ID_Output
  label: Label
  labelable: Labelable
}

/*
 * A group of emoji reactions to a particular piece of content.

 */
export interface ReactionGroup {
  content: ReactionContent
  createdAt?: DateTime
  subject: Reactable
  users: ReactingUserConnection
  viewerHasReacted: Boolean
}

/*
 * Represents a 'milestoned' event on a given issue or pull request.

 */
export interface MilestonedEvent extends Node {
  actor?: Actor
  createdAt: DateTime
  id: ID_Output
  milestoneTitle: String
  subject: MilestoneItem
}

/*
 * The connection type for Repository.

 */
export interface StarredRepositoryConnection {
  edges?: StarredRepositoryEdge[]
  nodes?: Repository[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * Represents a 'demilestoned' event on a given issue or pull request.

 */
export interface DemilestonedEvent extends Node {
  actor?: Actor
  createdAt: DateTime
  id: ID_Output
  milestoneTitle: String
  subject: MilestoneItem
}

/*
 * Represents a starred repository.

 */
export interface StarredRepositoryEdge {
  cursor: String
  node: Repository
  starredAt: DateTime
}

/*
 * Represents a 'removed_from_project' event on a given issue or pull request.

 */
export interface RemovedFromProjectEvent extends Node {
  actor?: Actor
  createdAt: DateTime
  databaseId?: Int
  id: ID_Output
}

/*
 * The connection type for IssueTimelineItem.

 */
export interface IssueTimelineConnection {
  edges?: IssueTimelineItemEdge[]
  nodes?: IssueTimelineItem[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * Represents an 'unlocked' event on a given issue or pull request.

 */
export interface UnlockedEvent extends Node {
  actor?: Actor
  createdAt: DateTime
  id: ID_Output
  lockable: Lockable
}

/*
 * An edge in a connection.

 */
export interface IssueTimelineItemEdge {
  cursor: String
  node?: IssueTimelineItem
}

/*
 * Represents triggered deployment instance.

 */
export interface Deployment extends Node {
  commit?: Commit
  createdAt: DateTime
  creator?: Actor
  databaseId?: Int
  environment?: String
  id: ID_Output
  latestStatus?: DeploymentStatus
  payload?: String
  repository: Repository
  state?: DeploymentState
  statuses?: DeploymentStatusConnection
}

/*
 * Represents a 'converted_note_to_issue' event on a given issue or pull request.

 */
export interface ConvertedNoteToIssueEvent extends Node {
  actor?: Actor
  createdAt: DateTime
  databaseId?: Int
  id: ID_Output
}

/*
 * Represents an individual commit status context

 */
export interface StatusContext extends Node {
  commit?: Commit
  context: String
  createdAt: DateTime
  creator?: Actor
  description?: String
  id: ID_Output
  state: StatusState
  targetUrl?: URI
}

/*
 * An edit on user content

 */
export interface UserContentEdit extends Node {
  createdAt: DateTime
  deletedAt?: DateTime
  deletedBy?: Actor
  diff?: String
  editor?: Actor
  id: ID_Output
  updatedAt: DateTime
}

/*
 * The connection type for DeploymentStatus.

 */
export interface DeploymentStatusConnection {
  edges?: DeploymentStatusEdge[]
  nodes?: DeploymentStatus[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * An Identity Provider configured to provision SAML and SCIM identities for Organizations

 */
export interface OrganizationIdentityProvider extends Node {
  digestMethod?: URI
  externalIdentities: ExternalIdentityConnection
  id: ID_Output
  idpCertificate?: X509Certificate
  issuer?: String
  organization?: Organization
  signatureMethod?: URI
  ssoUrl?: URI
}

/*
 * Represents a 'head_ref_deleted' event on a given pull request.

 */
export interface HeadRefDeletedEvent extends Node {
  actor?: Actor
  createdAt: DateTime
  headRef?: Ref
  headRefName: String
  id: ID_Output
  pullRequest: PullRequest
}

/*
 * The connection type for ExternalIdentity.

 */
export interface ExternalIdentityConnection {
  edges?: ExternalIdentityEdge[]
  nodes?: ExternalIdentity[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * Represents a 'head_ref_force_pushed' event on a given pull request.

 */
export interface HeadRefForcePushedEvent extends Node {
  actor?: Actor
  afterCommit?: Commit
  beforeCommit?: Commit
  createdAt: DateTime
  id: ID_Output
  pullRequest: PullRequest
  ref?: Ref
}

/*
 * An edge in a connection.

 */
export interface ExternalIdentityEdge {
  cursor: String
  node?: ExternalIdentity
}

/*
 * Represents an 'review_requested' event on a given pull request.

 */
export interface ReviewRequestedEvent extends Node {
  actor?: Actor
  createdAt: DateTime
  id: ID_Output
  pullRequest: PullRequest
  requestedReviewer?: RequestedReviewer
  subject?: User
}

/*
 * An external identity provisioned by SAML SSO or SCIM.

 */
export interface ExternalIdentity extends Node {
  guid: String
  id: ID_Output
  organizationInvitation?: OrganizationInvitation
  samlIdentity?: ExternalIdentitySamlAttributes
  scimIdentity?: ExternalIdentityScimAttributes
  user?: User
}

/*
 * Represents a 'review_dismissed' event on a given issue or pull request.

 */
export interface ReviewDismissedEvent extends Node, UniformResourceLocatable {
  actor?: Actor
  createdAt: DateTime
  databaseId?: Int
  id: ID_Output
  message: String
  messageHtml: HTML
  previousReviewState: PullRequestReviewState
  pullRequest: PullRequest
  pullRequestCommit?: PullRequestCommit
  resourcePath: URI
  review?: PullRequestReview
  url: URI
}

/*
 * SAML attributes for the External Identity

 */
export interface ExternalIdentitySamlAttributes {
  nameId?: String
}

/*
 * An edge in a connection.

 */
export interface DeployKeyEdge {
  cursor: String
  node?: DeployKey
}

/*
 * SCIM attributes for the External Identity

 */
export interface ExternalIdentityScimAttributes {
  username?: String
}

/*
 * The connection type for Deployment.

 */
export interface DeploymentConnection {
  edges?: DeploymentEdge[]
  nodes?: Deployment[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * Represents a 'comment_deleted' event on a given issue or pull request.

 */
export interface CommentDeletedEvent extends Node {
  actor?: Actor
  createdAt: DateTime
  databaseId?: Int
  id: ID_Output
}

/*
 * A respository's open source license

 */
export interface License {
  body: String
  conditions: LicenseRule[]
  description?: String
  featured: Boolean
  hidden: Boolean
  id: ID_Output
  implementation?: String
  key: String
  limitations: LicenseRule[]
  name: String
  nickname?: String
  permissions: LicenseRule[]
  spdxId?: String
  url?: URI
}

/*
 * An edge in a connection.

 */
export interface UserContentEditEdge {
  cursor: String
  node?: UserContentEdit
}

/*
 * An edge in a connection.

 */
export interface CommitEdge {
  cursor: String
  node?: Commit
}

/*
 * Represents the client's rate limit.

 */
export interface RateLimit {
  cost: Int
  limit: Int
  nodeCount: Int
  remaining: Int
  resetAt: DateTime
}

/*
 * Represents the language of a repository.

 */
export interface LanguageEdge {
  cursor: String
  node: Language
  size: Int
}

/*
 * A list of edits to content.

 */
export interface UserContentEditConnection {
  edges?: UserContentEditEdge[]
  nodes?: UserContentEdit[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * The connection type for Commit.

 */
export interface CommitHistoryConnection {
  edges?: CommitEdge[]
  nodes?: Commit[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * A list of results that matched against a search query.

 */
export interface SearchResultItemConnection {
  codeCount: Int
  edges?: SearchResultItemEdge[]
  issueCount: Int
  nodes?: SearchResultItem[]
  pageInfo: PageInfo
  repositoryCount: Int
  userCount: Int
  wikiCount: Int
}

/*
 * The connection type for Milestone.

 */
export interface MilestoneConnection {
  edges?: MilestoneEdge[]
  nodes?: Milestone[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * An edge in a connection.

 */
export interface SearchResultItemEdge {
  cursor: String
  node?: SearchResultItem
  textMatches?: TextMatch[]
}

/*
 * Represents a Git blame.

 */
export interface Blame {
  ranges: BlameRange[]
}

/*
 * A special type of user which takes actions on behalf of GitHub Apps.

 */
export interface Bot extends Node, Actor, UniformResourceLocatable {
  avatarUrl: URI
  createdAt: DateTime
  databaseId?: Int
  id: ID_Output
  login: String
  resourcePath: URI
  updatedAt: DateTime
  url: URI
}

/*
 * Represents an actor in a Git commit (ie. an author or committer).

 */
export interface GitActor {
  avatarUrl: URI
  date?: GitTimestamp
  email?: String
  name?: String
  user?: User
}

/*
 * A text match within a search result.

 */
export interface TextMatch {
  fragment: String
  highlights: TextMatchHighlight[]
  property: String
}

/*
 * An edge in a connection.

 */
export interface ProjectEdge {
  cursor: String
  node?: Project
}

/*
 * Represents a single highlight in a search result match.

 */
export interface TextMatchHighlight {
  beginIndice: Int
  endIndice: Int
  text: String
}

/*
 * An edge in a connection.

 */
export interface ProtectedBranchEdge {
  cursor: String
  node?: ProtectedBranch
}

/*
 * Represents a comment on a given Commit.

 */
export interface CommitComment extends Node, Comment, Deletable, Updatable, UpdatableComment, Reactable, RepositoryNode {
  author?: Actor
  authorAssociation: CommentAuthorAssociation
  body: String
  bodyHTML: HTML
  bodyText: String
  commit?: Commit
  createdAt: DateTime
  createdViaEmail: Boolean
  databaseId?: Int
  editor?: Actor
  id: ID_Output
  lastEditedAt?: DateTime
  path?: String
  position?: Int
  publishedAt?: DateTime
  reactionGroups?: ReactionGroup[]
  reactions: ReactionConnection
  repository: Repository
  resourcePath: URI
  updatedAt: DateTime
  url: URI
  userContentEdits?: UserContentEditConnection
  viewerCanDelete: Boolean
  viewerCanReact: Boolean
  viewerCanUpdate: Boolean
  viewerCannotUpdateReasons: CommentCannotUpdateReason[]
  viewerDidAuthor: Boolean
}

/*
 * The connection type for PushAllowance.

 */
export interface PushAllowanceConnection {
  edges?: PushAllowanceEdge[]
  nodes?: PushAllowance[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * Autogenerated return type of AcceptTopicSuggestion

 */
export interface AcceptTopicSuggestionPayload {
  clientMutationId?: String
  topic: Topic
}

/*
 * A team or user who has the ability to push to a protected branch.

 */
export interface PushAllowance extends Node {
  actor?: PushAllowanceActor
  id: ID_Output
  protectedBranch: ProtectedBranch
}

/*
 * An edge in a connection.

 */
export interface CommitCommentEdge {
  cursor: String
  node?: CommitComment
}

/*
 * The connection type for ReviewDismissalAllowance.

 */
export interface ReviewDismissalAllowanceConnection {
  edges?: ReviewDismissalAllowanceEdge[]
  nodes?: ReviewDismissalAllowance[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * Autogenerated return type of AddComment

 */
export interface AddCommentPayload {
  clientMutationId?: String
  commentEdge: IssueCommentEdge
  subject: Node
  timelineEdge: IssueTimelineItemEdge
}

/*
 * A team or user who has the ability to dismiss a review on a protected branch.

 */
export interface ReviewDismissalAllowance extends Node {
  actor?: ReviewDismissalAllowanceActor
  id: ID_Output
  protectedBranch: ProtectedBranch
}

/*
 * The connection type for CommitComment.

 */
export interface CommitCommentConnection {
  edges?: CommitCommentEdge[]
  nodes?: CommitComment[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * Represents a GPG signature on a Commit or Tag.

 */
export interface GpgSignature extends GitSignature {
  email: String
  isValid: Boolean
  keyId?: String
  payload: String
  signature: String
  signer?: User
  state: GitSignatureState
}

/*
 * Autogenerated return type of AddProjectCard

 */
export interface AddProjectCardPayload {
  cardEdge: ProjectCardEdge
  clientMutationId?: String
  projectColumn: Project
}

/*
 * The connection type for Ref.

 */
export interface RefConnection {
  edges?: RefEdge[]
  nodes?: Ref[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * Represents a user who is a collaborator of a repository.

 */
export interface RepositoryCollaboratorEdge {
  cursor: String
  node: User
  permission: RepositoryPermission
}

/*
 * A release contains the content for a release.

 */
export interface Release extends Node, UniformResourceLocatable {
  author?: User
  createdAt: DateTime
  description?: String
  id: ID_Output
  isDraft: Boolean
  isPrerelease: Boolean
  name?: String
  publishedAt?: DateTime
  releaseAssets: ReleaseAssetConnection
  resourcePath: URI
  tag?: Ref
  updatedAt: DateTime
  url: URI
}

/*
 * Autogenerated return type of AddProjectColumn

 */
export interface AddProjectColumnPayload {
  clientMutationId?: String
  columnEdge: ProjectColumnEdge
  project: Project
}

/*
 * The connection type for ReviewRequest.

 */
export interface ReviewRequestConnection {
  edges?: ReviewRequestEdge[]
  nodes?: ReviewRequest[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * The connection type for User.

 */
export interface RepositoryCollaboratorConnection {
  edges?: RepositoryCollaboratorEdge[]
  nodes?: User[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * A team of users in an organization.

 */
export interface Team extends Node, Subscribable {
  ancestors: TeamConnection
  avatarUrl?: URI
  childTeams: TeamConnection
  combinedSlug: String
  createdAt: DateTime
  description?: String
  editTeamResourcePath: URI
  editTeamUrl: URI
  id: ID_Output
  invitations?: OrganizationInvitationConnection
  members: TeamMemberConnection
  membersResourcePath: URI
  membersUrl: URI
  name: String
  newTeamResourcePath: URI
  newTeamUrl: URI
  organization: Organization
  parentTeam?: Team
  privacy: TeamPrivacy
  repositories: TeamRepositoryConnection
  repositoriesResourcePath: URI
  repositoriesUrl: URI
  resourcePath: URI
  slug: String
  teamsResourcePath: URI
  teamsUrl: URI
  updatedAt: DateTime
  url: URI
  viewerCanAdminister: Boolean
  viewerCanSubscribe: Boolean
  viewerSubscription: SubscriptionState
}

/*
 * Represents a user that's starred a repository.

 */
export interface StargazerEdge {
  cursor: String
  node: User
  starredAt: DateTime
}

/*
 * An edge in a connection.

 */
export interface IssueEdge {
  cursor: String
  node?: Issue
}

/*
 * The connection type for User.

 */
export interface StargazerConnection {
  edges?: StargazerEdge[]
  nodes?: User[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * The connection type for Issue.

 */
export interface IssueConnection {
  edges?: IssueEdge[]
  nodes?: Issue[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * Autogenerated return type of AddPullRequestReview

 */
export interface AddPullRequestReviewPayload {
  clientMutationId?: String
  pullRequestReview: PullRequestReview
  reviewEdge: PullRequestReviewEdge
}

/*
 * A repository pull request.

 */
export interface PullRequest extends Node, Assignable, Closable, Comment, Updatable, UpdatableComment, Labelable, Lockable, Reactable, RepositoryNode, Subscribable, UniformResourceLocatable {
  activeLockReason?: LockReason
  additions: Int
  assignees: UserConnection
  author?: Actor
  authorAssociation: CommentAuthorAssociation
  baseRef?: Ref
  baseRefName: String
  baseRefOid: GitObjectID
  body: String
  bodyHTML: HTML
  bodyText: String
  changedFiles: Int
  closed: Boolean
  closedAt?: DateTime
  comments: IssueCommentConnection
  commits: PullRequestCommitConnection
  createdAt: DateTime
  createdViaEmail: Boolean
  databaseId?: Int
  deletions: Int
  editor?: Actor
  headRef?: Ref
  headRefName: String
  headRefOid: GitObjectID
  headRepository?: Repository
  headRepositoryOwner?: RepositoryOwner
  id: ID_Output
  isCrossRepository: Boolean
  labels?: LabelConnection
  lastEditedAt?: DateTime
  locked: Boolean
  mergeCommit?: Commit
  mergeable: MergeableState
  merged: Boolean
  mergedAt?: DateTime
  milestone?: Milestone
  number: Int
  participants: UserConnection
  potentialMergeCommit?: Commit
  projectCards: ProjectCardConnection
  publishedAt?: DateTime
  reactionGroups?: ReactionGroup[]
  reactions: ReactionConnection
  repository: Repository
  resourcePath: URI
  revertResourcePath: URI
  revertUrl: URI
  reviewRequests?: ReviewRequestConnection
  reviews?: PullRequestReviewConnection
  state: PullRequestState
  suggestedReviewers: SuggestedReviewer[]
  timeline: PullRequestTimelineConnection
  title: String
  updatedAt: DateTime
  url: URI
  userContentEdits?: UserContentEditConnection
  viewerCanReact: Boolean
  viewerCanSubscribe: Boolean
  viewerCanUpdate: Boolean
  viewerCannotUpdateReasons: CommentCannotUpdateReason[]
  viewerDidAuthor: Boolean
  viewerSubscription: SubscriptionState
}

/*
 * A repository contains the content for a project.

 */
export interface Repository extends Node, ProjectOwner, Subscribable, Starrable, UniformResourceLocatable, RepositoryInfo {
  assignableUsers: UserConnection
  codeOfConduct?: CodeOfConduct
  collaborators?: RepositoryCollaboratorConnection
  commitComments: CommitCommentConnection
  createdAt: DateTime
  databaseId?: Int
  defaultBranchRef?: Ref
  deployKeys: DeployKeyConnection
  deployments: DeploymentConnection
  description?: String
  descriptionHTML: HTML
  diskUsage?: Int
  forkCount: Int
  forks: RepositoryConnection
  hasIssuesEnabled: Boolean
  hasWikiEnabled: Boolean
  homepageUrl?: URI
  id: ID_Output
  isArchived: Boolean
  isFork: Boolean
  isLocked: Boolean
  isMirror: Boolean
  isPrivate: Boolean
  issue?: Issue
  issueOrPullRequest?: IssueOrPullRequest
  issues: IssueConnection
  label?: Label
  labels?: LabelConnection
  languages?: LanguageConnection
  license?: String
  licenseInfo?: License
  lockReason?: RepositoryLockReason
  mentionableUsers: UserConnection
  mergeCommitAllowed: Boolean
  milestone?: Milestone
  milestones?: MilestoneConnection
  mirrorUrl?: URI
  name: String
  nameWithOwner: String
  object?: GitObject
  owner: RepositoryOwner
  parent?: Repository
  primaryLanguage?: Language
  project?: Project
  projects: ProjectConnection
  projectsResourcePath: URI
  projectsUrl: URI
  protectedBranches: ProtectedBranchConnection
  pullRequest?: PullRequest
  pullRequests: PullRequestConnection
  pushedAt?: DateTime
  rebaseMergeAllowed: Boolean
  ref?: Ref
  refs?: RefConnection
  release?: Release
  releases: ReleaseConnection
  repositoryTopics: RepositoryTopicConnection
  resourcePath: URI
  shortDescriptionHTML: HTML
  squashMergeAllowed: Boolean
  sshUrl: GitSSHRemote
  stargazers: StargazerConnection
  updatedAt: DateTime
  url: URI
  viewerCanAdminister: Boolean
  viewerCanCreateProjects: Boolean
  viewerCanSubscribe: Boolean
  viewerCanUpdateTopics: Boolean
  viewerHasStarred: Boolean
  viewerPermission?: RepositoryPermission
  viewerSubscription: SubscriptionState
  watchers: UserConnection
}

/*
 * The connection type for PullRequest.

 */
export interface PullRequestConnection {
  edges?: PullRequestEdge[]
  nodes?: PullRequest[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * Autogenerated return type of AddPullRequestReviewComment

 */
export interface AddPullRequestReviewCommentPayload {
  clientMutationId?: String
  comment: PullRequestReviewComment
  commentEdge: PullRequestReviewCommentEdge
}

/*
 * Represents a team repository.

 */
export interface TeamRepositoryEdge {
  cursor: String
  node: Repository
  permission: RepositoryPermission
}

/*
 * An edge in a connection.

 */
export interface RepositoryEdge {
  cursor: String
  node?: Repository
}

/*
 * A review object for a given pull request.

 */
export interface PullRequestReview extends Node, Comment, Deletable, Updatable, UpdatableComment, RepositoryNode {
  author?: Actor
  authorAssociation: CommentAuthorAssociation
  body: String
  bodyHTML: HTML
  bodyText: String
  comments: PullRequestReviewCommentConnection
  commit?: Commit
  createdAt: DateTime
  createdViaEmail: Boolean
  databaseId?: Int
  editor?: Actor
  id: ID_Output
  lastEditedAt?: DateTime
  publishedAt?: DateTime
  pullRequest: PullRequest
  repository: Repository
  resourcePath: URI
  state: PullRequestReviewState
  submittedAt?: DateTime
  updatedAt: DateTime
  url: URI
  userContentEdits?: UserContentEditConnection
  viewerCanDelete: Boolean
  viewerCanUpdate: Boolean
  viewerCannotUpdateReasons: CommentCannotUpdateReason[]
  viewerDidAuthor: Boolean
}

/*
 * Autogenerated return type of AddReaction

 */
export interface AddReactionPayload {
  clientMutationId?: String
  reaction: Reaction
  subject: Reactable
}

/*
 * A suggestion to review a pull request based on a user's commit history and review comments.

 */
export interface SuggestedReviewer {
  isAuthor: Boolean
  isCommenter: Boolean
  reviewer: User
}

/*
 * A list of repositories owned by the subject.

 */
export interface RepositoryConnection {
  edges?: RepositoryEdge[]
  nodes?: Repository[]
  pageInfo: PageInfo
  totalCount: Int
  totalDiskUsage: Int
}

/*
 * A thread of comments on a commit.

 */
export interface CommitCommentThread extends Node, RepositoryNode {
  comments: CommitCommentConnection
  commit: Commit
  id: ID_Output
  path?: String
  position?: Int
  repository: Repository
}

/*
 * Autogenerated return type of AddStar

 */
export interface AddStarPayload {
  clientMutationId?: String
  starrable: Starrable
}

/*
 * Represents a 'reopened' event on any 'Closable'.

 */
export interface ReopenedEvent extends Node {
  actor?: Actor
  closable: Closable
  createdAt: DateTime
  id: ID_Output
}

/*
 * A user is an individual's account on GitHub that owns repositories and can make new content.

 */
export interface User extends Node, Actor, RepositoryOwner, UniformResourceLocatable {
  avatarUrl: URI
  bio?: String
  bioHTML: HTML
  commitComments: CommitCommentConnection
  company?: String
  companyHTML: HTML
  contributedRepositories: RepositoryConnection
  createdAt: DateTime
  databaseId?: Int
  email: String
  followers: FollowerConnection
  following: FollowingConnection
  gist?: Gist
  gistComments: GistCommentConnection
  gists: GistConnection
  id: ID_Output
  isBountyHunter: Boolean
  isCampusExpert: Boolean
  isDeveloperProgramMember: Boolean
  isEmployee: Boolean
  isHireable: Boolean
  isSiteAdmin: Boolean
  isViewer: Boolean
  issueComments: IssueCommentConnection
  issues: IssueConnection
  location?: String
  login: String
  name?: String
  organization?: Organization
  organizations: OrganizationConnection
  pinnedRepositories: RepositoryConnection
  publicKeys: PublicKeyConnection
  pullRequests: PullRequestConnection
  repositories: RepositoryConnection
  repositoriesContributedTo: RepositoryConnection
  repository?: Repository
  resourcePath: URI
  starredRepositories: StarredRepositoryConnection
  updatedAt: DateTime
  url: URI
  viewerCanFollow: Boolean
  viewerIsFollowing: Boolean
  watching: RepositoryConnection
  websiteUrl?: URI
}

/*
 * Represents a 'referenced' event on a given 'ReferencedSubject'.

 */
export interface ReferencedEvent extends Node {
  actor?: Actor
  commit?: Commit
  commitRepository: Repository
  createdAt: DateTime
  id: ID_Output
  isCrossReference: Boolean
  isCrossRepository: Boolean
  isDirectReference: Boolean
  subject: ReferencedSubject
}

/*
 * Autogenerated return type of CreateProject

 */
export interface CreateProjectPayload {
  clientMutationId?: String
  project: Project
}

/*
 * Represents an 'unassigned' event on any assignable object.

 */
export interface UnassignedEvent extends Node {
  actor?: Actor
  assignable: Assignable
  createdAt: DateTime
  id: ID_Output
  user?: User
}

/*
 * An edge in a connection.

 */
export interface UserEdge {
  cursor: String
  node?: User
}

/*
 * An invitation for a user to be added to a repository.

 */
export interface RepositoryInvitation extends Node {
  id: ID_Output
  invitee: User
  inviter: User
  permission: RepositoryPermission
  repository?: RepositoryInfo
}

/*
 * The connection type for User.

 */
export interface UserConnection {
  edges?: UserEdge[]
  nodes?: User[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * Represents a 'locked' event on a given issue or pull request.

 */
export interface LockedEvent extends Node {
  actor?: Actor
  createdAt: DateTime
  id: ID_Output
  lockable: Lockable
}

/*
 * Autogenerated return type of DeclineTopicSuggestion

 */
export interface DeclineTopicSuggestionPayload {
  clientMutationId?: String
  topic: Topic
}

/*
 * The Code of Conduct for a repository

 */
export interface CodeOfConduct {
  body?: String
  key: String
  name: String
  url?: URI
}

/*
 * An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.

 */
export interface Issue extends Node, Assignable, Closable, Comment, Updatable, UpdatableComment, Labelable, Lockable, Reactable, RepositoryNode, Subscribable, UniformResourceLocatable {
  activeLockReason?: LockReason
  assignees: UserConnection
  author?: Actor
  authorAssociation: CommentAuthorAssociation
  body: String
  bodyHTML: HTML
  bodyText: String
  closed: Boolean
  closedAt?: DateTime
  comments: IssueCommentConnection
  createdAt: DateTime
  createdViaEmail: Boolean
  databaseId?: Int
  editor?: Actor
  id: ID_Output
  labels?: LabelConnection
  lastEditedAt?: DateTime
  locked: Boolean
  milestone?: Milestone
  number: Int
  participants: UserConnection
  projectCards: ProjectCardConnection
  publishedAt?: DateTime
  reactionGroups?: ReactionGroup[]
  reactions: ReactionConnection
  repository: Repository
  resourcePath: URI
  state: IssueState
  timeline: IssueTimelineConnection
  title: String
  updatedAt: DateTime
  url: URI
  userContentEdits?: UserContentEditConnection
  viewerCanReact: Boolean
  viewerCanSubscribe: Boolean
  viewerCanUpdate: Boolean
  viewerCannotUpdateReasons: CommentCannotUpdateReason[]
  viewerDidAuthor: Boolean
  viewerSubscription: SubscriptionState
}

/*
 * An edge in a connection.

 */
export interface DeploymentStatusEdge {
  cursor: String
  node?: DeploymentStatus
}

/*
 * Autogenerated return type of DeleteProject

 */
export interface DeleteProjectPayload {
  clientMutationId?: String
  owner: ProjectOwner
}

/*
 * Represents a 'base_ref_force_pushed' event on a given pull request.

 */
export interface BaseRefForcePushedEvent extends Node {
  actor?: Actor
  afterCommit?: Commit
  beforeCommit?: Commit
  createdAt: DateTime
  id: ID_Output
  pullRequest: PullRequest
  ref?: Ref
}

/*
 * Represents a Git blob.

 */
export interface Blob extends Node, GitObject {
  abbreviatedOid: String
  byteSize: Int
  commitResourcePath: URI
  commitUrl: URI
  id: ID_Output
  isBinary: Boolean
  isTruncated: Boolean
  oid: GitObjectID
  repository: Repository
  text?: String
}

/*
 * The connection type for DeployKey.

 */
export interface DeployKeyConnection {
  edges?: DeployKeyEdge[]
  nodes?: DeployKey[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * Autogenerated return type of DeleteProjectCard

 */
export interface DeleteProjectCardPayload {
  clientMutationId?: String
  column: ProjectColumn
  deletedCardId: ID_Output
}

/*
 * An edge in a connection.

 */
export interface DeploymentEdge {
  cursor: String
  node?: Deployment
}

/*
 * A card in a project.

 */
export interface ProjectCard extends Node {
  column?: ProjectColumn
  content?: ProjectCardItem
  createdAt: DateTime
  creator?: Actor
  databaseId?: Int
  id: ID_Output
  note?: String
  project: Project
  projectColumn: ProjectColumn
  resourcePath: URI
  state?: ProjectCardState
  updatedAt: DateTime
  url: URI
}

/*
 * A list of languages associated with the parent.

 */
export interface LanguageConnection {
  edges?: LanguageEdge[]
  nodes?: Language[]
  pageInfo: PageInfo
  totalCount: Int
  totalSize: Int
}

/*
 * Autogenerated return type of DeleteProjectColumn

 */
export interface DeleteProjectColumnPayload {
  clientMutationId?: String
  deletedColumnId: ID_Output
  project: Project
}

/*
 * Represents a range of information from a Git blame.

 */
export interface BlameRange {
  age: Int
  commit: Commit
  endingLine: Int
  startingLine: Int
}

/*
 * An edge in a connection.

 */
export interface ProjectCardEdge {
  cursor: String
  node?: ProjectCard
}

/*
 * Represents a 'moved_columns_in_project' event on a given issue or pull request.

 */
export interface MovedColumnsInProjectEvent extends Node {
  actor?: Actor
  createdAt: DateTime
  databaseId?: Int
  id: ID_Output
}

/*
 * Autogenerated return type of DeletePullRequestReview

 */
export interface DeletePullRequestReviewPayload {
  clientMutationId?: String
  pullRequestReview: PullRequestReview
}

/*
 * The connection type for ProtectedBranch.

 */
export interface ProtectedBranchConnection {
  edges?: ProtectedBranchEdge[]
  nodes?: ProtectedBranch[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * The connection type for ProjectCard.

 */
export interface ProjectCardConnection {
  edges?: ProjectCardEdge[]
  nodes?: ProjectCard[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * An edge in a connection.

 */
export interface PushAllowanceEdge {
  cursor: String
  node?: PushAllowance
}

/*
 * Autogenerated return type of DismissPullRequestReview

 */
export interface DismissPullRequestReviewPayload {
  clientMutationId?: String
  pullRequestReview: PullRequestReview
}

/*
 * An edge in a connection.

 */
export interface ReviewDismissalAllowanceEdge {
  cursor: String
  node?: ReviewDismissalAllowance
}

/*
 * A column inside a project.

 */
export interface ProjectColumn extends Node {
  cards: ProjectCardConnection
  createdAt: DateTime
  databaseId?: Int
  id: ID_Output
  name: String
  project: Project
  resourcePath: URI
  updatedAt: DateTime
  url: URI
}

/*
 * Represents a Git commit.

 */
export interface Commit extends Node, GitObject, Subscribable {
  abbreviatedOid: String
  additions: Int
  author?: GitActor
  authoredByCommitter: Boolean
  authoredDate: DateTime
  blame: Blame
  changedFiles: Int
  comments: CommitCommentConnection
  commitResourcePath: URI
  commitUrl: URI
  committedDate: DateTime
  committedViaWeb: Boolean
  committer?: GitActor
  deletions: Int
  history: CommitHistoryConnection
  id: ID_Output
  message: String
  messageBody: String
  messageBodyHTML: HTML
  messageHeadline: String
  messageHeadlineHTML: HTML
  oid: GitObjectID
  parents: CommitConnection
  pushedDate?: DateTime
  repository: Repository
  resourcePath: URI
  signature?: GitSignature
  status?: Status
  tarballUrl: URI
  tree: Tree
  treeResourcePath: URI
  treeUrl: URI
  url: URI
  viewerCanSubscribe: Boolean
  viewerSubscription: SubscriptionState
  zipballUrl: URI
}

/*
 * Autogenerated return type of LockLockable

 */
export interface LockLockablePayload {
  clientMutationId?: String
  lockedRecord?: Lockable
}

/*
 * Represents a Milestone object on a given repository.

 */
export interface Milestone extends Node, Closable, UniformResourceLocatable {
  closed: Boolean
  closedAt?: DateTime
  createdAt: DateTime
  creator?: Actor
  description?: String
  dueOn?: DateTime
  id: ID_Output
  issues: IssueConnection
  number: Int
  pullRequests: PullRequestConnection
  repository: Repository
  resourcePath: URI
  state: MilestoneState
  title: String
  updatedAt: DateTime
  url: URI
}

/*
 * An edge in a connection.

 */
export interface ProjectColumnEdge {
  cursor: String
  node?: ProjectColumn
}

/*
 * An edge in a connection.

 */
export interface TeamEdge {
  cursor: String
  node?: Team
}

/*
 * Autogenerated return type of MoveProjectCard

 */
export interface MoveProjectCardPayload {
  cardEdge: ProjectCardEdge
  clientMutationId?: String
}

/*
 * An edge in a connection.

 */
export interface LabelEdge {
  cursor: String
  node?: Label
}

/*
 * The connection type for ProjectColumn.

 */
export interface ProjectColumnConnection {
  edges?: ProjectColumnEdge[]
  nodes?: ProjectColumn[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * Represents a Git tree entry.

 */
export interface TreeEntry {
  mode: Int
  name: String
  object?: GitObject
  oid: GitObjectID
  repository: Repository
  type: String
}

/*
 * Autogenerated return type of MoveProjectColumn

 */
export interface MoveProjectColumnPayload {
  clientMutationId?: String
  columnEdge: ProjectColumnEdge
}

/*
 * An edge in a connection.

 */
export interface PullRequestReviewCommentEdge {
  cursor: String
  node?: PullRequestReviewComment
}

/*
 * Represents a 'base_ref_changed' event on a given issue or pull request.

 */
export interface BaseRefChangedEvent extends Node {
  actor?: Actor
  createdAt: DateTime
  databaseId?: Int
  id: ID_Output
}

/*
 * Represents a 'closed' event on any 'Closable'.

 */
export interface ClosedEvent extends Node {
  actor?: Actor
  closable: Closable
  closer?: Closer
  commit?: Commit
  createdAt: DateTime
  id: ID_Output
}

/*
 * Autogenerated return type of RemoveOutsideCollaborator

 */
export interface RemoveOutsideCollaboratorPayload {
  clientMutationId?: String
  removedUser: User
}

/*
 * Represents a mention made by one issue or pull request to another.

 */
export interface CrossReferencedEvent extends Node, UniformResourceLocatable {
  actor?: Actor
  createdAt: DateTime
  id: ID_Output
  isCrossRepository: Boolean
  referencedAt: DateTime
  resourcePath: URI
  source: ReferencedSubject
  target: ReferencedSubject
  url: URI
  willCloseTarget: Boolean
}

/*
 * Projects manage issues, pull requests and notes within a project owner.

 */
export interface Project extends Node, Closable, Updatable {
  body?: String
  bodyHTML: HTML
  closed: Boolean
  closedAt?: DateTime
  columns: ProjectColumnConnection
  createdAt: DateTime
  creator?: Actor
  databaseId?: Int
  id: ID_Output
  name: String
  number: Int
  owner: ProjectOwner
  pendingCards: ProjectCardConnection
  resourcePath: URI
  state: ProjectState
  updatedAt: DateTime
  url: URI
  viewerCanUpdate: Boolean
}

/*
 * Represents a 'renamed' event on a given issue or pull request

 */
export interface RenamedTitleEvent extends Node {
  actor?: Actor
  createdAt: DateTime
  currentTitle: String
  id: ID_Output
  previousTitle: String
  subject: RenamedTitleSubject
}

/*
 * Autogenerated return type of RemoveReaction

 */
export interface RemoveReactionPayload {
  clientMutationId?: String
  reaction: Reaction
  subject: Reactable
}

/*
 * Represents a commit status.

 */
export interface Status extends Node {
  commit?: Commit
  context?: StatusContext
  contexts: StatusContext[]
  id: ID_Output
  state: StatusState
}

/*
 * An account on GitHub, with one or more owners, that has repositories, members and teams.

 */
export interface Organization extends Node, Actor, ProjectOwner, RepositoryOwner, UniformResourceLocatable {
  avatarUrl: URI
  databaseId?: Int
  description?: String
  email?: String
  id: ID_Output
  location?: String
  login: String
  members: UserConnection
  name?: String
  newTeamResourcePath: URI
  newTeamUrl: URI
  organizationBillingEmail?: String
  pinnedRepositories: RepositoryConnection
  project?: Project
  projects: ProjectConnection
  projectsResourcePath: URI
  projectsUrl: URI
  repositories: RepositoryConnection
  repository?: Repository
  resourcePath: URI
  samlIdentityProvider?: OrganizationIdentityProvider
  team?: Team
  teams: TeamConnection
  teamsResourcePath: URI
  teamsUrl: URI
  url: URI
  viewerCanAdminister: Boolean
  viewerCanCreateProjects: Boolean
  viewerCanCreateRepositories: Boolean
  viewerCanCreateTeams: Boolean
  viewerIsAMember: Boolean
  websiteUrl?: URI
}

/*
 * Represents an 'review_request_removed' event on a given pull request.

 */
export interface ReviewRequestRemovedEvent extends Node {
  actor?: Actor
  createdAt: DateTime
  id: ID_Output
  pullRequest: PullRequest
  requestedReviewer?: RequestedReviewer
  subject?: User
}

/*
 * Autogenerated return type of RemoveStar

 */
export interface RemoveStarPayload {
  clientMutationId?: String
  starrable: Starrable
}

/*
 * The connection type for Commit.

 */
export interface CommitConnection {
  edges?: CommitEdge[]
  nodes?: Commit[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * Represents information about the GitHub instance.

 */
export interface GitHubMetadata {
  gitHubServicesSha: String
  gitIpAddresses?: String[]
  hookIpAddresses?: String[]
  importerIpAddresses?: String[]
  isPasswordAuthenticationVerifiable: Boolean
  pagesIpAddresses?: String[]
}

/*
 * An edge in a connection.

 */
export interface MilestoneEdge {
  cursor: String
  node?: Milestone
}

/*
 * Autogenerated return type of RequestReviews

 */
export interface RequestReviewsPayload {
  clientMutationId?: String
  pullRequest: PullRequest
  requestedReviewersEdge: UserEdge
}

/*
 * A repository protected branch.

 */
export interface ProtectedBranch extends Node {
  creator?: Actor
  hasDismissableStaleReviews: Boolean
  hasRequiredReviews: Boolean
  hasRequiredStatusChecks: Boolean
  hasRestrictedPushes: Boolean
  hasRestrictedReviewDismissals: Boolean
  hasStrictRequiredStatusChecks: Boolean
  id: ID_Output
  isAdminEnforced: Boolean
  name: String
  pushAllowances: PushAllowanceConnection
  repository: Repository
  requiredStatusCheckContexts?: String[]
  reviewDismissalAllowances: ReviewDismissalAllowanceConnection
}

/*
 * Information about pagination in a connection.

 */
export interface PageInfo {
  endCursor?: String
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor?: String
}

/*
 * Describes a License's conditions, permissions, and limitations

 */
export interface LicenseRule {
  description: String
  key: String
  label: String
}

/*
 * Autogenerated return type of SubmitPullRequestReview

 */
export interface SubmitPullRequestReviewPayload {
  clientMutationId?: String
  pullRequestReview: PullRequestReview
}

/*
 * A request for a user to review a pull request.

 */
export interface ReviewRequest extends Node {
  databaseId?: Int
  id: ID_Output
  pullRequest: PullRequest
  requestedReviewer?: RequestedReviewer
  reviewer?: User
}

/*
 * An edge in a connection.

 */
export interface MarketplaceListingEdge {
  cursor: String
  node?: MarketplaceListing
}

/*
 * The connection type for User.

 */
export interface TeamMemberConnection {
  edges?: TeamMemberEdge[]
  nodes?: User[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * Autogenerated return type of UpdateProject

 */
export interface UpdateProjectPayload {
  clientMutationId?: String
  project: Project
}

/*
 * An edge in a connection.

 */
export interface PullRequestTimelineItemEdge {
  cursor: String
  node?: PullRequestTimelineItem
}

/*
 * Look up Marketplace Listings

 */
export interface MarketplaceListingConnection {
  edges?: MarketplaceListingEdge[]
  nodes?: MarketplaceListing[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * Represents an 'unlabeled' event on a given issue or pull request.

 */
export interface UnlabeledEvent extends Node {
  actor?: Actor
  createdAt: DateTime
  id: ID_Output
  label: Label
  labelable: Labelable
}

/*
 * Autogenerated return type of UpdateProjectCard

 */
export interface UpdateProjectCardPayload {
  clientMutationId?: String
  projectCard: ProjectCard
}

/*
 * Represents a 'head_ref_restored' event on a given pull request.

 */
export interface HeadRefRestoredEvent extends Node {
  actor?: Actor
  createdAt: DateTime
  id: ID_Output
  pullRequest: PullRequest
}

/*
 * Represents a 'added_to_project' event on a given issue or pull request.

 */
export interface AddedToProjectEvent extends Node {
  actor?: Actor
  createdAt: DateTime
  databaseId?: Int
  id: ID_Output
}

/*
 * Represents a given language found in repositories.

 */
export interface Language extends Node {
  color?: String
  id: ID_Output
  name: String
}

/*
 * Autogenerated return type of UpdateProjectColumn

 */
export interface UpdateProjectColumnPayload {
  clientMutationId?: String
  projectColumn: ProjectColumn
}

/*
 * Represents a 'mentioned' event on a given issue or pull request.

 */
export interface MentionedEvent extends Node {
  actor?: Actor
  createdAt: DateTime
  databaseId?: Int
  id: ID_Output
}

/*
 * A listing in the GitHub integration marketplace.

 */
export interface MarketplaceListing extends Node {
  companyUrl?: URI
  configurationResourcePath: URI
  configurationUrl: URI
  documentationUrl?: URI
  extendedDescription?: String
  extendedDescriptionHTML: HTML
  fullDescription: String
  fullDescriptionHTML: HTML
  hasApprovalBeenRequested: Boolean
  hasPublishedFreeTrialPlans: Boolean
  hasTermsOfService: Boolean
  howItWorks?: String
  howItWorksHTML: HTML
  id: ID_Output
  installationUrl?: URI
  installedForViewer: Boolean
  isApproved: Boolean
  isDelisted: Boolean
  isDraft: Boolean
  isPaid: Boolean
  isRejected: Boolean
  logoBackgroundColor: String
  logoUrl?: URI
  name: String
  normalizedShortDescription: String
  pricingUrl?: URI
  primaryCategory: MarketplaceCategory
  privacyPolicyUrl: URI
  resourcePath: URI
  screenshotUrls: String[]
  secondaryCategory?: MarketplaceCategory
  shortDescription: String
  slug: String
  statusUrl?: URI
  supportEmail?: String
  supportUrl: URI
  termsOfServiceUrl?: URI
  url: URI
  viewerCanAddPlans: Boolean
  viewerCanApprove: Boolean
  viewerCanDelist: Boolean
  viewerCanEdit: Boolean
  viewerCanEditCategories: Boolean
  viewerCanEditPlans: Boolean
  viewerCanRedraft: Boolean
  viewerCanReject: Boolean
  viewerCanRequestApproval: Boolean
  viewerHasPurchased: Boolean
  viewerHasPurchasedForAllOrganizations: Boolean
  viewerIsListingAdmin: Boolean
}

/*
 * An edge in a connection.

 */
export interface OrganizationInvitationEdge {
  cursor: String
  node?: OrganizationInvitation
}

/*
 * Represents an 'unsubscribed' event on a given 'Subscribable'.

 */
export interface UnsubscribedEvent extends Node {
  actor?: Actor
  createdAt: DateTime
  id: ID_Output
  subscribable: Subscribable
}

/*
 * A public description of a Marketplace category.

 */
export interface MarketplaceCategory {
  description?: String
  howItWorks?: String
  name: String
  primaryListingCount: Int
  resourcePath: URI
  secondaryListingCount: Int
  slug: String
  url: URI
}

/*
 * Autogenerated return type of UpdatePullRequestReviewComment

 */
export interface UpdatePullRequestReviewCommentPayload {
  clientMutationId?: String
  pullRequestReviewComment: PullRequestReviewComment
}

/*
 * Autogenerated return type of UpdateTopics

 */
export interface UpdateTopicsPayload {
  clientMutationId?: String
  invalidTopicNames?: String[]
  repository: Repository
}

/*
 * Autogenerated return type of UpdatePullRequestReview

 */
export interface UpdatePullRequestReviewPayload {
  clientMutationId?: String
  pullRequestReview: PullRequestReview
}

/*
 * Represents a 'deployed' event on a given pull request.

 */
export interface DeployedEvent extends Node {
  actor?: Actor
  createdAt: DateTime
  databaseId?: Int
  deployment: Deployment
  id: ID_Output
  pullRequest: PullRequest
  ref?: Ref
}

/*
 * The connection type for PullRequestReview.

 */
export interface PullRequestReviewConnection {
  edges?: PullRequestReviewEdge[]
  nodes?: PullRequestReview[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * An edge in a connection.

 */
export interface RefEdge {
  cursor: String
  node?: Ref
}

/*
 * A list of projects associated with the owner.

 */
export interface ProjectConnection {
  edges?: ProjectEdge[]
  nodes?: Project[]
  pageInfo: PageInfo
  totalCount: Int
}

/*
 * A repository deploy key.

 */
export interface DeployKey extends Node {
  createdAt: DateTime
  id: ID_Output
  key: String
  readOnly: Boolean
  title: String
  verified: Boolean
}

/*
Git SSH string
*/
export type GitSSHRemote = string

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number
export type ID_Output = string

/*
A Git object ID.
*/
export type GitObjectID = string

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean

/*
An ISO-8601 encoded date string.
*/
export type Date = string

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number

/*
A valid x509 certificate string
*/
export type X509Certificate = string

/*
An ISO-8601 encoded UTC date string.
*/
export type DateTime = Date | string

/*
An ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC.
*/
export type GitTimestamp = string

/*
An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string.
*/
export type URI = string

/*
A string containing HTML code.
*/
export type HTML = string

/*
 * Types that can be an actor.

 */
export type PushAllowanceActor = User | Team

/*
 * Types that can be inside a Milestone.

 */
export type MilestoneItem = Issue | PullRequest

/*
 * Types that can be an actor.

 */
export type ReviewDismissalAllowanceActor = User | Team

/*
 * An item in an issue timeline

 */
export type IssueTimelineItem = Commit | IssueComment | CrossReferencedEvent | ClosedEvent | ReopenedEvent | SubscribedEvent | UnsubscribedEvent | ReferencedEvent | AssignedEvent | UnassignedEvent | LabeledEvent | UnlabeledEvent | MilestonedEvent | DemilestonedEvent | RenamedTitleEvent | LockedEvent | UnlockedEvent

/*
 * Types that can be requested reviewers.

 */
export type RequestedReviewer = User | Team

/*
 * An item in an pull request timeline

 */
export type PullRequestTimelineItem = Commit | CommitCommentThread | PullRequestReview | PullRequestReviewThread | PullRequestReviewComment | IssueComment | ClosedEvent | ReopenedEvent | SubscribedEvent | UnsubscribedEvent | MergedEvent | ReferencedEvent | CrossReferencedEvent | AssignedEvent | UnassignedEvent | LabeledEvent | UnlabeledEvent | MilestonedEvent | DemilestonedEvent | RenamedTitleEvent | LockedEvent | UnlockedEvent | DeployedEvent | HeadRefDeletedEvent | HeadRefRestoredEvent | HeadRefForcePushedEvent | BaseRefForcePushedEvent | ReviewRequestedEvent | ReviewRequestRemovedEvent | ReviewDismissedEvent

/*
 * The object which triggered a 'ClosedEvent'.

 */
export type Closer = Commit | PullRequest

/*
 * Any referencable object

 */
export type ReferencedSubject = Issue | PullRequest

/*
 * Types that can be inside Collection Items.

 */
export type CollectionItemContent = Repository | Organization | User

/*
 * Types that can be inside Project Cards.

 */
export type ProjectCardItem = Issue | PullRequest

/*
 * An object which has a renamable title

 */
export type RenamedTitleSubject = Issue | PullRequest

/*
 * Used for return value of Repository.issueOrPullRequest.

 */
export type IssueOrPullRequest = Issue | PullRequest

/*
 * The results of a search.

 */
export type SearchResultItem = Issue | PullRequest | Repository | User | Organization | MarketplaceListing

/*
 * The query root of GitHub's GraphQL interface.

 */
export type Query = {
  codeOfConduct: (args: { key: String }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<CodeOfConduct | null>
  codesOfConduct: (args: {}, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<CodeOfConduct[] | null>
  license: (args: { key: String }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<License | null>
  licenses: (args: {}, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<License[]>
  marketplaceCategories: (args: { excludeEmpty?: Boolean }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<MarketplaceCategory[]>
  marketplaceCategory: (args: { slug: String }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<MarketplaceCategory | null>
  marketplaceListing: (args: { slug: String }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<MarketplaceListing | null>
  marketplaceListings: (args: { first?: Int, after?: String, last?: Int, before?: String, categorySlug?: String, viewerCanAdmin?: Boolean, adminId?: ID_Output, organizationId?: ID_Output, allStates?: Boolean, slugs?: String[], primaryCategoryOnly?: Boolean, withFreeTrialsOnly?: Boolean }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<MarketplaceListingConnection>
  meta: (args: {}, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<GitHubMetadata>
  node: (args: { id: ID_Output }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<Node | null>
  nodes: (args: { ids: ID_Output[] }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<Node[]>
  organization: (args: { login: String }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<Organization | null>
  rateLimit: (args: { dryRun?: Boolean }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<RateLimit | null>
  relay: (args: {}, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<Query>
  repository: (args: { owner: String, name: String }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<Repository | null>
  repositoryOwner: (args: { login: String }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<RepositoryOwner | null>
  resource: (args: { url: URI }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<UniformResourceLocatable | null>
  search: (args: { first?: Int, after?: String, last?: Int, before?: String, query: String, type: SearchType }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<SearchResultItemConnection>
  topic: (args: { name: String }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<Topic | null>
  user: (args: { login: String }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<User | null>
  viewer: (args: {}, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<User>
}

/*
 * The root query for implementing GraphQL mutations.

 */
export type Mutation = {
  acceptTopicSuggestion: (args: { input: AcceptTopicSuggestionInput }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<AcceptTopicSuggestionPayload | null>
  addComment: (args: { input: AddCommentInput }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<AddCommentPayload | null>
  addProjectCard: (args: { input: AddProjectCardInput }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<AddProjectCardPayload | null>
  addProjectColumn: (args: { input: AddProjectColumnInput }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<AddProjectColumnPayload | null>
  addPullRequestReview: (args: { input: AddPullRequestReviewInput }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<AddPullRequestReviewPayload | null>
  addPullRequestReviewComment: (args: { input: AddPullRequestReviewCommentInput }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<AddPullRequestReviewCommentPayload | null>
  addReaction: (args: { input: AddReactionInput }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<AddReactionPayload | null>
  addStar: (args: { input: AddStarInput }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<AddStarPayload | null>
  createProject: (args: { input: CreateProjectInput }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<CreateProjectPayload | null>
  declineTopicSuggestion: (args: { input: DeclineTopicSuggestionInput }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<DeclineTopicSuggestionPayload | null>
  deleteProject: (args: { input: DeleteProjectInput }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<DeleteProjectPayload | null>
  deleteProjectCard: (args: { input: DeleteProjectCardInput }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<DeleteProjectCardPayload | null>
  deleteProjectColumn: (args: { input: DeleteProjectColumnInput }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<DeleteProjectColumnPayload | null>
  deletePullRequestReview: (args: { input: DeletePullRequestReviewInput }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<DeletePullRequestReviewPayload | null>
  dismissPullRequestReview: (args: { input: DismissPullRequestReviewInput }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<DismissPullRequestReviewPayload | null>
  lockLockable: (args: { input: LockLockableInput }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<LockLockablePayload | null>
  moveProjectCard: (args: { input: MoveProjectCardInput }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<MoveProjectCardPayload | null>
  moveProjectColumn: (args: { input: MoveProjectColumnInput }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<MoveProjectColumnPayload | null>
  removeOutsideCollaborator: (args: { input: RemoveOutsideCollaboratorInput }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<RemoveOutsideCollaboratorPayload | null>
  removeReaction: (args: { input: RemoveReactionInput }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<RemoveReactionPayload | null>
  removeStar: (args: { input: RemoveStarInput }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<RemoveStarPayload | null>
  requestReviews: (args: { input: RequestReviewsInput }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<RequestReviewsPayload | null>
  submitPullRequestReview: (args: { input: SubmitPullRequestReviewInput }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<SubmitPullRequestReviewPayload | null>
  updateProject: (args: { input: UpdateProjectInput }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<UpdateProjectPayload | null>
  updateProjectCard: (args: { input: UpdateProjectCardInput }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<UpdateProjectCardPayload | null>
  updateProjectColumn: (args: { input: UpdateProjectColumnInput }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<UpdateProjectColumnPayload | null>
  updatePullRequestReview: (args: { input: UpdatePullRequestReviewInput }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<UpdatePullRequestReviewPayload | null>
  updatePullRequestReviewComment: (args: { input: UpdatePullRequestReviewCommentInput }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<UpdatePullRequestReviewCommentPayload | null>
  updateSubscription: (args: { input: UpdateSubscriptionInput }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<UpdateSubscriptionPayload | null>
  updateTopics: (args: { input: UpdateTopicsInput }, info?: GraphQLResolveInfo | string, context?: { [key: string]: any }) => Promise<UpdateTopicsPayload | null>
}

export class Binding extends BaseBinding {

  constructor({ link, fragmentReplacements }: BindingOptions) {
    super({ typeDefs, link, fragmentReplacements });
  }

  query: Query = {
    codeOfConduct: (args, info, context): Promise<CodeOfConduct | null> => super.delegate('query', 'codeOfConduct', args, info, context),
    codesOfConduct: (args, info, context): Promise<CodeOfConduct[] | null> => super.delegate('query', 'codesOfConduct', args, info, context),
    license: (args, info, context): Promise<License | null> => super.delegate('query', 'license', args, info, context),
    licenses: (args, info, context): Promise<License[]> => super.delegate('query', 'licenses', args, info, context),
    marketplaceCategories: (args, info, context): Promise<MarketplaceCategory[]> => super.delegate('query', 'marketplaceCategories', args, info, context),
    marketplaceCategory: (args, info, context): Promise<MarketplaceCategory | null> => super.delegate('query', 'marketplaceCategory', args, info, context),
    marketplaceListing: (args, info, context): Promise<MarketplaceListing | null> => super.delegate('query', 'marketplaceListing', args, info, context),
    marketplaceListings: (args, info, context): Promise<MarketplaceListingConnection> => super.delegate('query', 'marketplaceListings', args, info, context),
    meta: (args, info, context): Promise<GitHubMetadata> => super.delegate('query', 'meta', args, info, context),
    node: (args, info, context): Promise<Node | null> => super.delegate('query', 'node', args, info, context),
    nodes: (args, info, context): Promise<Node[]> => super.delegate('query', 'nodes', args, info, context),
    organization: (args, info, context): Promise<Organization | null> => super.delegate('query', 'organization', args, info, context),
    rateLimit: (args, info, context): Promise<RateLimit | null> => super.delegate('query', 'rateLimit', args, info, context),
    relay: (args, info, context): Promise<Query> => super.delegate('query', 'relay', args, info, context),
    repository: (args, info, context): Promise<Repository | null> => super.delegate('query', 'repository', args, info, context),
    repositoryOwner: (args, info, context): Promise<RepositoryOwner | null> => super.delegate('query', 'repositoryOwner', args, info, context),
    resource: (args, info, context): Promise<UniformResourceLocatable | null> => super.delegate('query', 'resource', args, info, context),
    search: (args, info, context): Promise<SearchResultItemConnection> => super.delegate('query', 'search', args, info, context),
    topic: (args, info, context): Promise<Topic | null> => super.delegate('query', 'topic', args, info, context),
    user: (args, info, context): Promise<User | null> => super.delegate('query', 'user', args, info, context),
    viewer: (args, info, context): Promise<User> => super.delegate('query', 'viewer', args, info, context)
  }

  mutation: Mutation = {
    acceptTopicSuggestion: (args, info, context): Promise<AcceptTopicSuggestionPayload | null> => super.delegate('mutation', 'acceptTopicSuggestion', args, info, context),
    addComment: (args, info, context): Promise<AddCommentPayload | null> => super.delegate('mutation', 'addComment', args, info, context),
    addProjectCard: (args, info, context): Promise<AddProjectCardPayload | null> => super.delegate('mutation', 'addProjectCard', args, info, context),
    addProjectColumn: (args, info, context): Promise<AddProjectColumnPayload | null> => super.delegate('mutation', 'addProjectColumn', args, info, context),
    addPullRequestReview: (args, info, context): Promise<AddPullRequestReviewPayload | null> => super.delegate('mutation', 'addPullRequestReview', args, info, context),
    addPullRequestReviewComment: (args, info, context): Promise<AddPullRequestReviewCommentPayload | null> => super.delegate('mutation', 'addPullRequestReviewComment', args, info, context),
    addReaction: (args, info, context): Promise<AddReactionPayload | null> => super.delegate('mutation', 'addReaction', args, info, context),
    addStar: (args, info, context): Promise<AddStarPayload | null> => super.delegate('mutation', 'addStar', args, info, context),
    createProject: (args, info, context): Promise<CreateProjectPayload | null> => super.delegate('mutation', 'createProject', args, info, context),
    declineTopicSuggestion: (args, info, context): Promise<DeclineTopicSuggestionPayload | null> => super.delegate('mutation', 'declineTopicSuggestion', args, info, context),
    deleteProject: (args, info, context): Promise<DeleteProjectPayload | null> => super.delegate('mutation', 'deleteProject', args, info, context),
    deleteProjectCard: (args, info, context): Promise<DeleteProjectCardPayload | null> => super.delegate('mutation', 'deleteProjectCard', args, info, context),
    deleteProjectColumn: (args, info, context): Promise<DeleteProjectColumnPayload | null> => super.delegate('mutation', 'deleteProjectColumn', args, info, context),
    deletePullRequestReview: (args, info, context): Promise<DeletePullRequestReviewPayload | null> => super.delegate('mutation', 'deletePullRequestReview', args, info, context),
    dismissPullRequestReview: (args, info, context): Promise<DismissPullRequestReviewPayload | null> => super.delegate('mutation', 'dismissPullRequestReview', args, info, context),
    lockLockable: (args, info, context): Promise<LockLockablePayload | null> => super.delegate('mutation', 'lockLockable', args, info, context),
    moveProjectCard: (args, info, context): Promise<MoveProjectCardPayload | null> => super.delegate('mutation', 'moveProjectCard', args, info, context),
    moveProjectColumn: (args, info, context): Promise<MoveProjectColumnPayload | null> => super.delegate('mutation', 'moveProjectColumn', args, info, context),
    removeOutsideCollaborator: (args, info, context): Promise<RemoveOutsideCollaboratorPayload | null> => super.delegate('mutation', 'removeOutsideCollaborator', args, info, context),
    removeReaction: (args, info, context): Promise<RemoveReactionPayload | null> => super.delegate('mutation', 'removeReaction', args, info, context),
    removeStar: (args, info, context): Promise<RemoveStarPayload | null> => super.delegate('mutation', 'removeStar', args, info, context),
    requestReviews: (args, info, context): Promise<RequestReviewsPayload | null> => super.delegate('mutation', 'requestReviews', args, info, context),
    submitPullRequestReview: (args, info, context): Promise<SubmitPullRequestReviewPayload | null> => super.delegate('mutation', 'submitPullRequestReview', args, info, context),
    updateProject: (args, info, context): Promise<UpdateProjectPayload | null> => super.delegate('mutation', 'updateProject', args, info, context),
    updateProjectCard: (args, info, context): Promise<UpdateProjectCardPayload | null> => super.delegate('mutation', 'updateProjectCard', args, info, context),
    updateProjectColumn: (args, info, context): Promise<UpdateProjectColumnPayload | null> => super.delegate('mutation', 'updateProjectColumn', args, info, context),
    updatePullRequestReview: (args, info, context): Promise<UpdatePullRequestReviewPayload | null> => super.delegate('mutation', 'updatePullRequestReview', args, info, context),
    updatePullRequestReviewComment: (args, info, context): Promise<UpdatePullRequestReviewCommentPayload | null> => super.delegate('mutation', 'updatePullRequestReviewComment', args, info, context),
    updateSubscription: (args, info, context): Promise<UpdateSubscriptionPayload | null> => super.delegate('mutation', 'updateSubscription', args, info, context),
    updateTopics: (args, info, context): Promise<UpdateTopicsPayload | null> => super.delegate('mutation', 'updateTopics', args, info, context)
  }
}